var documenterSearchIndex = {"docs":
[{"location":"man/data/#Saving-and-Viewing-PowerSystems-Data-1","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"PowerSystems data can be serialized and deserialized in JSON.","category":"page"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"PowerSystems.to_json(system, \"system.json\")\nsystem = System(\"system.json\")","category":"page"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"It can be useful to view and filter the PowerSystems data in this format. There are many tools available to browse JSON data.","category":"page"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"Here is an example GUI tool that is available online in a browser.","category":"page"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"The command line utility jq offers even more features. The rest of this document provides example commands.","category":"page"},{"location":"man/data/#View-the-entire-file-pretty-printed.-1","page":"Saving and Viewing PowerSystems Data","title":"View the entire file pretty-printed.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq . system.json","category":"page"},{"location":"man/data/#View-the-PowerSystems-component-hierarchy.-1","page":"Saving and Viewing PowerSystems Data","title":"View the PowerSystems component hierarchy.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components | keys' system.json\njq '.components.Devices | keys' system.json\njq '.components.Devices.StaticInjection | keys' system.json\njq '.components.Devices.StaticInjection.Generator | keys' system.json","category":"page"},{"location":"man/data/#View-specific-components.-1","page":"Saving and Viewing PowerSystems Data","title":"View specific components.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard' system.json\njq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard[0]' system.json","category":"page"},{"location":"man/data/#Filter-on-a-parameter.-1","page":"Saving and Viewing PowerSystems Data","title":"Filter on a parameter.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | select(.name == \"107_CC_1\")' system.json\njq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | select(.op_cost.capacity > 3)' system.json","category":"page"},{"location":"man/data/#Output-a-table-with-select-fields.-1","page":"Saving and Viewing PowerSystems Data","title":"Output a table with select fields.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq -r '[\"name\", \"econ.capacity\"], (.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | [.name, .op_cost.capacity]) | @tsv' system.json","category":"page"},{"location":"man/data/#View-the-forecast-types-and-initial_time-values.-1","page":"Saving and Viewing PowerSystems Data","title":"View the forecast types and initial_time values.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data | keys' system.json","category":"page"},{"location":"man/data/#View-the-fields-of-a-forecast.-1","page":"Saving and Viewing PowerSystems Data","title":"View the fields of a forecast.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data[\"PowerSystems.ForecastKey(2020-01-01T00:00:00, Deterministic{Bus})\"][0] | keys'","category":"page"},{"location":"man/data/#View-the-value-of-every-field-in-an-array-of-forecasts.-1","page":"Saving and Viewing PowerSystems Data","title":"View the value of every field in an array of forecasts.","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data[\"PowerSystems.ForecastKey(2020-01-01T00:00:00, Deterministic{Bus})\"] | .[].initial_time'","category":"page"},{"location":"man/data/#Contents-1","page":"Saving and Viewing PowerSystems Data","title":"Contents","text":"","category":"section"},{"location":"man/data/#","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"Pages = [\n  \"man/data_requirements_table.md\",\n]","category":"page"},{"location":"developer/extending_parsing/#Extending-PowerSystemTableData-parsing-1","page":"Extending Parsing","title":"Extending PowerSystemTableData parsing","text":"","category":"section"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"This page describes how developers should read columns from raw data files.","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"The main point is that you should not read individual hard-coded column names from DataFrames. The parsing code includes mapping functionality that allows you to use PowerSystems-standard names while letting the users define their own custom names.","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"Note:  This assumes that you are familiar with this user workflow.","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"Procedure","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"Add an entry to the array of parameters for your category in src/descriptors/power_system_inputs.json according to the following:\nUse snake_case for the name field.\nThe fields name and description are required.\nTry to use a name that is generic and not specific to one dataset.\nIt is recommended that you define unit.\nIf PowerSystems expects the value to be per-unit then you must specify system_per_unit=true.\nPowerSystems has two commonly-used datasets with customized user config files: PowerSystemsTestData and RTS_GMLC. Update both of these files and submit pull requests.\nParse the raw data like in this example:","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"\nfunction demo_bus_csv_parser!(data::PowerSystemTableData)\n    for bus in iterate_rows(data, BUS::InputCategory)\n        @show bus.name, bus.max_active_power, bus.max_reactive_power\n    end\nend","category":"page"},{"location":"developer/extending_parsing/#","page":"Extending Parsing","title":"Extending Parsing","text":"iterate_rows returns a NamedTuple where each name defined in src/descriptors/power_system_inputs.json is a field.","category":"page"},{"location":"man/parsing/#Constructing-a-System-from-raw-data-1","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"","category":"section"},{"location":"man/parsing/#Supported-Formats-1","page":"Constructing a System from raw data","title":"Supported Formats","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems table data\nMATPOWER (parsed by PowerModels)\nPSS/E (parsed by PowerModels)","category":"page"},{"location":"man/parsing/#PowerSystems-Table-Data-1","page":"Constructing a System from raw data","title":"PowerSystems Table Data","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"This is a custom format that allows users to define power system component data by category and column with custom names, types, and units.","category":"page"},{"location":"man/parsing/#Categories-1","page":"Constructing a System from raw data","title":"Categories","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Components for each category must be defined in their own CSV file. The following categories are currently supported:","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"branch.csv\nbus.csv\ndc_branch.csv\ngen.csv\nload.csv\nreserves.csv\nstorage.csv","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"These must reside in the directory passed when constructing PowerSystemTableData.","category":"page"},{"location":"man/parsing/#Customization-1","page":"Constructing a System from raw data","title":"Customization","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Generate a configuration file (such as user_descriptors.yaml) from the defaults, which are stored in src/descriptors/power_system_inputs.json.","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"python ./bin/generate_config_file.py ./user_descriptors.yaml","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Next, edit this file with your customizations.","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Note that the user-specific customizations are stored in YAML rather than JSON to allow for easier editing. The next few sections describe changes you can make to this YAML file.  Do not edit the default JSON file.","category":"page"},{"location":"man/parsing/#Column-names-1","page":"Constructing a System from raw data","title":"Column names","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems provides a mapping capability that allows you to keep your own column names.","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"For example, when parsing raw data for a generator the code expects a column called name. If the raw data instead defines that column as GEN UID then you can change the custom_name field under the generator category to GEN UID in your YAML file. ","category":"page"},{"location":"man/parsing/#Per-unit-conversion-1","page":"Constructing a System from raw data","title":"Per-unit conversion","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems defines whether it expects a column value to be per-unit in power_system_inputs.json. If it expects per-unit but your values are not per-unit then you can set system_per_unit: false in user_descriptors.yaml and PowerSystems will automatically convert the values.","category":"page"},{"location":"man/parsing/#Unit-conversion-1","page":"Constructing a System from raw data","title":"Unit conversion","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems provides a limited set of unit conversions. For example, if power_system_inputs.json indicates that a value's unit is degrees but your values are in radians then you can set unit_conversion: radian in your YAML file.","category":"page"},{"location":"man/parsing/#Example-file-1","page":"Constructing a System from raw data","title":"Example file","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Refer to RTS_GMLC for an example.","category":"page"},{"location":"man/parsing/#Time-series-data-1","page":"Constructing a System from raw data","title":"Time series data","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems requires a metadata file that maps components to their time series data in order to be able to automatically construct forecasts from raw data files. The following fields are required for each time array:","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"simulation:  User description of simulation\ncategory:  Type of component. Must map to PowerSystems abstract types (Bus, ElectricLoad, Generator, LoadZone, Reserve)\ncomponent_name:  Name of component\nlabel:  Name of accessor function that can be called on the component to retrieve the forecasted value.\nscaling_factor:  Controls normalization of the data. Use 1.0 for pre-normalized data. Use 'Max' to divide the timeseries by the max value in the column. Use any float for a custom scaling factor.\ndata_file:  Path to the time series data file","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems supports this metadata in either CSV or JSON formats. Refer to RTS_GMLC for an example.","category":"page"},{"location":"man/parsing/#Performance-considerations-1","page":"Constructing a System from raw data","title":"Performance considerations","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"By default PowerSystems stores time series data in HDF5 files. It does not keep all of the data in memory. This means that every time you access a forecast PowerSystems will have to read the data from storage, which will add latency. If you know ahead of time that all of your data will fit in memory then you can change this behavior by passing time_series_in_memory = true when you create the System.","category":"page"},{"location":"man/parsing/#Custom-construction-of-generators-1","page":"Constructing a System from raw data","title":"Custom construction of generators","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems supports custom construction of subtypes of the abstract type Generator based on fuel and type. The parsing code detects these fields in the raw data and then constructs the concrete type listed in the passed generator mapping file. The default file is src/parsers/generator_mapping.yaml. You can override this behavior by specifying your own file when constructing PowerSystemTableData.","category":"page"},{"location":"man/parsing/#System-creation-with-custom-config-files-1","page":"Constructing a System from raw data","title":"System creation with custom config files","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Here is an example of how to construct a System with all customizations listed on this page.","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"data_dir = \"/data/my-data-dir\"\nbase_power = 100.0\ndescriptors = \"./user_descriptors.yaml\"\ntimeseries_metadata_file = \"./timeseries_pointers.json\"\ngenerator_mapping_file = \"./generator_mapping.yaml\"\ndata = PowerSystemTableData(\n    data_dir,\n    base_power,\n    descriptors;\n    timeseries_metadata_file = timeseries_metadata_file,\n    generator_mapping_file = generator_mapping_file,\n)\nsys = System(data, time_series_in_memory = true)","category":"page"},{"location":"man/parsing/#MATPOWER-/-PSS/E-1","page":"Constructing a System from raw data","title":"MATPOWER / PSS/E","text":"","category":"section"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"The following code will create a System from a MATPOWER or PSS/E file by first parsing it with PowerModels.","category":"page"},{"location":"man/parsing/#","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"sys = PowerSystems.parse_standard_files(\"./case5.m\")","category":"page"},{"location":"developer/tests/#Tests-1","page":"Tests","title":"Tests","text":"","category":"section"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"Unit tests can be executed in the REPL by executing the following:","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"julia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"The unit test module supports several customizations to aid development and debug.","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"Run a subset of tests in the REPL:","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"julia> push!(ARGS, \"<test_filename_without_.jl>\")\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"Change console logging level (defaults to Error):","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"julia> ENV[\"PS_CONSOLE_LOG_LEVEL\"] = Info\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"Change log file (./power-systems.log) logging level (defaults to Info):","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"julia> ENV[\"PS_LOG_LEVEL\"] = Debug\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/#","page":"Tests","title":"Tests","text":"The unit test module appends a summary of all log message counts to the log file.  If a message is logged too frequently then consider tagging that message with maxlog=X to suppress it.","category":"page"},{"location":"api/PowerSystems/#PowerSystems-1","page":"PowerSystems","title":"PowerSystems","text":"","category":"section"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"CurrentModule = PowerSystems\nDocTestSetup  = quote\n    using PowerSystems\nend","category":"page"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"API documentation","category":"page"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"Pages = [\"PowerSystems.md\"]","category":"page"},{"location":"api/PowerSystems/#Index-1","page":"PowerSystems","title":"Index","text":"","category":"section"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"Pages = [\"PowerSystems.md\"]","category":"page"},{"location":"api/PowerSystems/#Exported-1","page":"PowerSystems","title":"Exported","text":"","category":"section"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"Modules = [PowerSystems]\nPrivate = false","category":"page"},{"location":"api/PowerSystems/#PowerSystems.PowerSystems","page":"PowerSystems","title":"PowerSystems.PowerSystems","text":"Module for constructing self-contained power system objects.\n\n\n\n\n\n","category":"module"},{"location":"api/PowerSystems/#PowerSystems.AVRFixed","page":"PowerSystems","title":"PowerSystems.AVRFixed","text":"mutable struct AVRFixed <: AVR\n    Emf::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a AVR that returns a fixed voltage to the rotor winding\n\nArguments\n\nEmf::Float64: Fixed voltage to the rotor winding, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: Fixed AVR has no states\nn_states::Int64: Fixed AVR has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRSimple","page":"PowerSystems","title":"PowerSystems.AVRSimple","text":"mutable struct AVRSimple <: AVR\n    Kv::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a simple proportional AVR in the derivative of EMF i.e. an integrator controller on EMF\n\nArguments\n\nKv::Float64: Proportional Gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: Fixed AVR has 1 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRTypeI","page":"PowerSystems","title":"PowerSystems.AVRTypeI","text":"mutable struct AVRTypeI <: AVR\n    Ka::Float64\n    Ke::Float64\n    Kf::Float64\n    Ta::Float64\n    Te::Float64\n    Tf::Float64\n    Tr::Float64\n    Vr_max::Float64\n    Vr_min::Float64\n    Ae::Float64\n    Be::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an Automatic Voltage Regulator Type I - Resembles IEEE Type DC1\n\nArguments\n\nKa::Float64: Amplifier Gain, validation range: (0, nothing)\nKe::Float64: Field circuit integral deviation, validation range: (0, nothing)\nKf::Float64: Stabilizer Gain in s * pu/pu, validation range: (0, nothing)\nTa::Float64: Amplifier Time Constant in s, validation range: (0, nothing)\nTe::Float64: Field Circuit Time Constant in s, validation range: (0, nothing)\nTf::Float64: Stabilizer Time Constant in s, validation range: (0, nothing)\nTr::Float64: Voltage Measurement Time Constant in s, validation range: (0, nothing)\nVr_max::Float64: Maximum regulator voltage in pu, validation range: (0, nothing)\nVr_min::Float64: Minimum regulator voltage in pu, validation range: (0, nothing)\nAe::Float64: 1st ceiling coefficient, validation range: (0, nothing)\nBe::Float64: 2nd ceiling coefficient, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRTypeII","page":"PowerSystems","title":"PowerSystems.AVRTypeII","text":"mutable struct AVRTypeII <: AVR\n    K0::Float64\n    T1::Float64\n    T2::Float64\n    T3::Float64\n    T4::Float64\n    Te::Float64\n    Tr::Float64\n    Vr_max::Float64\n    Vr_min::Float64\n    Ae::Float64\n    Be::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an Automatic Voltage Regulator Type II -  Typical static exciter model\n\nArguments\n\nK0::Float64: Regulator Gain, validation range: (0, nothing)\nT1::Float64: First Pole in s, validation range: (0, nothing)\nT2::Float64: First zero in s, validation range: (0, nothing)\nT3::Float64: First Pole in s, validation range: (0, nothing)\nT4::Float64: First zero in s, validation range: (0, nothing)\nTe::Float64: Field Circuit Time Constant in s, validation range: (0, nothing)\nTr::Float64: Voltage Measurement Time Constant in s, validation range: (0, nothing)\nVr_max::Float64: Maximum regulator voltage in pu, validation range: (0, nothing)\nVr_min::Float64: Minimum regulator voltage in pu, validation range: (0, nothing)\nAe::Float64: 1st ceiling coefficient, validation range: (0, nothing)\nBe::Float64: 2nd ceiling coefficient, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AndersonFouadMachine","page":"PowerSystems","title":"PowerSystems.AndersonFouadMachine","text":"mutable struct AndersonFouadMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 6-states synchronous machine: Anderson-Fouad model\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Arc","page":"PowerSystems","title":"PowerSystems.Arc","text":"mutable struct Arc <: Topology\n    from::Bus\n    to::Bus\n    internal::InfrastructureSystemsInternal\nend\n\nA topological Arc.\n\nArguments\n\nfrom::Bus: The initial bus\nto::Bus: The terminal bus\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AvgCnvFixedDC","page":"PowerSystems","title":"PowerSystems.AvgCnvFixedDC","text":"mutable struct AvgCnvFixedDC <: Converter\n    v_rated::Float64\n    s_rated::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an average converter model\n\nArguments\n\nv_rated::Float64: rated voltage, validation range: (0, nothing)\ns_rated::Float64: rated VA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.BaseMachine","page":"PowerSystems","title":"PowerSystems.BaseMachine","text":"mutable struct BaseMachine <: Machine\n    R::Float64\n    Xd_p::Float64\n    eq_p::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an Automatic Voltage Regulator Type II -  Typical static exciter model\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd_p::Float64: Reactance after EMF in machine per unit, validation range: (0, nothing)\neq_p::Float64: Fixed EMF behind the impedance, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Bus","page":"PowerSystems","title":"PowerSystems.Bus","text":"mutable struct Bus <: Topology\n    number::Int64\n    name::String\n    bustype::Union{Nothing, BusType}\n    angle::Union{Nothing, Float64}\n    voltage::Union{Nothing, Float64}\n    voltagelimits::Union{Nothing, Min_Max}\n    basevoltage::Union{Nothing, Float64}\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nA power-system bus.\n\nArguments\n\nnumber::Int64: number associated with the bus\nname::String: the name of the bus\nbustype::Union{Nothing, BusType}: bus type\nangle::Union{Nothing, Float64}: angle of the bus in radians, validation range: (-1.571, 1.571), action if invalid: error\nvoltage::Union{Nothing, Float64}: voltage as a multiple of basevoltage, validation range: voltagelimits, action if invalid: warn\nvoltagelimits::Union{Nothing, Min_Max}: limits on the voltage variation as multiples of basevoltage\nbasevoltage::Union{Nothing, Float64}: the base voltage in kV, validation range: (0, nothing), action if invalid: error\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Bus-Tuple{Any,Any,String,Any,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.Bus","text":"Bus(number::Any, name::Any, bustype::String, angle::Any, voltage::Any, voltagelimits::Any, basevoltage::Any; ext) -> Bus\n\n\nAllows construction with bus type specified as a string for legacy code.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.CombinedVIwithVZ","page":"PowerSystems","title":"PowerSystems.CombinedVIwithVZ","text":"mutable struct CombinedVIwithVZ <: VSControl\n    kpv::Float64\n    kiv::Float64\n    kffv::Float64\n    rv::Float64\n    lv::Float64\n    kpc::Float64\n    kic::Float64\n    kffi::Float64\n    ωad::Float64\n    kad::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an inner loop controller using virtual impedance, voltage controller and current controller.\n\nArguments\n\nkpv::Float64: voltage controller proportional gain, validation range: (0, nothing)\nkiv::Float64: voltage controller integral gain, validation range: (0, nothing)\nkffv::Float64: Binary variable to enable feed-forward gain of voltage., validation range: (0, nothing)\nrv::Float64: virtual resistance, validation range: (0, nothing)\nlv::Float64: virtual inductance, validation range: (0, nothing)\nkpc::Float64: current controller proportional gain, validation range: (0, nothing)\nkic::Float64: current controller integral gain, validation range: (0, nothing)\nkffi::Float64: Binary variable to enable feed-forward gain of current, validation range: (0, nothing)\nωad::Float64: active damping filter cutoff frequency (rad/sec), validation range: (0, nothing)\nkad::Float64: active damping gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FiveMassShaft","page":"PowerSystems","title":"PowerSystems.FiveMassShaft","text":"mutable struct FiveMassShaft <: Shaft\n    H::Float64\n    H_hp::Float64\n    H_ip::Float64\n    H_lp::Float64\n    H_ex::Float64\n    D::Float64\n    D_hp::Float64\n    D_ip::Float64\n    D_lp::Float64\n    D_ex::Float64\n    D_12::Float64\n    D_23::Float64\n    D_34::Float64\n    D_45::Float64\n    K_hp::Float64\n    K_ip::Float64\n    K_lp::Float64\n    K_ex::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 5 mass-spring shaft model.  It contains a High-Pressure (HP) steam turbine, Intermediate-Pressure (IP)  steam turbine, Low-Pressure (LP) steam turbine, the Rotor and an Exciter (EX) mover.\n\nArguments\n\nH::Float64: Rotor inertia constant in MWs/MVA, validation range: (0, nothing)\nH_hp::Float64: High pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_ip::Float64: Intermediate pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_lp::Float64: Low pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_ex::Float64:  Exciter inertia constant in MWs/MVA, validation range: (0, nothing)\nD::Float64: Rotor natural damping in pu, validation range: (0, nothing)\nD_hp::Float64: High pressure turbine natural damping in pu, validation range: (0, nothing)\nD_ip::Float64: Intermediate pressure turbine natural damping in pu, validation range: (0, nothing)\nD_lp::Float64: Low pressure turbine natural damping in pu, validation range: (0, nothing)\nD_ex::Float64: Exciter natural damping in pu, validation range: (0, nothing)\nD_12::Float64: High-Intermediate pressure turbine damping, validation range: (0, nothing)\nD_23::Float64: Intermediate-Low pressure turbine damping, validation range: (0, nothing)\nD_34::Float64: Low pressure turbine-Rotor damping, validation range: (0, nothing)\nD_45::Float64: Rotor-Exciter damping, validation range: (0, nothing)\nK_hp::Float64: High pressure turbine angle coefficient, validation range: (0, nothing)\nK_ip::Float64: Intermediate pressure turbine angle coefficient, validation range: (0, nothing)\nK_lp::Float64: Low pressure turbine angle coefficient, validation range: (0, nothing)\nK_ex::Float64: Exciter angle coefficient, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FixedAdmittance","page":"PowerSystems","title":"PowerSystems.FixedAdmittance","text":"mutable struct FixedAdmittance <: ElectricLoad\n    name::String\n    available::Bool\n    bus::Bus\n    Y::Complex{Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nY::Complex{Float64}: System per-unit value\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FixedDCSource","page":"PowerSystems","title":"PowerSystems.FixedDCSource","text":"mutable struct FixedDCSource <: DCSource\n    voltage::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Fixed DC Source that returns a fixed DC voltage\n\nArguments\n\nvoltage::Float64: rated VA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FullMachine","page":"PowerSystems","title":"PowerSystems.FullMachine","text":"mutable struct FullMachine <: Machine\n    R::Float64\n    R_f::Float64\n    R_1d::Float64\n    R_1q::Float64\n    L_d::Float64\n    L_q::Float64\n    L_ad::Float64\n    L_aq::Float64\n    L_f1d::Float64\n    L_ff::Float64\n    L_1d::Float64\n    L_1q::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    inv_d_fluxlink::Array{Float64,2}\n    inv_q_fluxlink::Array{Float64,2}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameter of a full order flux stator-rotor model without zero sequence flux in the stator.  The derivative of stator fluxes (ψd and ψq) is NOT neglected. Only one q-axis damping circuit is considered. All parameters are in machine per unit.  Refer to Chapter 3 of Power System Stability and Control by P. Kundur or Chapter 11 of Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby, for more details.  Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nR_f::Float64: Field rotor winding resistance in per unit, validation range: (0, nothing)\nR_1d::Float64:  Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski., validation range: (0, nothing)\nR_1q::Float64: Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski., validation range: (0, nothing)\nL_d::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as Lad + Ll in Kundur (and Ld in Machowski)., validation range: (0, nothing)\nL_q::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as Laq + Ll in Kundur., validation range: (0, nothing)\nL_ad::Float64: Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_aq::Float64: Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit, validation range: (0, nothing)\nL_f1d::Float64: Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_ff::Float64: Field rotor winding inductance, in per unit, validation range: (0, nothing)\nL_1d::Float64: Inductance of the d-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nL_1q::Float64: Inductance of the q-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\ninv_d_fluxlink::Array{Float64,2}: Equations 3.127, 3.130, 3.131 From Kundur\ninv_q_fluxlink::Array{Float64,2}: Equations 3.128, 3.132 From Kundur\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.GeneratorCostModel","page":"PowerSystems","title":"PowerSystems.GeneratorCostModel","text":"From http://www.pserc.cornell.edu/matpower/MATPOWER-manual.pdf Table B-4\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.GenericBattery","page":"PowerSystems","title":"PowerSystems.GenericBattery","text":"mutable struct GenericBattery <: Storage\n    name::String\n    available::Bool\n    bus::Bus\n    primemover::PrimeMovers\n    energy::Float64\n    capacity::Min_Max\n    rating::Float64\n    activepower::Float64\n    inputactivepowerlimits::Min_Max\n    outputactivepowerlimits::Min_Max\n    efficiency::NamedTuple{(:in, :out), Tuple{Float64, Float64}}\n    reactivepower::Float64\n    reactivepowerlimits::Union{Nothing, Min_Max}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData structure for a generic battery\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nprimemover::PrimeMovers: PrimeMover Technology according to EIA 923\nenergy::Float64: State of Charge of the Battery p.u.-hr, validation range: (0, nothing), action if invalid: error\ncapacity::Min_Max: Maximum and Minimum storage capacity in p.u.-hr, validation range: (0, nothing), action if invalid: error\nrating::Float64\nactivepower::Float64\ninputactivepowerlimits::Min_Max, validation range: (0, nothing), action if invalid: error\noutputactivepowerlimits::Min_Max, validation range: (0, nothing), action if invalid: error\nefficiency::NamedTuple{(:in, :out), Tuple{Float64, Float64}}, validation range: (0, 1), action if invalid: warn\nreactivepower::Float64, validation range: reactivepowerlimits, action if invalid: warn\nreactivepowerlimits::Union{Nothing, Min_Max}\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HVDCLine","page":"PowerSystems","title":"PowerSystems.HVDCLine","text":"mutable struct HVDCLine <: DCBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    arc::Arc\n    activepowerlimits_from::Min_Max\n    activepowerlimits_to::Min_Max\n    reactivepowerlimits_from::Min_Max\n    reactivepowerlimits_to::Min_Max\n    loss::NamedTuple{(:l0, :l1), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\na High voltage DC line.\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\narc::Arc\nactivepowerlimits_from::Min_Max\nactivepowerlimits_to::Min_Max\nreactivepowerlimits_from::Min_Max\nreactivepowerlimits_to::Min_Max\nloss::NamedTuple{(:l0, :l1), Tuple{Float64, Float64}}\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HydroDispatch","page":"PowerSystems","title":"PowerSystems.HydroDispatch","text":"mutable struct HydroDispatch <: HydroGen\n    name::String\n    available::Bool\n    bus::Bus\n    activepower::Float64\n    reactivepower::Float64\n    tech::TechHydro\n    op_cost::TwoPartCost\n    storage_capacity::Float64\n    inflow::Float64\n    initial_storage::Float64\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactivepower::Float64\nreactivepower::Float64, validation range: tech.reactivepowerlimits, action if invalid: warn\ntech::TechHydro\nop_cost::TwoPartCost\nstorage_capacity::Float64, validation range: (0, nothing), action if invalid: error\ninflow::Float64, validation range: (0, nothing), action if invalid: error\ninitial_storage::Float64, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HydroFix","page":"PowerSystems","title":"PowerSystems.HydroFix","text":"mutable struct HydroFix <: HydroGen\n    name::String\n    available::Bool\n    bus::Bus\n    activepower::Float64\n    reactivepower::Float64\n    tech::TechHydro\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactivepower::Float64\nreactivepower::Float64, validation range: tech.reactivepowerlimits, action if invalid: warn\ntech::TechHydro\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.InterruptibleLoad","page":"PowerSystems","title":"PowerSystems.InterruptibleLoad","text":"mutable struct InterruptibleLoad <: ControllableLoad\n    name::String\n    available::Bool\n    bus::Bus\n    model::LoadModel\n    activepower::Float64\n    reactivepower::Float64\n    maxactivepower::Float64\n    maxreactivepower::Float64\n    op_cost::TwoPartCost\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nmodel::LoadModel\nactivepower::Float64\nreactivepower::Float64\nmaxactivepower::Float64\nmaxreactivepower::Float64\nop_cost::TwoPartCost\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.LCLFilter","page":"PowerSystems","title":"PowerSystems.LCLFilter","text":"mutable struct LCLFilter <: Filter\n    lf::Float64\n    rf::Float64\n    cf::Float64\n    lg::Float64\n    rg::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a LCL filter outside the converter\n\nArguments\n\nlf::Float64: Series inductance in p.u. of converter filter, validation range: (0, nothing)\nrf::Float64: Series resistance in p.u. of converter filter, validation range: (0, nothing)\ncf::Float64: Shunt capacitance in p.u. of converter filter, validation range: (0, nothing)\nlg::Float64: Series inductance in p.u. of converter filter to the grid, validation range: (0, nothing)\nrg::Float64: Series resistance in p.u. of converter filter to the grid, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Line","page":"PowerSystems","title":"PowerSystems.Line","text":"mutable struct Line <: ACBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    reactivepower_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    b::NamedTuple{(:from, :to), Tuple{Float64, Float64}}\n    rate::Float64\n    anglelimits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\nreactivepower_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nb::NamedTuple{(:from, :to), Tuple{Float64, Float64}}: System per-unit value, validation range: (0, 100), action if invalid: error\nrate::Float64\nanglelimits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}, validation range: (-1.571, 1.571), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Line-Tuple{Any,Bool,Float64,Float64,Arc,Any,Any,Any,Any,Float64}","page":"PowerSystems","title":"PowerSystems.Line","text":"Line(name::Any, available::Bool, activepower_flow::Float64, reactivepower_flow::Float64, arc::Arc, r::Any, x::Any, b::Any, rate::Any, anglelimits::Float64) -> Line\n\n\nAccepts anglelimits as a Float64.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.LoadZones","page":"PowerSystems","title":"PowerSystems.LoadZones","text":"mutable struct LoadZones <: Topology\n    number::Int64\n    name::String\n    buses::Vector{Bus}\n    maxactivepower::Float64\n    maxreactivepower::Float64\n    services::Vector{Service}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nnumber::Int64\nname::String\nbuses::Vector{Bus}\nmaxactivepower::Float64\nmaxreactivepower::Float64\nservices::Vector{Service}: Services that this device contributes to\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.MarconatoMachine","page":"PowerSystems","title":"PowerSystems.MarconatoMachine","text":"mutable struct MarconatoMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    T_AA::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    γd::Float64\n    γq::Float64\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 6-states synchronous machine: Marconato model\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nT_AA::Float64: Time constant of d-axis additional leakage, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nγd::Float64\nγq::Float64\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.MonitoredLine","page":"PowerSystems","title":"PowerSystems.MonitoredLine","text":"mutable struct MonitoredLine <: ACBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    reactivepower_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    b::NamedTuple{(:from, :to), Tuple{Float64, Float64}}\n    flowlimits::NamedTuple{(:from_to, :to_from), Tuple{Float64, Float64}}\n    rate::Float64\n    anglelimits::Min_Max\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\nreactivepower_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nb::NamedTuple{(:from, :to), Tuple{Float64, Float64}}: System per-unit value, validation range: (0, 2), action if invalid: error\nflowlimits::NamedTuple{(:from_to, :to_from), Tuple{Float64, Float64}}: TODO: throw warning above max SIL\nrate::Float64: TODO: compare to SIL (warn) (theoretical limit)\nanglelimits::Min_Max, validation range: (-1.571, 1.571), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.OneDOneQMachine","page":"PowerSystems","title":"PowerSystems.OneDOneQMachine","text":"mutable struct OneDOneQMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states synchronous machine: Simplified Marconato model  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when  transmission network dynamics is neglected.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PLL","page":"PowerSystems","title":"PowerSystems.PLL","text":"mutable struct PLL <: FrequencyEstimator\n    ω_lp::Float64\n    kp_pll::Float64\n    ki_pll::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Phase-Locked Loop (PLL) for VSM\n\nArguments\n\nω_lp::Float64: PLL low-pass filter frequency (rad/sec), validation range: (0, nothing)\nkp_pll::Float64: PLL proportional gain, validation range: (0, nothing)\nki_pll::Float64: PLL integral gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PSSFixed","page":"PowerSystems","title":"PowerSystems.PSSFixed","text":"mutable struct PSSFixed <: PSS\n    V_pss::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a PSS that returns a fixed voltage to add to the reference for the AVR\n\nArguments\n\nV_pss::Float64: Fixed voltage stabilization signal, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PhaseShiftingTransformer","page":"PowerSystems","title":"PowerSystems.PhaseShiftingTransformer","text":"mutable struct PhaseShiftingTransformer <: ACBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    reactivepower_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primaryshunt::Float64\n    tap::Float64\n    α::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\nreactivepower_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimaryshunt::Float64, validation range: (0, 2), action if invalid: error\ntap::Float64, validation range: (0, 2), action if invalid: error\nα::Float64, validation range: (-1.571, 1.571), action if invalid: warn\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerLoad","page":"PowerSystems","title":"PowerSystems.PowerLoad","text":"mutable struct PowerLoad <: StaticLoad\n    name::String\n    available::Bool\n    bus::Bus\n    model::Union{Nothing, LoadModel}\n    activepower::Float64\n    reactivepower::Float64\n    maxactivepower::Float64\n    maxreactivepower::Float64\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData structure for a static power load.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nmodel::Union{Nothing, LoadModel}\nactivepower::Float64\nreactivepower::Float64\nmaxactivepower::Float64\nmaxreactivepower::Float64\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerSystemType","page":"PowerSystems","title":"PowerSystems.PowerSystemType","text":"Supertype for all PowerSystems types. All subtypes must include a InfrastructureSystemsInternal member. Subtypes should call InfrastructureSystemsInternal() by default, but also must provide a constructor that allows existing values to be deserialized.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ReactivePowerDroop","page":"PowerSystems","title":"PowerSystems.ReactivePowerDroop","text":"mutable struct ReactivePowerDroop <: ReactivePowerControl\n    kq::Float64\n    ωf::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Reactive Power droop controller\n\nArguments\n\nkq::Float64: frequency droop gain, validation range: (0, nothing)\nωf::Float64: frequency droop gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RenewableDispatch","page":"PowerSystems","title":"PowerSystems.RenewableDispatch","text":"mutable struct RenewableDispatch <: RenewableGen\n    name::String\n    available::Bool\n    bus::Bus\n    activepower::Float64\n    reactivepower::Float64\n    tech::TechRenewable\n    op_cost::TwoPartCost\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactivepower::Float64\nreactivepower::Float64\ntech::TechRenewable\nop_cost::TwoPartCost\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RenewableDispatch-Tuple{String,Bool,Bus,Float64,Float64,PowerSystems.PrimeMovers,Float64,TwoPartCost}","page":"PowerSystems","title":"PowerSystems.RenewableDispatch","text":"RenewableDispatch(name::String, available::Bool, bus::Bus, activepower::Float64, reactivepower::Float64, prime_mover::PowerSystems.PrimeMovers, rating::Float64, op_cost::TwoPartCost) -> RenewableDispatch\n\n\nAccepts rating as a Float64 and then creates a TechRenewable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.RenewableFix","page":"PowerSystems","title":"PowerSystems.RenewableFix","text":"mutable struct RenewableFix <: RenewableGen\n    name::String\n    available::Bool\n    bus::Bus\n    activepower::Float64\n    reactivepower::Float64\n    tech::TechRenewable\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for fixed renewable generation technologies.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactivepower::Float64\nreactivepower::Float64\ntech::TechRenewable\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RenewableFix-Tuple{String,Bool,Bus,Float64,Float64,PowerSystems.PrimeMovers,Float64}","page":"PowerSystems","title":"PowerSystems.RenewableFix","text":"RenewableFix(name::String, available::Bool, bus::Bus, activepower::Float64, reactivepower::Float64, prime_mover::PowerSystems.PrimeMovers, rating::Float64) -> RenewableFix\n\n\nAccepts rating as a Float64 and then creates a TechRenewable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.SimpleAFMachine","page":"PowerSystems","title":"PowerSystems.SimpleAFMachine","text":"mutable struct SimpleAFMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states simplified Anderson-Fouad (SimpleAFMachine) model.  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network  dynamics is neglected.  If transmission dynamics is considered use the full order Anderson Fouad model.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SimpleFullMachine","page":"PowerSystems","title":"PowerSystems.SimpleFullMachine","text":"mutable struct SimpleFullMachine <: Machine\n    R::Float64\n    R_f::Float64\n    R_1d::Float64\n    R_1q::Float64\n    L_d::Float64\n    L_q::Float64\n    L_ad::Float64\n    L_aq::Float64\n    L_f1d::Float64\n    L_ff::Float64\n    L_1d::Float64\n    L_1q::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    inv_d_fluxlink::Array{Float64,2}\n    inv_q_fluxlink::Array{Float64,2}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameter of a full order flux stator-rotor model without zero sequence flux in the stator.  The derivative of stator fluxes (ψd and ψq) is neglected. This is standard when  transmission network dynamics is neglected. Only one q-axis damping circuit  is considered. All per unit are in machine per unit.  Refer to Chapter 3 of Power System Stability and Control by P. Kundur or Chapter 11 of Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby, for more details.  Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nR_f::Float64: Field rotor winding resistance in per unit, validation range: (0, nothing)\nR_1d::Float64:  Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski., validation range: (0, nothing)\nR_1q::Float64: Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski., validation range: (0, nothing)\nL_d::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as Lad + Ll in Kundur (and Ld in Machowski)., validation range: (0, nothing)\nL_q::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as Laq + Ll in Kundur., validation range: (0, nothing)\nL_ad::Float64: Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_aq::Float64: Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit, validation range: (0, nothing)\nL_f1d::Float64: Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_ff::Float64: Field rotor winding inductance, in per unit, validation range: (0, nothing)\nL_1d::Float64: Inductance of the d-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nL_1q::Float64: Inductance of the q-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\ninv_d_fluxlink::Array{Float64,2}: Equations 3.127, 3.130, 3.131 From Kundur\ninv_q_fluxlink::Array{Float64,2}: Equations 3.128, 3.132 From Kundur\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SimpleMarconatoMachine","page":"PowerSystems","title":"PowerSystems.SimpleMarconatoMachine","text":"mutable struct SimpleMarconatoMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    T_AA::Float64\n    MVABase::Float64\n    ext::Dict{String, Any}\n    γd::Float64\n    γq::Float64\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states synchronous machine: Simplified Marconato model  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network  dynamics is neglected.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nT_AA::Float64: Time constant of d-axis additional leakage, validation range: (0, nothing)\nMVABase::Float64: Nominal Capacity in MVA, validation range: (0, nothing)\next::Dict{String, Any}\nγd::Float64\nγq::Float64\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SingleMass","page":"PowerSystems","title":"PowerSystems.SingleMass","text":"mutable struct SingleMass <: Shaft\n    H::Float64\n    D::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of single mass shaft model. Typically represents the rotor mass.\n\nArguments\n\nH::Float64: Rotor inertia constant in MWs/MVA, validation range: (0, nothing)\nD::Float64: Rotor natural damping in pu, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Source","page":"PowerSystems","title":"PowerSystems.Source","text":"mutable struct Source <: StaticInjection\n    name::String\n    available::Bool\n    bus::Bus\n    V_R::Float64\n    V_I::Float64\n    X_th::Float64\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nThis struct acts as an infinity bus.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nV_R::Float64: Voltage Source Real Component, validation range: (0, nothing)\nV_I::Float64: Voltage Source Imaginary Component, validation range: (0, nothing)\nX_th::Float64: Source Thevenin impedance, validation range: (0, nothing)\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.StaticReserve","page":"PowerSystems","title":"PowerSystems.StaticReserve","text":"mutable struct StaticReserve{T <: ReserveDirection} <: Reserve{T}\n    name::String\n    timeframe::Float64\n    requirement::Float64\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for a proportional reserve product for system simulations.\n\nArguments\n\nname::String\ntimeframe::Float64: the relative saturation timeframe, validation range: (0, nothing), action if invalid: error\nrequirement::Float64: the static value of required reserves, validation range: (0, nothing), action if invalid: error\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.StaticReserve-Tuple{Any,InfrastructureSystems.FlattenIteratorWrapper,Any,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.StaticReserve","text":"StaticReserve(name::Any, contributingdevices::InfrastructureSystems.FlattenIteratorWrapper, timeframe::Any, requirement::Any, _forecasts::Any, internal::Any)\n\n\nAllows construction of a reserve from an iterator.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System","page":"PowerSystems","title":"PowerSystems.System","text":"System\n\nA power system defined by fields for basepower, components, and forecasts.\n\nSystem(basepower)\nSystem(components, basepower)\nSystem(buses, generators, loads, branches, storage, basepower, services, annex; kwargs...)\nSystem(buses, generators, loads, basepower; kwargs...)\nSystem(file; kwargs...)\nSystem(; buses, generators, loads, branches, storage, basepower, services, annex, kwargs...)\nSystem(; kwargs...)\n\nArguments\n\nbuses::Vector{Bus}: an array of buses\ngenerators::Vector{Generator}: an array of generators of (possibly) different types\nloads::Vector{ElectricLoad}: an array of load specifications that includes timing of the loads\nbranches::Union{Nothing, Vector{Branch}}: an array of branches; may be nothing\nstorage::Union{Nothing, Vector{Storage}}: an array of storage devices; may be nothing\nbasepower::Float64: the base power value for the system\nservices::Union{Nothing, Vector{<:Service}}: an array of services; may be nothing\n\nKeyword arguments\n\nrunchecks::Bool: Run available checks on input fields and when add_component! is called. Throws InvalidRange if an error is found.\ntime_series_in_memory::Bool=false: Store time series data in memory instead of HDF5.\nconfigpath::String: specify path to validation config file\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.System","text":"System(data::Any, basepower::Any; kwargs...) -> System\n\n\nConstruct a System from InfrastructureSystems.SystemData\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Any}","page":"PowerSystems","title":"PowerSystems.System","text":"System(basepower::Any; kwargs...) -> System\n\n\nConstruct an empty System. Useful for building a System while parsing raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Array{Bus,1},Array{#s158,1} where #s158<:Generator,Array{#s157,1} where #s157<:ElectricLoad,Float64}","page":"PowerSystems","title":"PowerSystems.System","text":"System(buses::Array{Bus,1}, generators::Array{#s158,1} where #s158<:Generator, loads::Array{#s157,1} where #s157<:ElectricLoad, basepower::Float64; kwargs...)\n\n\nSystem constructor without nothing-able arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Array{Bus,1},Array{#s73,1} where #s73<:Generator,Array{#s72,1} where #s72<:ElectricLoad,Union{Nothing, Array{#s20,1} where #s20<:Branch},Union{Nothing, Array{#s161,1} where #s161<:Storage},Float64,Union{Nothing, Array{#s162,1} where #s162<:Service},Union{Nothing, Dict}}","page":"PowerSystems","title":"PowerSystems.System","text":"System(buses::Array{Bus,1}, generators::Array{#s73,1} where #s73<:Generator, loads::Array{#s72,1} where #s72<:ElectricLoad, branches::Union{Nothing, Array{#s20,1} where #s20<:Branch}, storage::Union{Nothing, Array{#s161,1} where #s161<:Storage}, basepower::Float64, services::Union{Nothing, Array{#s162,1} where #s162<:Service}, annex::Union{Nothing, Dict}; kwargs...) -> System\n\n\nSystem constructor when components are constructed externally.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Nothing}","page":"PowerSystems","title":"PowerSystems.System","text":"System(::Nothing; buses, generators, loads, branches, storage, basepower, services, annex, kwargs...) -> System\n\n\nConstructs a non-functional System for demo purposes.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.System","text":"System(data::PowerSystems.PowerSystemTableData; forecast_resolution, time_series_in_memory, runchecks) -> System\n\n\nSystem(data::PowerSystemTableData)\n\nConstruct a System from PowerSystemTableData data.\n\nArguments\n\nforecast_resolution::Union{DateTime, Nothing}=nothing: only store forecasts that match this resolution.\ntime_series_in_memory::Bool=false: Store time series data in memory instead of HDF5 file\nrunchecks::Bool=true: Validate struct fields.\n\nThrows DataFormatError if forecasts with multiple resolutions are detected.\n\nA forecast has a different resolution than others.\nA forecast has a different horizon than others.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{String}","page":"PowerSystems","title":"PowerSystems.System","text":"System(filename::String) -> System\n\n\nConstructs a System from a JSON file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{}","page":"PowerSystems","title":"PowerSystems.System","text":"System(; basepower, buses, generators, loads, branches, storage, services, annex, kwargs...)\n\n\nSystem constructor with keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.TGFixed","page":"PowerSystems","title":"PowerSystems.TGFixed","text":"mutable struct TGFixed <: TurbineGov\n    efficiency::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a fixed Turbine Governor that returns a fixed mechanical torque  given by the product of P_ref*efficiency\n\nArguments\n\nefficiency::Float64:  Efficiency factor that multiplies P_ref, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TGTypeI","page":"PowerSystems","title":"PowerSystems.TGTypeI","text":"mutable struct TGTypeI <: TurbineGov\n    R::Float64\n    Ts::Float64\n    Tc::Float64\n    T3::Float64\n    T4::Float64\n    T5::Float64\n    P_min::Float64\n    P_max::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Turbine Governor Type I.\n\nArguments\n\nR::Float64: Droop parameter, validation range: (0, nothing)\nTs::Float64: Governor time constant, validation range: (0, nothing)\nTc::Float64: Servo time constant, validation range: (0, nothing)\nT3::Float64: Transient gain time constant, validation range: (0, nothing)\nT4::Float64: Power fraction time constant, validation range: (0, nothing)\nT5::Float64: Reheat time constant, validation range: (0, nothing)\nP_min::Float64: Min Power into the Governor, validation range: (0, nothing)\nP_max::Float64: Max Power into the Governor, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TGTypeII","page":"PowerSystems","title":"PowerSystems.TGTypeII","text":"mutable struct TGTypeII <: TurbineGov\n    R::Float64\n    T1::Float64\n    T2::Float64\n    τ_min::Float64\n    τ_max::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Turbine Governor Type II.\n\nArguments\n\nR::Float64: Droop parameter, validation range: (0, nothing)\nT1::Float64: Transient gain time constant, validation range: (0, nothing)\nT2::Float64: Power fraction time constant, validation range: (0, nothing)\nτ_min::Float64: Min Power into the Governor, validation range: (0, nothing)\nτ_max::Float64: Max Power into the Governor, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TapTransformer","page":"PowerSystems","title":"PowerSystems.TapTransformer","text":"mutable struct TapTransformer <: ACBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    reactivepower_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primaryshunt::Float64\n    tap::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\nreactivepower_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (-2, 2), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimaryshunt::Float64: System per-unit value, validation range: (0, 2), action if invalid: error\ntap::Float64, validation range: (0, 2), action if invalid: error\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TechHydro","page":"PowerSystems","title":"PowerSystems.TechHydro","text":"mutable struct TechHydro <: DeviceParameter\n    rating::Float64\n    primemover::PrimeMovers\n    activepowerlimits::Min_Max\n    reactivepowerlimits::Union{Nothing, Min_Max}\n    ramplimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    timelimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    internal::InfrastructureSystemsInternal\nend\n\nData Structures for the technical parameters of hydropower generation technologies.\n\nArguments\n\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprimemover::PrimeMovers: PrimeMover Technology according to EIA 923\nactivepowerlimits::Min_Max\nreactivepowerlimits::Union{Nothing, Min_Max}, action if invalid: warn\nramplimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: ramp up and ramp down limits, validation range: (0, nothing), action if invalid: error\ntimelimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: ramp up and ramp down time limits, validation range: (0, nothing), action if invalid: error\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TechRenewable","page":"PowerSystems","title":"PowerSystems.TechRenewable","text":"mutable struct TechRenewable <: DeviceParameter\n    rating::Float64\n    primemover::PrimeMovers\n    reactivepowerlimits::Union{Nothing, Min_Max}\n    powerfactor::Float64\n    internal::InfrastructureSystemsInternal\nend\n\nData Structures for the technical parameters of renewable generation technologies.\n\nArguments\n\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprimemover::PrimeMovers: PrimeMover Technology according to EIA 923\nreactivepowerlimits::Union{Nothing, Min_Max}\npowerfactor::Float64, validation range: (0, 1), action if invalid: error\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TechThermal","page":"PowerSystems","title":"PowerSystems.TechThermal","text":"mutable struct TechThermal <: DeviceParameter\n    rating::Float64\n    primemover::PrimeMovers\n    fuel::ThermalFuels\n    activepowerlimits::Min_Max\n    reactivepowerlimits::Union{Nothing, Min_Max}\n    ramplimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    timelimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for the technical parameters of thermal generation technologies.\n\nArguments\n\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprimemover::PrimeMovers: PrimeMover Technology according to EIA 923\nfuel::ThermalFuels: PrimeMover Fuel according to EIA 923\nactivepowerlimits::Min_Max\nreactivepowerlimits::Union{Nothing, Min_Max}\nramplimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, validation range: (0, nothing), action if invalid: error\ntimelimits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, validation range: (0, nothing), action if invalid: error\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThermalStandard","page":"PowerSystems","title":"PowerSystems.ThermalStandard","text":"mutable struct ThermalStandard <: ThermalGen\n    name::String\n    available::Bool\n    bus::Bus\n    activepower::Float64\n    reactivepower::Float64\n    tech::Union{Nothing, TechThermal}\n    op_cost::ThreePartCost\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for thermal generation technologies.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactivepower::Float64, validation range: tech.activepowerlimits, action if invalid: warn\nreactivepower::Float64, validation range: tech.reactivepowerlimits, action if invalid: warn\ntech::Union{Nothing, TechThermal}\nop_cost::ThreePartCost\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThreePartCost","page":"PowerSystems","title":"PowerSystems.ThreePartCost","text":"mutable struct ThreePartCost <: OperationalCost\n    variable::VariableCost\n    fixed::Float64\n    startup::Float64\n    shutdn::Float64\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure Operational Cost Data in Three parts fixed, variable cost and start - stop costs.\n\nArguments\n\nvariable::VariableCost: variable cost\nfixed::Float64: fixed cost\nstartup::Float64: startup cost, validation range: (0, nothing), action if invalid: warn\nshutdn::Float64: shutdown cost, validation range: (0, nothing), action if invalid: warn\n_forecasts::InfrastructureSystems.Forecasts: component forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThreePartCost-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}","page":"PowerSystems","title":"PowerSystems.ThreePartCost","text":"ThreePartCost(variable_cost::T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}, args::T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}})\n\n\nAccepts rating as a Float64 and then creates a ThreePartCost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.Transfer","page":"PowerSystems","title":"PowerSystems.Transfer","text":"mutable struct Transfer <: Service\n    name::String\n    timeframe::Float64\n    requirement::Float64\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\ntimeframe::Float64: the relative saturation timeframe, validation range: (0, nothing), action if invalid: error\nrequirement::Float64\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Transformer2W","page":"PowerSystems","title":"PowerSystems.Transformer2W","text":"mutable struct Transformer2W <: ACBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    reactivepower_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primaryshunt::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nThe 2-W transformer model uses an equivalent circuit assuming the impedance is on the High Voltage Side of the transformer. The model allocates the iron losses and magnetizing susceptance to the primary side.\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\nreactivepower_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimaryshunt::Float64: System per-unit value, validation range: (0, 2), action if invalid: error\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TwoPartCost","page":"PowerSystems","title":"PowerSystems.TwoPartCost","text":"mutable struct TwoPartCost <: OperationalCost\n    variable::VariableCost\n    fixed::Float64\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure Operational Cost Data in two parts: fixed and variable cost.\n\nArguments\n\nvariable::VariableCost: variable cost\nfixed::Float64: fixed cost, validation range: (0, nothing), action if invalid: warn\n_forecasts::InfrastructureSystems.Forecasts: component forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TwoPartCost-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}","page":"PowerSystems","title":"PowerSystems.TwoPartCost","text":"Accepts rating as a Float64 and then creates a TwoPartCost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.VSCDCLine","page":"PowerSystems","title":"PowerSystems.VSCDCLine","text":"mutable struct VSCDCLine <: DCBranch\n    name::String\n    available::Bool\n    activepower_flow::Float64\n    arc::Arc\n    rectifier_taplimits::Min_Max\n    rectifier_xrc::Float64\n    rectifier_firing_angle::Min_Max\n    inverter_taplimits::Min_Max\n    inverter_xrc::Float64\n    inverter_firing_angle::Min_Max\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nAs implemented in Milano's Book, Page 397.\n\nArguments\n\nname::String\navailable::Bool\nactivepower_flow::Float64\narc::Arc\nrectifier_taplimits::Min_Max\nrectifier_xrc::Float64\nrectifier_firing_angle::Min_Max\ninverter_taplimits::Min_Max\ninverter_xrc::Float64\ninverter_firing_angle::Min_Max\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.VariableReserve","page":"PowerSystems","title":"PowerSystems.VariableReserve","text":"mutable struct VariableReserve{T <: ReserveDirection} <: Reserve{T}\n    name::String\n    timeframe::Float64\n    requirement::Float64\n    ext::Dict{String, Any}\n    _forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for the procurement products for system simulations.\n\nArguments\n\nname::String\ntimeframe::Float64: the relative saturation timeframe, validation range: (0, nothing), action if invalid: error\nrequirement::Float64: the required quantity of the product should be scaled by a Forecast\next::Dict{String, Any}\n_forecasts::InfrastructureSystems.Forecasts: component forecasts\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.VirtualInertia","page":"PowerSystems","title":"PowerSystems.VirtualInertia","text":"mutable struct VirtualInertia <: ActivePowerControl\n    Ta::Float64\n    kd::Float64\n    kω::Float64\n    ωb::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Virtual Inertia with SRF using VSM for active power controller\n\nArguments\n\nTa::Float64: VSM inertia constant, validation range: (0, nothing)\nkd::Float64: VSM damping constant, validation range: (0, nothing)\nkω::Float64: frequency droop gain, validation range: (0, nothing)\nωb::Float64: rated angular frequency, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.VirtualInertiaQdroop","page":"PowerSystems","title":"PowerSystems.VirtualInertiaQdroop","text":"Parameters of a Outer-Loop controller using a virtual inertia with VSM for active power controller and a reactive power droop controller.\n\nConmutable structor\n\nVirtualInertiaQDroop(A, R)\n\nArguments\n\nA::Float64 : Active power controller using virtual inertia with VSM\nR::Float64 : Reactive power controller using reactive power droop\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.add_component!-Union{Tuple{T}, Tuple{System,T}} where T<:Component","page":"PowerSystems","title":"PowerSystems.add_component!","text":"Add a component to the system.\n\nThrows ArgumentError if the component's name is already stored for its concrete type. Throws ArgumentError if any Component-specific rule is violated. Throws InvalidRange if any of the component's field values are outside of defined valid range.\n\nExamples\n\nsys = System(100.0)\n\n# Add a single component.\nadd_component!(sys, bus)\n\n# Add many at once.\nbuses = [bus1, bus2, bus3]\ngenerators = [gen1, gen2, gen3]\nforeach(x -> add_component!(sys, x), Iterators.flatten((buses, generators)))\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, df::DataFrames.DataFrame, component::Any, label::Any) -> Any\nadd_forecast!(sys::System, df::DataFrames.DataFrame, component::Any, label::Any, scaling_factor::Union{Float64, String}) -> Any\n\n\nAdd a forecast to a system from a DataFrames.DataFrame.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, filename::AbstractString, component::Component, label::AbstractString) -> Any\nadd_forecast!(sys::System, filename::AbstractString, component::Component, label::AbstractString, scaling_factor::Union{Float64, String}) -> Any\n\n\nAdd a forecast to a system from a CSV file.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, ta::TimeSeries.TimeArray, component::Any, label::Any) -> Any\nadd_forecast!(sys::System, ta::TimeSeries.TimeArray, component::Any, label::Any, scaling_factor::Union{Float64, String}) -> Any\n\n\nAdd a forecast to a system from a TimeSeries.TimeArray.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!-Tuple{System,Component,Forecast}","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, component::Component, forecast::Forecast) -> Any\n\n\nAdds forecast to the system.\n\nThrows ArgumentError if the component is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecasts!-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.add_forecasts!","text":"add_forecasts!(sys::System, metadata_file::AbstractString; resolution)\n\n\nAdds forecasts from a metadata file or metadata descriptors.\n\nArguments\n\nsys::System: system\nmetadata_file::AbstractString: metadata file for timeseries that includes an array of IS.TimeseriesFileMetadata instances or a vector.\nresolution::DateTime.Period=nothing: skip forecast that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecasts!-Tuple{System,Array{InfrastructureSystems.TimeseriesFileMetadata,1}}","page":"PowerSystems","title":"PowerSystems.add_forecasts!","text":"add_forecasts!(sys::System, timeseries_metadata::Array{InfrastructureSystems.TimeseriesFileMetadata,1}; resolution)\n\n\nAdds forecasts from a metadata file or metadata descriptors.\n\nArguments\n\nsys::System: system\ntimeseries_metadata::Vector{IS.TimeseriesFileMetadata}: metadata for timeseries\nresolution::DateTime.Period=nothing: skip forecast that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.add_service!","text":"add_service!(device::Device, service::Service)\n\n\nadd_service!(device::Device, service::Service)\n\nAdd a service to a device.\n\nThrows ArgumentError if the service is already attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_service!-Tuple{System,Service,Any}","page":"PowerSystems","title":"PowerSystems.add_service!","text":"add_service!(sys::System, service::Service, contributing_devices::Any; kwargs...)\n\n\nadd_service!(sys::System, service::Service, contributing_devices; kwargs...)\n\nSimilar to add_component! but for services.\n\nArguments\n\nsys::System: system\nservice::Service: service to add\ncontributing_devices: Must be an iterable of type Device\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.are_forecasts_contiguous-Tuple{Component}","page":"PowerSystems","title":"PowerSystems.are_forecasts_contiguous","text":"are_forecasts_contiguous(component::Component) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.are_forecasts_contiguous-Tuple{System}","page":"PowerSystems","title":"PowerSystems.are_forecasts_contiguous","text":"are_forecasts_contiguous(sys::System) -> Bool\n\n\nReturn true if forecasts are stored contiguously.\n\nThrows ArgumentError if there are no forecasts stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_forecast_consistency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.check_forecast_consistency","text":"check_forecast_consistency(sys::System)\n\n\nThrows DataFormatError if forecasts have inconsistent parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_components!-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_components!","text":"clear_components!(sys::System)\n\n\nRemove all components from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_ext-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_ext","text":"clear_ext(sys::System)\n\n\nClear any value stored in ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_forecasts!-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_forecasts!","text":"clear_forecasts!(sys::System)\n\n\nRemove all forecasts from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.generate_initial_times-Tuple{InfrastructureSystems.InfrastructureSystemsType,Dates.Period,Int64}","page":"PowerSystems","title":"PowerSystems.generate_initial_times","text":"generate_initial_times(component::InfrastructureSystems.InfrastructureSystemsType, interval::Dates.Period, horizon::Int64; initial_time) -> Array{Dates.DateTime,1}\n\n\nGenerate initial times for a component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.generate_initial_times-Tuple{System,Dates.Period,Int64}","page":"PowerSystems","title":"PowerSystems.generate_initial_times","text":"generate_initial_times(sys::System, interval::Dates.Period, horizon::Int64; initial_time) -> Array{Dates.DateTime,1}\n\n\nGenerates all possible initial times for the stored forecasts. This should return the same result regardless of whether the forecasts have been stored as one contiguous array or chunks of contiguous arrays, such as one 365-day forecast vs 365 one-day forecasts.\n\nThrows ArgumentError if there are no forecasts stored, interval is not a multiple of the system's forecast resolution, or if the stored forecasts have overlapping timestamps.\n\nArguments\n\nsys::System: System.\ninterval::Dates.Period: Amount of time in between each initial time.\nhorizon::Int: Length of each forecast array.\ninitial_time::Union{Nothing, Dates.DateTime}=nothing: Start with this time. If nothing, use the first initial time.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ae-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Ae","text":"get_Ae(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ae-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ae","text":"get_Ae(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Be-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Be","text":"get_Be(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Be-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Be","text":"get_Be(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D","text":"get_D(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_D","text":"get_D(value::SingleMass) -> Float64\n\n\nGet SingleMass D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_12-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_12","text":"get_D_12(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_12.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_23-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_23","text":"get_D_23(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_23.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_34-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_34","text":"get_D_34(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_34.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_45-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_45","text":"get_D_45(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_45.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_ex","text":"get_D_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_hp","text":"get_D_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_ip","text":"get_D_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_lp","text":"get_D_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Emf-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_Emf","text":"get_Emf(value::AVRFixed) -> Float64\n\n\nGet AVRFixed Emf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H","text":"get_H(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_H","text":"get_H(value::SingleMass) -> Float64\n\n\nGet SingleMass H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_ex","text":"get_H_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_hp","text":"get_H_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_ip","text":"get_H_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_lp","text":"get_H_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K0-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_K0","text":"get_K0(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII K0.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_ex","text":"get_K_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_hp","text":"get_K_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_ip","text":"get_K_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_lp","text":"get_K_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_p-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_K_p","text":"get_K_p(value::PowerSystems.PSSSimple) -> Float64\n\n\nGet PSSSimple K_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ω-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_K_ω","text":"get_K_ω(value::PowerSystems.PSSSimple) -> Float64\n\n\nGet PSSSimple K_ω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ka-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ka","text":"get_Ka(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ke-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ke","text":"get_Ke(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kf-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Kf","text":"get_Kf(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kv-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_Kv","text":"get_Kv(value::AVRSimple) -> Float64\n\n\nGet AVRSimple Kv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1d","text":"get_L_1d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1d","text":"get_L_1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1q","text":"get_L_1q(value::FullMachine) -> Float64\n\n\nGet FullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1q","text":"get_L_1q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ad-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ad","text":"get_L_ad(value::FullMachine) -> Float64\n\n\nGet FullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ad-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ad","text":"get_L_ad(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_aq-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_aq","text":"get_L_aq(value::FullMachine) -> Float64\n\n\nGet FullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_aq-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_aq","text":"get_L_aq(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_d","text":"get_L_d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_d","text":"get_L_d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_f1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_f1d","text":"get_L_f1d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_f1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_f1d","text":"get_L_f1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ff-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ff","text":"get_L_ff(value::FullMachine) -> Float64\n\n\nGet FullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ff-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ff","text":"get_L_ff(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_q","text":"get_L_q(value::FullMachine) -> Float64\n\n\nGet FullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_q","text":"get_L_q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::BaseMachine) -> Float64\n\n\nGet BaseMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::FullMachine) -> Float64\n\n\nGet FullMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_MVABase-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_MVABase","text":"get_MVABase(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine MVABase.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_max-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_P_max","text":"get_P_max(value::TGTypeI) -> Float64\n\n\nGet TGTypeI P_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_min-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_P_min","text":"get_P_min(value::TGTypeI) -> Float64\n\n\nGet TGTypeI P_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::BaseMachine) -> Float64\n\n\nGet BaseMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::FullMachine) -> Float64\n\n\nGet FullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::TGTypeII) -> Float64\n\n\nGet TGTypeII R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::TGTypeI) -> Float64\n\n\nGet TGTypeI R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1d","text":"get_R_1d(value::FullMachine) -> Float64\n\n\nGet FullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1d","text":"get_R_1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1q","text":"get_R_1q(value::FullMachine) -> Float64\n\n\nGet FullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1q","text":"get_R_1q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_f-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_f","text":"get_R_f(value::FullMachine) -> Float64\n\n\nGet FullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_f-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_f","text":"get_R_f(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T1-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T1","text":"get_T1(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T1-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_T1","text":"get_T1(value::TGTypeII) -> Float64\n\n\nGet TGTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T2-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T2","text":"get_T2(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T2-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_T2","text":"get_T2(value::TGTypeII) -> Float64\n\n\nGet TGTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T3-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T3","text":"get_T3(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T3-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T3","text":"get_T3(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T4-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T4","text":"get_T4(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T4-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T4","text":"get_T4(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T5-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T5","text":"get_T5(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T5.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T_AA-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_T_AA","text":"get_T_AA(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T_AA-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_T_AA","text":"get_T_AA(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tc","text":"get_Tc(value::TGTypeI) -> Float64\n\n\nGet TGTypeI Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tf-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tf","text":"get_Tf(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ts-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ts","text":"get_Ts(value::TGTypeI) -> Float64\n\n\nGet TGTypeI Ts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_I-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_V_I","text":"get_V_I(value::Source) -> Float64\n\n\nGet Source V_I.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_R-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_V_R","text":"get_V_R(value::Source) -> Float64\n\n\nGet Source V_R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_pss-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_V_pss","text":"get_V_pss(value::PSSFixed) -> Float64\n\n\nGet PSSFixed V_pss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_max-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Vr_max","text":"get_Vr_max(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_max-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Vr_max","text":"get_Vr_max(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_min-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Vr_min","text":"get_Vr_min(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_min-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Vr_min","text":"get_Vr_min(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_X_th-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_X_th","text":"get_X_th(value::Source) -> Float64\n\n\nGet Source X_th.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::BaseMachine) -> Float64\n\n\nGet BaseMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Y-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_Y","text":"get_Y(value::FixedAdmittance) -> Complex{Float64}\n\n\nGet FixedAdmittance Y.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::FixedAdmittance) -> InfrastructureSystems.Forecasts\n\n\nGet FixedAdmittance _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::GenericBattery) -> InfrastructureSystems.Forecasts\n\n\nGet GenericBattery _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::HVDCLine) -> InfrastructureSystems.Forecasts\n\n\nGet HVDCLine _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::HydroDispatch) -> InfrastructureSystems.Forecasts\n\n\nGet HydroDispatch _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::HydroFix) -> InfrastructureSystems.Forecasts\n\n\nGet HydroFix _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::InterruptibleLoad) -> InfrastructureSystems.Forecasts\n\n\nGet InterruptibleLoad _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::Line) -> InfrastructureSystems.Forecasts\n\n\nGet Line _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::LoadZones) -> InfrastructureSystems.Forecasts\n\n\nGet LoadZones _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::MonitoredLine) -> InfrastructureSystems.Forecasts\n\n\nGet MonitoredLine _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::PhaseShiftingTransformer) -> InfrastructureSystems.Forecasts\n\n\nGet PhaseShiftingTransformer _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::PowerLoad) -> InfrastructureSystems.Forecasts\n\n\nGet PowerLoad _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::RenewableDispatch) -> InfrastructureSystems.Forecasts\n\n\nGet RenewableDispatch _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::RenewableFix) -> InfrastructureSystems.Forecasts\n\n\nGet RenewableFix _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::TapTransformer) -> InfrastructureSystems.Forecasts\n\n\nGet TapTransformer _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::ThermalStandard) -> InfrastructureSystems.Forecasts\n\n\nGet ThermalStandard _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::ThreePartCost) -> InfrastructureSystems.Forecasts\n\n\nGet ThreePartCost _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::Transfer) -> InfrastructureSystems.Forecasts\n\n\nGet Transfer _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::Transformer2W) -> InfrastructureSystems.Forecasts\n\n\nGet Transformer2W _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::TwoPartCost) -> InfrastructureSystems.Forecasts\n\n\nGet TwoPartCost _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::VSCDCLine) -> InfrastructureSystems.Forecasts\n\n\nGet VSCDCLine _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get__forecasts-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get__forecasts","text":"get__forecasts(value::VariableReserve) -> InfrastructureSystems.Forecasts\n\n\nGet VariableReserve _forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::GenericBattery) -> Float64\n\n\nGet GenericBattery activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::HydroFix) -> Float64\n\n\nGet HydroFix activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::InterruptibleLoad) -> Float64\n\n\nGet InterruptibleLoad activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::PowerLoad) -> Float64\n\n\nGet PowerLoad activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::RenewableDispatch) -> Float64\n\n\nGet RenewableDispatch activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::RenewableFix) -> Float64\n\n\nGet RenewableFix activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_activepower","text":"get_activepower(value::ThermalStandard) -> Float64\n\n\nGet ThermalStandard activepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::HVDCLine) -> Float64\n\n\nGet HVDCLine activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::Line) -> Float64\n\n\nGet Line activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::TapTransformer) -> Float64\n\n\nGet TapTransformer activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::Transformer2W) -> Float64\n\n\nGet Transformer2W activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepower_flow-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_activepower_flow","text":"get_activepower_flow(value::VSCDCLine) -> Float64\n\n\nGet VSCDCLine activepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepowerlimits-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_activepowerlimits","text":"get_activepowerlimits(value::TechHydro) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet TechHydro activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepowerlimits-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_activepowerlimits","text":"get_activepowerlimits(value::TechThermal) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet TechThermal activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepowerlimits_from-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_activepowerlimits_from","text":"get_activepowerlimits_from(value::HVDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet HVDCLine activepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_activepowerlimits_to-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_activepowerlimits_to","text":"get_activepowerlimits_to(value::HVDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet HVDCLine activepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_angle-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_angle","text":"get_angle(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus angle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_anglelimits-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_anglelimits","text":"get_anglelimits(value::Line) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet Line anglelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_anglelimits-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_anglelimits","text":"get_anglelimits(value::MonitoredLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine anglelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::HVDCLine) -> Arc\n\n\nGet HVDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::Line) -> Arc\n\n\nGet Line arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::MonitoredLine) -> Arc\n\n\nGet MonitoredLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::PhaseShiftingTransformer) -> Arc\n\n\nGet PhaseShiftingTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::TapTransformer) -> Arc\n\n\nGet TapTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::Transformer2W) -> Arc\n\n\nGet Transformer2W arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::VSCDCLine) -> Arc\n\n\nGet VSCDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::FixedAdmittance) -> Bool\n\n\nGet FixedAdmittance available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::GenericBattery) -> Bool\n\n\nGet GenericBattery available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HVDCLine) -> Bool\n\n\nGet HVDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HydroDispatch) -> Bool\n\n\nGet HydroDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HydroFix) -> Bool\n\n\nGet HydroFix available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::InterruptibleLoad) -> Bool\n\n\nGet InterruptibleLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Line) -> Bool\n\n\nGet Line available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::MonitoredLine) -> Bool\n\n\nGet MonitoredLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::PhaseShiftingTransformer) -> Bool\n\n\nGet PhaseShiftingTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::PowerLoad) -> Bool\n\n\nGet PowerLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::RenewableDispatch) -> Bool\n\n\nGet RenewableDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::RenewableFix) -> Bool\n\n\nGet RenewableFix available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Source) -> Bool\n\n\nGet Source available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::TapTransformer) -> Bool\n\n\nGet TapTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::ThermalStandard) -> Bool\n\n\nGet ThermalStandard available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Transformer2W) -> Bool\n\n\nGet Transformer2W available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::VSCDCLine) -> Bool\n\n\nGet VSCDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_b-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_b","text":"get_b(value::Line) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nGet Line b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_b-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_b","text":"get_b(value::MonitoredLine) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_basepower-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_basepower","text":"get_basepower(sys::System) -> Float64\n\n\nReturn the system's base power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_basevoltage-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_basevoltage","text":"get_basevoltage(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus basevoltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::FixedAdmittance) -> Bus\n\n\nGet FixedAdmittance bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::GenericBattery) -> Bus\n\n\nGet GenericBattery bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::HydroDispatch) -> Bus\n\n\nGet HydroDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::HydroFix) -> Bus\n\n\nGet HydroFix bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::InterruptibleLoad) -> Bus\n\n\nGet InterruptibleLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::PowerLoad) -> Bus\n\n\nGet PowerLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::RenewableDispatch) -> Bus\n\n\nGet RenewableDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::RenewableFix) -> Bus\n\n\nGet RenewableFix bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::Source) -> Bus\n\n\nGet Source bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{System,Int64}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(sys::System, bus_number::Int64) -> Any\n\n\nReturn bus with bus_number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{System,String}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(sys::System, name::String) -> Union{Nothing, Bus}\n\n\nReturn bus with name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::ThermalStandard) -> Bus\n\n\nGet ThermalStandard bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus_numbers-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_bus_numbers","text":"get_bus_numbers(sys::System) -> Array{Int64,1}\n\n\nReturn a sorted vector of bus numbers in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_buses-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_buses","text":"get_buses(value::LoadZones) -> Array{Bus,1}\n\n\nGet LoadZones buses.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_buses-Tuple{System,Set{Int64}}","page":"PowerSystems","title":"PowerSystems.get_buses","text":"get_buses(sys::System, bus_numbers::Set{Int64}) -> Array{Bus,1}\n\n\nReturn all buses values with bus_numbers.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bustype-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_bustype","text":"get_bustype(value::Bus) -> Union{Nothing, BusType}\n\n\nGet Bus bustype.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_capacity-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_capacity","text":"get_capacity(value::GenericBattery) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet GenericBattery capacity.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_cf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_cf","text":"get_cf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_cf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_cf","text":"get_cf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_component-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_component","text":"Get the component of concrete type T with name. Returns nothing if no component matches.\n\nSee get_components_by_name if the concrete type is unknown.\n\nThrows ArgumentError if T is not a concrete type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_components-Union{Tuple{T}, Tuple{Type{T},System}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_components","text":"get_components(?::T<:Component, sys::T<:Component)\n\n\nReturns an iterator of components. T can be concrete or abstract. Call collect on the result if an array is desired.\n\nExamples\n\niter = PowerSystems.get_components(ThermalStandard, sys)\niter = PowerSystems.get_components(Generator, sys)\ngenerators = collect(PowerSystems.get_components(Generator, sys))\n\nSee also: iterate_components\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_components_by_name-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_components_by_name","text":"get_components_by_name(\n                       ::Type{T},\n                       sys::System,\n                       name::AbstractString\n                      ) where {T <: Component}\n\nGet the components of abstract type T with name. Note that PowerSystems enforces unique names on each concrete type but not across concrete types.\n\nSee get_component if the concrete type is known.\n\nThrows ArgumentError if T is not an abstract type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_contributing_device_mapping-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_contributing_device_mapping","text":"get_contributing_device_mapping(sys::System) -> Dict{NamedTuple{(:type, :name),Tuple{DataType,String}},ServiceContributingDevices}\n\n\nget_contributing_device_mapping(sys::System)\n\nReturn an instance of ServiceContributingDevicesMapping.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_contributing_devices-Union{Tuple{T}, Tuple{System,T}} where T<:Service","page":"PowerSystems","title":"PowerSystems.get_contributing_devices","text":"get_contributing_devices(sys::T<:Service, service::T<:Service)\n\n\nget_contributing_devices(sys::System, service::Service)\n\nReturn a vector of devices contributing to the service.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_efficiency-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_efficiency","text":"get_efficiency(value::GenericBattery) -> NamedTuple{(:in, :out),Tuple{Float64,Float64}}\n\n\nGet GenericBattery efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_efficiency-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_efficiency","text":"get_efficiency(value::TGFixed) -> Float64\n\n\nGet TGFixed efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_energy-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_energy","text":"get_energy(value::GenericBattery) -> Float64\n\n\nGet GenericBattery energy.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_eq_p-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_eq_p","text":"get_eq_p(value::BaseMachine) -> Float64\n\n\nGet BaseMachine eq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRFixed) -> Dict{String,Any}\n\n\nGet AVRFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRSimple) -> Dict{String,Any}\n\n\nGet AVRSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRTypeII) -> Dict{String,Any}\n\n\nGet AVRTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRTypeI) -> Dict{String,Any}\n\n\nGet AVRTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AndersonFouadMachine) -> Dict{String,Any}\n\n\nGet AndersonFouadMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AvgCnvFixedDC) -> Dict{String,Any}\n\n\nGet AvgCnvFixedDC ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::BaseMachine) -> Dict{String,Any}\n\n\nGet BaseMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Bus) -> Dict{String,Any}\n\n\nGet Bus ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::CombinedVIwithVZ) -> Dict{String,Any}\n\n\nGet CombinedVIwithVZ ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FiveMassShaft) -> Dict{String,Any}\n\n\nGet FiveMassShaft ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FixedAdmittance) -> Dict{String,Any}\n\n\nGet FixedAdmittance ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FixedDCSource) -> Dict{String,Any}\n\n\nGet FixedDCSource ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FullMachine) -> Dict{String,Any}\n\n\nGet FullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::GenericBattery) -> Dict{String,Any}\n\n\nGet GenericBattery ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HVDCLine) -> Dict{String,Any}\n\n\nGet HVDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HydroDispatch) -> Dict{String,Any}\n\n\nGet HydroDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HydroFix) -> Dict{String,Any}\n\n\nGet HydroFix ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::InterruptibleLoad) -> Dict{String,Any}\n\n\nGet InterruptibleLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::LCLFilter) -> Dict{String,Any}\n\n\nGet LCLFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Line) -> Dict{String,Any}\n\n\nGet Line ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::MarconatoMachine) -> Dict{String,Any}\n\n\nGet MarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::MonitoredLine) -> Dict{String,Any}\n\n\nGet MonitoredLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::OneDOneQMachine) -> Dict{String,Any}\n\n\nGet OneDOneQMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PLL) -> Dict{String,Any}\n\n\nGet PLL ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PSSFixed) -> Dict{String,Any}\n\n\nGet PSSFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PhaseShiftingTransformer) -> Dict{String,Any}\n\n\nGet PhaseShiftingTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PowerLoad) -> Dict{String,Any}\n\n\nGet PowerLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PowerSystems.LCFilter) -> Dict{String,Any}\n\n\nGet LCFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PowerSystems.PSSSimple) -> Dict{String,Any}\n\n\nGet PSSSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ReactivePowerDroop) -> Dict{String,Any}\n\n\nGet ReactivePowerDroop ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::RenewableDispatch) -> Dict{String,Any}\n\n\nGet RenewableDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::RenewableFix) -> Dict{String,Any}\n\n\nGet RenewableFix ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleAFMachine) -> Dict{String,Any}\n\n\nGet SimpleAFMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleFullMachine) -> Dict{String,Any}\n\n\nGet SimpleFullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleMarconatoMachine) -> Dict{String,Any}\n\n\nGet SimpleMarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SingleMass) -> Dict{String,Any}\n\n\nGet SingleMass ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Source) -> Dict{String,Any}\n\n\nGet Source ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::StaticReserve) -> Dict{String,Any}\n\n\nGet StaticReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(sys::System) -> Union{Nothing, Dict{String,Any}}\n\n\nReturn a user-modifiable dictionary to store extra information.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGFixed) -> Dict{String,Any}\n\n\nGet TGFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGTypeII) -> Dict{String,Any}\n\n\nGet TGTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGTypeI) -> Dict{String,Any}\n\n\nGet TGTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TapTransformer) -> Dict{String,Any}\n\n\nGet TapTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ThermalStandard) -> Dict{String,Any}\n\n\nGet ThermalStandard ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Transfer) -> Dict{String,Any}\n\n\nGet Transfer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Transformer2W) -> Dict{String,Any}\n\n\nGet Transformer2W ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VSCDCLine) -> Dict{String,Any}\n\n\nGet VSCDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VariableReserve) -> Dict{String,Any}\n\n\nGet VariableReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VirtualInertia) -> Dict{String,Any}\n\n\nGet VirtualInertia ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fixed-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_fixed","text":"get_fixed(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fixed-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_fixed","text":"get_fixed(value::TwoPartCost) -> Float64\n\n\nGet TwoPartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_flowlimits-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_flowlimits","text":"get_flowlimits(value::MonitoredLine) -> NamedTuple{(:from_to, :to_from),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine flowlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast-Union{Tuple{T}, Tuple{Type{T},Component,Dates.DateTime,AbstractString}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.get_forecast","text":"get_forecast(?::T<:Forecast, component::T<:Forecast, initial_time::T<:Forecast, label::T<:Forecast)\n\n\nReturn a forecast for the entire time series range stored for these parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsType,Dates.DateTime,AbstractString,Int64}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.get_forecast","text":"get_forecast(?::T<:Forecast, component::T<:Forecast, initial_time::T<:Forecast, label::T<:Forecast, horizon::T<:Forecast)\n\n\nReturn a forecast for a subset of the time series range stored for these parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_initial_times-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecast_initial_times","text":"get_forecast_initial_times(sys::System) -> Array{Dates.DateTime,1}\n\n\nReturn sorted forecast initial times.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_keys-Tuple{Component}","page":"PowerSystems","title":"PowerSystems.get_forecast_keys","text":"get_forecast_keys(component::Component) -> Any\n\n\nReturn an iterable of NamedTuple keys for forecasts stored for this component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_values-Tuple{Component,Forecast}","page":"PowerSystems","title":"PowerSystems.get_forecast_values","text":"get_forecast_values(component::Component, forecast::Forecast) -> Any\n\n\nReturn a TimeSeries.TimeArray where the forecast data has been multiplied by the forecasted component field.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_horizon-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_horizon","text":"get_forecasts_horizon(sys::System) -> Int64\n\n\nReturn the horizon for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_initial_time-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_initial_time","text":"get_forecasts_initial_time(sys::System) -> Dates.DateTime\n\n\nReturn the earliest initial_time for a forecast.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_interval-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_interval","text":"get_forecasts_interval(sys::System) -> Union{Dates.Millisecond, Dates.Second}\n\n\nReturn the interval for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_resolution-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_resolution","text":"get_forecasts_resolution(sys::System) -> Dates.Period\n\n\nReturn the resolution for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_frequency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_frequency","text":"get_frequency(sys::System) -> Float64\n\n\nReturn the system's frequency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_from-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_from","text":"get_from(value::Arc) -> Bus\n\n\nGet Arc from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fuel-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_fuel","text":"get_fuel(value::TechThermal) -> PowerSystems.ThermalFuels\n\n\nGet TechThermal fuel.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inflow-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_inflow","text":"get_inflow(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch inflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_initial_storage-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_initial_storage","text":"get_initial_storage(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch initial_storage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inputactivepowerlimits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_inputactivepowerlimits","text":"get_inputactivepowerlimits(value::GenericBattery) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet GenericBattery inputactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRSimple) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRTypeII) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRTypeI) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AndersonFouadMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AndersonFouadMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Arc) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Arc internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AvgCnvFixedDC) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AvgCnvFixedDC internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::BaseMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet BaseMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Bus) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Bus internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::CombinedVIwithVZ) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet CombinedVIwithVZ internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FiveMassShaft) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FiveMassShaft internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FixedAdmittance) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FixedAdmittance internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FixedDCSource) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FixedDCSource internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FullMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::GenericBattery) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet GenericBattery internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HVDCLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HVDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HydroDispatch) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HydroDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HydroFix) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HydroFix internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::InterruptibleLoad) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet InterruptibleLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::LCLFilter) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet LCLFilter internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Line) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Line internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::LoadZones) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet LoadZones internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::MarconatoMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet MarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::MonitoredLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet MonitoredLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::OneDOneQMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet OneDOneQMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PLL) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PLL internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PSSFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PSSFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PhaseShiftingTransformer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PhaseShiftingTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PowerLoad) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PowerLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PowerSystems.LCFilter) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet LCFilter internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PowerSystems.PSSSimple) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PSSSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ReactivePowerDroop) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ReactivePowerDroop internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::RenewableDispatch) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet RenewableDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::RenewableFix) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet RenewableFix internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleAFMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleAFMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleFullMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleFullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleMarconatoMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleMarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SingleMass) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SingleMass internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Source) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Source internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::StaticReserve) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet StaticReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGTypeII) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGTypeI) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TapTransformer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TapTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TechHydro) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TechHydro internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TechRenewable}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TechRenewable) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TechRenewable internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TechThermal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TechThermal internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ThermalStandard) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ThermalStandard internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ThreePartCost) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ThreePartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Transfer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Transfer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Transformer2W) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Transformer2W internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TwoPartCost) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TwoPartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::VSCDCLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet VSCDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::VariableReserve) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet VariableReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::VirtualInertia) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet VirtualInertia internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_d_fluxlink-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_d_fluxlink","text":"get_inv_d_fluxlink(value::FullMachine) -> Array{Float64,2}\n\n\nGet FullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_d_fluxlink-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_d_fluxlink","text":"get_inv_d_fluxlink(value::SimpleFullMachine) -> Array{Float64,2}\n\n\nGet SimpleFullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_q_fluxlink-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_q_fluxlink","text":"get_inv_q_fluxlink(value::FullMachine) -> Array{Float64,2}\n\n\nGet FullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_q_fluxlink-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_q_fluxlink","text":"get_inv_q_fluxlink(value::SimpleFullMachine) -> Array{Float64,2}\n\n\nGet SimpleFullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_firing_angle-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_firing_angle","text":"get_inverter_firing_angle(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine inverterfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_taplimits-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_taplimits","text":"get_inverter_taplimits(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine inverter_taplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_xrc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_xrc","text":"get_inverter_xrc(value::VSCDCLine) -> Float64\n\n\nGet VSCDCLine inverter_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kad-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kad","text":"get_kad(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kd-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_kd","text":"get_kd(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kffi-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kffi","text":"get_kffi(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kffi.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kffv-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kffv","text":"get_kffv(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kffv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ki_pll-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_ki_pll","text":"get_ki_pll(value::PLL) -> Float64\n\n\nGet PLL ki_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kic-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kic","text":"get_kic(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kic.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kiv-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kiv","text":"get_kiv(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kiv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kp_pll-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_kp_pll","text":"get_kp_pll(value::PLL) -> Float64\n\n\nGet PLL kp_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kpc-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kpc","text":"get_kpc(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kpc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kpv-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_kpv","text":"get_kpv(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ kpv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kq-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_kq","text":"get_kq(value::ReactivePowerDroop) -> Float64\n\n\nGet ReactivePowerDroop kq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kω-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_kω","text":"get_kω(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia kω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_lf","text":"get_lf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_lf","text":"get_lf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lg-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_lg","text":"get_lg(value::LCLFilter) -> Float64\n\n\nGet LCLFilter lg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_loss-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_loss","text":"get_loss(value::HVDCLine) -> NamedTuple{(:l0, :l1),Tuple{Float64,Float64}}\n\n\nGet HVDCLine loss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lv-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_lv","text":"get_lv(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ lv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxactivepower-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_maxactivepower","text":"get_maxactivepower(value::InterruptibleLoad) -> Float64\n\n\nGet InterruptibleLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxactivepower-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_maxactivepower","text":"get_maxactivepower(value::LoadZones) -> Float64\n\n\nGet LoadZones maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxactivepower-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_maxactivepower","text":"get_maxactivepower(value::PowerLoad) -> Float64\n\n\nGet PowerLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxreactivepower-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_maxreactivepower","text":"get_maxreactivepower(value::InterruptibleLoad) -> Float64\n\n\nGet InterruptibleLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxreactivepower-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_maxreactivepower","text":"get_maxreactivepower(value::LoadZones) -> Float64\n\n\nGet LoadZones maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_maxreactivepower-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_maxreactivepower","text":"get_maxreactivepower(value::PowerLoad) -> Float64\n\n\nGet PowerLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_model-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_model","text":"get_model(value::InterruptibleLoad) -> PowerSystems.LoadModel\n\n\nGet InterruptibleLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_model-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_model","text":"get_model(value::PowerLoad) -> Union{Nothing, PowerSystems.LoadModel}\n\n\nGet PowerLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRFixed) -> Int64\n\n\nGet AVRFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRSimple) -> Int64\n\n\nGet AVRSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRTypeII) -> Int64\n\n\nGet AVRTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRTypeI) -> Int64\n\n\nGet AVRTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AndersonFouadMachine) -> Int64\n\n\nGet AndersonFouadMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AvgCnvFixedDC) -> Int64\n\n\nGet AvgCnvFixedDC n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::BaseMachine) -> Int64\n\n\nGet BaseMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::CombinedVIwithVZ) -> Int64\n\n\nGet CombinedVIwithVZ n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FiveMassShaft) -> Int64\n\n\nGet FiveMassShaft n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FixedDCSource) -> Int64\n\n\nGet FixedDCSource n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FullMachine) -> Int64\n\n\nGet FullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::LCLFilter) -> Int64\n\n\nGet LCLFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::MarconatoMachine) -> Int64\n\n\nGet MarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::OneDOneQMachine) -> Int64\n\n\nGet OneDOneQMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PLL) -> Int64\n\n\nGet PLL n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PSSFixed) -> Int64\n\n\nGet PSSFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PowerSystems.LCFilter) -> Int64\n\n\nGet LCFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PowerSystems.PSSSimple) -> Int64\n\n\nGet PSSSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::ReactivePowerDroop) -> Int64\n\n\nGet ReactivePowerDroop n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleAFMachine) -> Int64\n\n\nGet SimpleAFMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleFullMachine) -> Int64\n\n\nGet SimpleFullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleMarconatoMachine) -> Int64\n\n\nGet SimpleMarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SingleMass) -> Int64\n\n\nGet SingleMass n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGFixed) -> Int64\n\n\nGet TGFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGTypeII) -> Int64\n\n\nGet TGTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGTypeI) -> Int64\n\n\nGet TGTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::VirtualInertia) -> Int64\n\n\nGet VirtualInertia n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::Bus) -> String\n\n\nGet Bus name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::FixedAdmittance) -> String\n\n\nGet FixedAdmittance name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::GenericBattery) -> String\n\n\nGet GenericBattery name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::HVDCLine) -> String\n\n\nGet HVDCLine name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::HydroDispatch) -> String\n\n\nGet HydroDispatch name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::HydroFix) -> String\n\n\nGet HydroFix name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::InterruptibleLoad) -> String\n\n\nGet InterruptibleLoad name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::Line) -> String\n\n\nGet Line name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::LoadZones) -> String\n\n\nGet LoadZones name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::MonitoredLine) -> String\n\n\nGet MonitoredLine name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::PhaseShiftingTransformer) -> String\n\n\nGet PhaseShiftingTransformer name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::PowerLoad) -> String\n\n\nGet PowerLoad name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::RenewableDispatch) -> String\n\n\nGet RenewableDispatch name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::RenewableFix) -> String\n\n\nGet RenewableFix name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::Source) -> String\n\n\nGet Source name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::StaticReserve) -> String\n\n\nGet StaticReserve name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::TapTransformer) -> String\n\n\nGet TapTransformer name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::ThermalStandard) -> String\n\n\nGet ThermalStandard name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::Transfer) -> String\n\n\nGet Transfer name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::Transformer2W) -> String\n\n\nGet Transformer2W name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::VSCDCLine) -> String\n\n\nGet VSCDCLine name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_name-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_name","text":"get_name(value::VariableReserve) -> String\n\n\nGet VariableReserve name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_number-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_number","text":"get_number(value::Bus) -> Int64\n\n\nGet Bus number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_number-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_number","text":"get_number(value::LoadZones) -> Int64\n\n\nGet LoadZones number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_op_cost-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_op_cost","text":"get_op_cost(value::HydroDispatch) -> TwoPartCost\n\n\nGet HydroDispatch op_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_op_cost-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_op_cost","text":"get_op_cost(value::InterruptibleLoad) -> TwoPartCost\n\n\nGet InterruptibleLoad op_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_op_cost-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_op_cost","text":"get_op_cost(value::RenewableDispatch) -> TwoPartCost\n\n\nGet RenewableDispatch op_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_op_cost-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_op_cost","text":"get_op_cost(value::ThermalStandard) -> ThreePartCost\n\n\nGet ThermalStandard op_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_outputactivepowerlimits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_outputactivepowerlimits","text":"get_outputactivepowerlimits(value::GenericBattery) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet GenericBattery outputactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_powerfactor-Tuple{TechRenewable}","page":"PowerSystems","title":"PowerSystems.get_powerfactor","text":"get_powerfactor(value::TechRenewable) -> Float64\n\n\nGet TechRenewable powerfactor.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primaryshunt-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_primaryshunt","text":"get_primaryshunt(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer primaryshunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primaryshunt-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_primaryshunt","text":"get_primaryshunt(value::TapTransformer) -> Float64\n\n\nGet TapTransformer primaryshunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primaryshunt-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_primaryshunt","text":"get_primaryshunt(value::Transformer2W) -> Float64\n\n\nGet Transformer2W primaryshunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primemover-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_primemover","text":"get_primemover(value::GenericBattery) -> PowerSystems.PrimeMovers\n\n\nGet GenericBattery primemover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primemover-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_primemover","text":"get_primemover(value::TechHydro) -> PowerSystems.PrimeMovers\n\n\nGet TechHydro primemover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primemover-Tuple{TechRenewable}","page":"PowerSystems","title":"PowerSystems.get_primemover","text":"get_primemover(value::TechRenewable) -> PowerSystems.PrimeMovers\n\n\nGet TechRenewable primemover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primemover-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_primemover","text":"get_primemover(value::TechThermal) -> PowerSystems.PrimeMovers\n\n\nGet TechThermal primemover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::Line) -> Float64\n\n\nGet Line r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::TapTransformer) -> Float64\n\n\nGet TapTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::Transformer2W) -> Float64\n\n\nGet Transformer2W r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramplimits-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_ramplimits","text":"get_ramplimits(value::TechHydro) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet TechHydro ramplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramplimits-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_ramplimits","text":"get_ramplimits(value::TechThermal) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet TechThermal ramplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::Line) -> Float64\n\n\nGet Line rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::PhaseShiftingTransformer) -> Union{Nothing, Float64}\n\n\nGet PhaseShiftingTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::TapTransformer) -> Union{Nothing, Float64}\n\n\nGet TapTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::Transformer2W) -> Union{Nothing, Float64}\n\n\nGet Transformer2W rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::GenericBattery) -> Float64\n\n\nGet GenericBattery rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::TechHydro) -> Float64\n\n\nGet TechHydro rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{TechRenewable}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::TechRenewable) -> Float64\n\n\nGet TechRenewable rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::TechThermal) -> Float64\n\n\nGet TechThermal rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::GenericBattery) -> Float64\n\n\nGet GenericBattery reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::HydroFix) -> Float64\n\n\nGet HydroFix reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::InterruptibleLoad) -> Float64\n\n\nGet InterruptibleLoad reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::PowerLoad) -> Float64\n\n\nGet PowerLoad reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::RenewableDispatch) -> Float64\n\n\nGet RenewableDispatch reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::RenewableFix) -> Float64\n\n\nGet RenewableFix reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_reactivepower","text":"get_reactivepower(value::ThermalStandard) -> Float64\n\n\nGet ThermalStandard reactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower_flow-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_reactivepower_flow","text":"get_reactivepower_flow(value::Line) -> Float64\n\n\nGet Line reactivepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower_flow-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_reactivepower_flow","text":"get_reactivepower_flow(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine reactivepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower_flow-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_reactivepower_flow","text":"get_reactivepower_flow(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer reactivepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower_flow-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_reactivepower_flow","text":"get_reactivepower_flow(value::TapTransformer) -> Float64\n\n\nGet TapTransformer reactivepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepower_flow-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_reactivepower_flow","text":"get_reactivepower_flow(value::Transformer2W) -> Float64\n\n\nGet Transformer2W reactivepower_flow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits","text":"get_reactivepowerlimits(value::GenericBattery) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet GenericBattery reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits","text":"get_reactivepowerlimits(value::TechHydro) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet TechHydro reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits-Tuple{TechRenewable}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits","text":"get_reactivepowerlimits(value::TechRenewable) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet TechRenewable reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits","text":"get_reactivepowerlimits(value::TechThermal) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet TechThermal reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits_from-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits_from","text":"get_reactivepowerlimits_from(value::HVDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet HVDCLine reactivepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactivepowerlimits_to-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_reactivepowerlimits_to","text":"get_reactivepowerlimits_to(value::HVDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet HVDCLine reactivepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_firing_angle-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_firing_angle","text":"get_rectifier_firing_angle(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine rectifierfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_taplimits-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_taplimits","text":"get_rectifier_taplimits(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine rectifier_taplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_xrc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_xrc","text":"get_rectifier_xrc(value::VSCDCLine) -> Float64\n\n\nGet VSCDCLine rectifier_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::StaticReserve) -> Float64\n\n\nGet StaticReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::Transfer) -> Float64\n\n\nGet Transfer requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::VariableReserve) -> Float64\n\n\nGet VariableReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_rf","text":"get_rf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_rf","text":"get_rf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rg-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_rg","text":"get_rg(value::LCLFilter) -> Float64\n\n\nGet LCLFilter rg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rv-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_rv","text":"get_rv(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ rv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_s_rated-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_s_rated","text":"get_s_rated(value::AvgCnvFixedDC) -> Float64\n\n\nGet AvgCnvFixedDC s_rated.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::FixedAdmittance) -> Array{Service,1}\n\n\nGet FixedAdmittance services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::GenericBattery) -> Array{Service,1}\n\n\nGet GenericBattery services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HVDCLine) -> Array{Service,1}\n\n\nGet HVDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HydroDispatch) -> Array{Service,1}\n\n\nGet HydroDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HydroFix) -> Array{Service,1}\n\n\nGet HydroFix services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::InterruptibleLoad) -> Array{Service,1}\n\n\nGet InterruptibleLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Line) -> Array{Service,1}\n\n\nGet Line services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{LoadZones}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::LoadZones) -> Array{Service,1}\n\n\nGet LoadZones services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::MonitoredLine) -> Array{Service,1}\n\n\nGet MonitoredLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::PhaseShiftingTransformer) -> Array{Service,1}\n\n\nGet PhaseShiftingTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::PowerLoad) -> Array{Service,1}\n\n\nGet PowerLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::RenewableDispatch) -> Array{Service,1}\n\n\nGet RenewableDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::RenewableFix) -> Array{Service,1}\n\n\nGet RenewableFix services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Source) -> Array{Service,1}\n\n\nGet Source services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::TapTransformer) -> Array{Service,1}\n\n\nGet TapTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::ThermalStandard) -> Array{Service,1}\n\n\nGet ThermalStandard services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Transformer2W) -> Array{Service,1}\n\n\nGet Transformer2W services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::VSCDCLine) -> Array{Service,1}\n\n\nGet VSCDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_shutdn-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_shutdn","text":"get_shutdn(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost shutdn.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_startup-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_startup","text":"get_startup(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost startup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRFixed) -> Array{Symbol,1}\n\n\nGet AVRFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRSimple) -> Array{Symbol,1}\n\n\nGet AVRSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRTypeII) -> Array{Symbol,1}\n\n\nGet AVRTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRTypeI) -> Array{Symbol,1}\n\n\nGet AVRTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AndersonFouadMachine) -> Array{Symbol,1}\n\n\nGet AndersonFouadMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AvgCnvFixedDC) -> Array{Symbol,1}\n\n\nGet AvgCnvFixedDC states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::BaseMachine) -> Array{Symbol,1}\n\n\nGet BaseMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::CombinedVIwithVZ) -> Array{Symbol,1}\n\n\nGet CombinedVIwithVZ states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FiveMassShaft) -> Array{Symbol,1}\n\n\nGet FiveMassShaft states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FixedDCSource) -> Array{Symbol,1}\n\n\nGet FixedDCSource states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FullMachine) -> Array{Symbol,1}\n\n\nGet FullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::LCLFilter) -> Array{Symbol,1}\n\n\nGet LCLFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::MarconatoMachine) -> Array{Symbol,1}\n\n\nGet MarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::OneDOneQMachine) -> Array{Symbol,1}\n\n\nGet OneDOneQMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PLL) -> Array{Symbol,1}\n\n\nGet PLL states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PSSFixed) -> Array{Symbol,1}\n\n\nGet PSSFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PowerSystems.LCFilter) -> Array{Symbol,1}\n\n\nGet LCFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PowerSystems.PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PowerSystems.PSSSimple) -> Array{Symbol,1}\n\n\nGet PSSSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::ReactivePowerDroop) -> Array{Symbol,1}\n\n\nGet ReactivePowerDroop states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleAFMachine) -> Array{Symbol,1}\n\n\nGet SimpleAFMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleFullMachine) -> Array{Symbol,1}\n\n\nGet SimpleFullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleMarconatoMachine) -> Array{Symbol,1}\n\n\nGet SimpleMarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SingleMass) -> Array{Symbol,1}\n\n\nGet SingleMass states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGFixed) -> Array{Symbol,1}\n\n\nGet TGFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGTypeII) -> Array{Symbol,1}\n\n\nGet TGTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGTypeI) -> Array{Symbol,1}\n\n\nGet TGTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::VirtualInertia) -> Array{Symbol,1}\n\n\nGet VirtualInertia states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_storage_capacity-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_storage_capacity","text":"get_storage_capacity(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch storage_capacity.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tap-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_tap","text":"get_tap(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tap-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_tap","text":"get_tap(value::TapTransformer) -> Float64\n\n\nGet TapTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tech-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_tech","text":"get_tech(value::HydroDispatch) -> TechHydro\n\n\nGet HydroDispatch tech.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tech-Tuple{HydroFix}","page":"PowerSystems","title":"PowerSystems.get_tech","text":"get_tech(value::HydroFix) -> TechHydro\n\n\nGet HydroFix tech.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tech-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_tech","text":"get_tech(value::RenewableDispatch) -> TechRenewable\n\n\nGet RenewableDispatch tech.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tech-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_tech","text":"get_tech(value::RenewableFix) -> TechRenewable\n\n\nGet RenewableFix tech.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tech-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_tech","text":"get_tech(value::ThermalStandard) -> Union{Nothing, TechThermal}\n\n\nGet ThermalStandard tech.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_timeframe-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_timeframe","text":"get_timeframe(value::StaticReserve) -> Float64\n\n\nGet StaticReserve timeframe.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_timeframe-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_timeframe","text":"get_timeframe(value::Transfer) -> Float64\n\n\nGet Transfer timeframe.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_timeframe-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_timeframe","text":"get_timeframe(value::VariableReserve) -> Float64\n\n\nGet VariableReserve timeframe.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_timelimits-Tuple{TechHydro}","page":"PowerSystems","title":"PowerSystems.get_timelimits","text":"get_timelimits(value::TechHydro) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet TechHydro timelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_timelimits-Tuple{TechThermal}","page":"PowerSystems","title":"PowerSystems.get_timelimits","text":"get_timelimits(value::TechThermal) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet TechThermal timelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_to-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_to","text":"get_to(value::Arc) -> Bus\n\n\nGet Arc to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_v_rated-Tuple{AvgCnvFixedDC}","page":"PowerSystems","title":"PowerSystems.get_v_rated","text":"get_v_rated(value::AvgCnvFixedDC) -> Float64\n\n\nGet AvgCnvFixedDC v_rated.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_variable-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_variable","text":"get_variable(value::ThreePartCost) -> PowerSystems.VariableCost\n\n\nGet ThreePartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_variable-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_variable","text":"get_variable(value::TwoPartCost) -> PowerSystems.VariableCost\n\n\nGet TwoPartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_voltage-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_voltage","text":"get_voltage(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_voltage-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_voltage","text":"get_voltage(value::FixedDCSource) -> Float64\n\n\nGet FixedDCSource voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_voltagelimits-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_voltagelimits","text":"get_voltagelimits(value::Bus) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet Bus voltagelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::Line) -> Float64\n\n\nGet Line x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::TapTransformer) -> Float64\n\n\nGet TapTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::Transformer2W) -> Float64\n\n\nGet Transformer2W x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_α-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_α","text":"get_α(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer α.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γd-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γd","text":"get_γd(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γd-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γd","text":"get_γd(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γq-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γq","text":"get_γq(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γq-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γq","text":"get_γq(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_τ_max-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_τ_max","text":"get_τ_max(value::TGTypeII) -> Float64\n\n\nGet TGTypeII τ_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_τ_min-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_τ_min","text":"get_τ_min(value::TGTypeII) -> Float64\n\n\nGet TGTypeII τ_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ω_lp-Tuple{PLL}","page":"PowerSystems","title":"PowerSystems.get_ω_lp","text":"get_ω_lp(value::PLL) -> Float64\n\n\nGet PLL ω_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ωad-Tuple{CombinedVIwithVZ}","page":"PowerSystems","title":"PowerSystems.get_ωad","text":"get_ωad(value::CombinedVIwithVZ) -> Float64\n\n\nGet CombinedVIwithVZ ωad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ωb-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_ωb","text":"get_ωb(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia ωb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ωf-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_ωf","text":"get_ωf(value::ReactivePowerDroop) -> Float64\n\n\nGet ReactivePowerDroop ωf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.has_service-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.has_service","text":"has_service(device::Device, service::Service) -> Bool\n\n\nhas_service(device::Device, service::Service)\n\nReturn true if the service is attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.has_service-Union{Tuple{T}, Tuple{Device,Type{T}}} where T<:Service","page":"PowerSystems","title":"PowerSystems.has_service","text":"has_service(device::T<:Service, ?::T<:Service)\n\n\nhas_service(device::Device, ::Type{T}) where T <:Service\n\nReturn true if a service with type T is attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_components-Tuple{System}","page":"PowerSystems","title":"PowerSystems.iterate_components","text":"iterate_components(sys::System) -> Channel{Any}\n\n\nIterates over all components.\n\nExamples\n\nfor component in iterate_components(sys)\n    @show component\nend\n\nSee also: get_components\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_forecasts-Tuple{System}","page":"PowerSystems","title":"PowerSystems.iterate_forecasts","text":"iterate_forecasts(sys::System) -> Channel{Any}\n\n\nIterates over all forecasts in order of initial time.\n\nExamples\n\nfor forecast in iterate_forecasts(sys)\n    @show forecast\nend\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_forecasts-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.make_forecasts","text":"make_forecasts(sys::System, metadata_file::AbstractString; resolution) -> Any\n\n\nReturn a vector of forecasts from a metadata file.\n\nArguments\n\ndata::SystemData: system\nmetadata_file::AbstractString: path to metadata file\nresolution::{Nothing, Dates.Period}: skip any forecasts that don't match this resolution\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of what the file should contain.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_forecasts-Tuple{System,Array{InfrastructureSystems.TimeseriesFileMetadata,1}}","page":"PowerSystems","title":"PowerSystems.make_forecasts","text":"make_forecasts(sys::System, metadata::Array{InfrastructureSystems.TimeseriesFileMetadata,1}; resolution) -> Any\n\n\nReturn a vector of forecasts from a vector of TimeseriesFileMetadata values.\n\nArguments\n\ndata::SystemData: system\ntimeseries_metadata::Vector{TimeseriesFileMetadata}: metadata values\nresolution::{Nothing, Dates.Period}: skip any forecasts that don't match this resolution\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_pf-Tuple{Any}","page":"PowerSystems","title":"PowerSystems.make_pf","text":"make_pf(system::Any) -> Tuple{getfield(PowerSystems, Symbol(\"#pf!#117\")){Int64,Ybus{Tuple{Array{Int64,1},Array{Int64,1}},Tuple{Dict{Int64,Int64},Dict{Int64,Int64}}},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Base.Generator{Base.Iterators.Enumerate{Array{Bus,1}},getfield(PowerSystems, Symbol(\"##114#116\"))}},Array{Float64,1}}\n\n\nmake_pf(sys)\n\nCreate the objects needed to solve an powerflow case using NLsolve.jl solvers. Returns an anonymous function with the powerflow equations, initial conditions and a dict to link the solutions to the original system. Only supports systems with a single generator per bus and currently doesn't support distributed slack buses and doesn't enforce reactive power limits.\n\nExample\n\npf!, x0 = make_pf(sys)\nres = NLsolve.nlsolve(pf!, x0)\n\nArguments\n\n* `sys`::System : a PowerSystems.jl system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_file-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_file","text":"parse_file(io::IO; import_all, validate, filetype) -> Any\n\n\nParses the iostream from a file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_standard_files-Tuple{String}","page":"PowerSystems","title":"PowerSystems.parse_standard_files","text":"parse_standard_files(file::String; kwargs...) -> System\n\n\nCreate a System by parsing power-system parameters from a Matpower, PTI, or JSON file and do some data checks.\n\nExamples\n\nsys = parse_standard_files(\n    \"case_file.m\",\n    configpath = \"custom_validation.json\",\n    bus_name_formatter = x->string(x[\"name\"]*\"-\"*string(x[\"index\"])),\n    load_name_formatter = x->strip(join(x[\"source_id\"], \"_\"))\n) -> System\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_component!-Union{Tuple{T}, Tuple{System,T}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_component!","text":"remove_component!(sys::T<:Component, component::T<:Component)\n\n\nRemove a component from the system by its value.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_component!-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_component!","text":"remove_component!(?::T<:Component, sys::T<:Component, name::T<:Component)\n\n\nRemove a component from the system by its name.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_components!-Union{Tuple{T}, Tuple{Type{T},System}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_components!","text":"Remove all components of type T from the system.\n\nThrows ArgumentError if the type is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_forecast!-Union{Tuple{T}, Tuple{Type{T},System,Component,Dates.DateTime,String}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.remove_forecast!","text":"remove_forecast!(?::T<:Forecast, sys::T<:Forecast, component::T<:Forecast, initial_time::T<:Forecast, label::T<:Forecast)\n\n\nRemove the time series data for a component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.remove_service!","text":"remove_service!(device::Device, service::Service)\n\n\nremove_service!(device::Device, service::Service)\n\nRemove a service from a device.\n\nThrows ArgumentError if the service is not attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.solve_powerflow!-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.solve_powerflow!","text":"solve_powerflow!(sys::Any, nlsolve::Any; args...)\n\n\nsolve_powerflow!(sys, solve_function, args...)\n\nSolves a the power flow into the system and writes the solution into the relevant structs. Updates generators active and reactive power setpoints and branches active and reactive power flows (calculated in the From - To direction) (see flow_val)\n\nRequires loading NLsolve.jl to run. Internally it uses the makepf (see [makepf](@ref)) to create the problem and solve it. As a result it doesn't enforce reactivepower limits.\n\nSupports passing NLsolve kwargs in the args. By default shows the solver trace.\n\nArguments available for nlsolve:\n\nmethod : See NLSolve.jl documentation for available solvers\nxtol: norm difference in x between two successive iterates under which convergence is declared. Default: 0.0.\nftol: infinite norm of residuals under which convergence is declared. Default: 1e-8.\niterations: maximum number of iterations. Default: 1_000.\nstore_trace: should a trace of the optimization algorithm's state be stored? Default: false.\nshow_trace: should a trace of the optimization algorithm's state be shown on STDOUT? Default: false.\nextended_trace: should additifonal algorithm internals be added to the state trace? Default: false.\n\nExamples\n\nusing NLsolve\nsolve_powerflow!(sys, nlsolve)\n# Passing NLsolve arguments\nsolve_powerflow!(sys, nlsolve, method = :Newton)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.to_json-Tuple{IO,System}","page":"PowerSystems","title":"PowerSystems.to_json","text":"to_json(io::IO, sys::System) -> Any\n\n\nSerializes a system an IO stream in JSON.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.to_json-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.to_json","text":"to_json(sys::System, filename::AbstractString) -> Any\n\n\nSerializes a system to a JSON string.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.update_data!-Tuple{Dict{String,#s575} where #s575,Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.update_data!","text":"update_data!(data::Dict{String,#s575} where #s575, new_data::Dict{String,#s574} where #s574)\n\n\nrecursively applies new_data to data, overwriting information\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.validate_forecast_consistency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.validate_forecast_consistency","text":"validate_forecast_consistency(sys::System) -> Bool\n\n\nReturn true if all forecasts have consistent parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#Internal-1","page":"PowerSystems","title":"Internal","text":"","category":"section"},{"location":"api/PowerSystems/#","page":"PowerSystems","title":"PowerSystems","text":"Modules = [PowerSystems]\nPublic = false","category":"page"},{"location":"api/PowerSystems/#PowerSystems.pm_component_status","page":"PowerSystems","title":"PowerSystems.pm_component_status","text":"maps component types to status parameters\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems.pm_component_status_inactive","page":"PowerSystems","title":"PowerSystems.pm_component_status_inactive","text":"maps component types to inactive status values\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems.LCFilter","page":"PowerSystems","title":"PowerSystems.LCFilter","text":"mutable struct LCFilter <: Filter\n    lf::Float64\n    rf::Float64\n    cf::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a LCL filter outside the converter\n\nArguments\n\nlf::Float64: filter inductance, validation range: (0, nothing)\nrf::Float64: filter resistance, validation range: (0, nothing)\ncf::Float64: filter capacitance, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PSSSimple","page":"PowerSystems","title":"PowerSystems.PSSSimple","text":"mutable struct PSSSimple <: PSS\n    K_ω::Float64\n    K_p::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a PSS that returns a proportional droop voltage to add to the reference for the AVR\n\nArguments\n\nK_ω::Float64: Proportional gain for frequency, validation range: (0, nothing)\nK_p::Float64: Proportional gain for active power, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerSystemTableData-Tuple{AbstractString,Float64,AbstractString}","page":"PowerSystems","title":"PowerSystems.PowerSystemTableData","text":"PowerSystemTableData(directory::AbstractString, basepower::Float64, user_descriptor_file::AbstractString; descriptor_file, generator_mapping_file, timeseries_metadata_file) -> PowerSystems.PowerSystemTableData\n\n\n PowerSystemTableData(directory::AbstractString,\n                      basepower::Float64,\n                      user_descriptor_file::AbstractString;\n                      descriptor_file=POWER_SYSTEM_DESCRIPTOR_FILE)\n\nReads in all the data stored in csv files The general format for data is     folder:         gen.csv         branch.csv         bus.csv         ..         load.csv\n\nArguments\n\ndirectory::AbstractString: directory containing CSV files\nbasepower::Float64: base power for System\nuser_descriptor_file::AbstractString: customized input descriptor file\ndescriptor_file=POWER_SYSTEM_DESCRIPTOR_FILE: PowerSystems descriptor file\ngenerator_mapping_file=GENERATOR_MAPPING_FILE: generator mapping configuration file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.PrimeMovers","page":"PowerSystems","title":"PowerSystems.PrimeMovers","text":"From https://www.eia.gov/survey/form/eia_923/instructions.pdf\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThermalFuels","page":"PowerSystems","title":"PowerSystems.ThermalFuels","text":"AER Aggregated Fuel Code From https://www.eia.gov/survey/form/eia_923/instructions.pdf\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems._FieldInfo","page":"PowerSystems","title":"PowerSystems._FieldInfo","text":"Stores user-customized information for required dataframe columns.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#InfrastructureSystems.convert_type-Union{Tuple{T}, Tuple{Type{T},NamedTuple,Dict}} where T<:Device","page":"PowerSystems","title":"InfrastructureSystems.convert_type","text":"convert_type(?::T<:Device, data::T<:Device, component_cache::T<:Device)\n\n\nCreates a Device object by decoding the data that was in JSON. This data stores the values for buses and services as UUIDs, so this will lookup each in component_cache.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#InfrastructureSystems.convert_type-Union{Tuple{T}, Tuple{Type{T},NamedTuple,Dict}} where T<:Service","page":"PowerSystems","title":"InfrastructureSystems.convert_type","text":"convert_type(?::T<:Service, data::T<:Service, devices::T<:Service)\n\n\nCreates a Service object by decoding the data that was in JSON. This data stores the values for the field contributingdevices as UUIDs, so this will lookup each device in devices.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#JSON2.read-Tuple{IO,Type{PowerSystems.VariableCost}}","page":"PowerSystems","title":"JSON2.read","text":"read(io::IO, ?::Type{PowerSystems.VariableCost}) -> PowerSystems.VariableCost{_A} where _A\n\n\nEnables deserialization of VariableCost. The default implementation can't figure out the variable Union.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._add_dcline_costs!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._add_dcline_costs!","text":"_add_dcline_costs!(data::Dict{String,Any})\n\n\nadds dcline costs, if gen costs exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._add_line_delimiter-Tuple{AbstractString,Any,Any}","page":"PowerSystems","title":"PowerSystems._add_line_delimiter","text":"_add_line_delimiter(mp_line::AbstractString, start_char::Any, end_char::Any) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._add_section_data!-Tuple{Dict,Dict,AbstractString}","page":"PowerSystems","title":"PowerSystems._add_section_data!","text":"_add_section_data!(pti_data::Dict, section_data::Dict, section::AbstractString) -> Any\n\n\nadd_section_data!(pti_data, section_data, section)\n\nInternal function. Adds section_data::Dict, which contains all parsed elements of a PTI file section given by section, into the parent pti_data::Dict\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._apply_func!-Tuple{Dict{String,#s576} where #s576,String,Any}","page":"PowerSystems","title":"PowerSystems._apply_func!","text":"_apply_func!(data::Dict{String,#s576} where #s576, key::String, func::Any) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._biggest_generator-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._biggest_generator","text":"_biggest_generator(gens::Any) -> Any\n\n\nfind the largest active generator in the network\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._bold-Tuple{String}","page":"PowerSystems","title":"PowerSystems._bold","text":"_bold(s::String) -> String\n\n\nMakes a string bold in the terminal\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_branch_flow_ac-Tuple{Dict{String,#s568} where #s568}","page":"PowerSystems","title":"PowerSystems._calc_branch_flow_ac","text":"_calc_branch_flow_ac(data::Dict{String,#s568} where #s568) -> Dict{String,Any}\n\n\nhelper function for calcbranchflow_ac\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_branch_flow_dc-Tuple{Dict{String,#s569} where #s569}","page":"PowerSystems","title":"PowerSystems._calc_branch_flow_dc","text":"_calc_branch_flow_dc(data::Dict{String,#s569} where #s569) -> Dict{String,Any}\n\n\nhelper function for calcbranchflow_dc\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_comp_lines-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems._calc_comp_lines","text":"_calc_comp_lines(component::Dict{String,#s574} where #s574) -> Array{Any,1}\n\n\ncompute lines in m and b from from pwl cost models\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_max_cost_index-Tuple{Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems._calc_max_cost_index","text":"_calc_max_cost_index(data::Dict{String,#s572} where #s572) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_power_balance-Tuple{Dict{String,#s556} where #s556}","page":"PowerSystems","title":"PowerSystems._calc_power_balance","text":"_calc_power_balance(data::Dict{String,#s556} where #s556) -> Dict{String,Any}\n\n\nhelper function for calcpowerbalance\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._check_conductors-Tuple{Dict{String,#s576} where #s576}","page":"PowerSystems","title":"PowerSystems._check_conductors","text":"_check_conductors(data::Dict{String,#s576} where #s576)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._check_keys-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._check_keys","text":"_check_keys(data::Any, keys::Any)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._compare_numbers-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._compare_numbers","text":"_compare_numbers(v1::Any, v2::Any) -> Bool\n\n\ntests if two numbers are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._correct_cost_function!-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems._correct_cost_function!","text":"_correct_cost_function!(id::Any, comp::Any, type_name::Any) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._correct_reference_buses!-Tuple{Dict{String,#s565} where #s565}","page":"PowerSystems","title":"PowerSystems._correct_reference_buses!","text":"_correct_reference_buses!(data::Dict{String,#s565} where #s565)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._create_starbus_from_transformer-Tuple{Dict,Dict}","page":"PowerSystems","title":"PowerSystems._create_starbus_from_transformer","text":"_create_starbus_from_transformer(pm_data::Dict, transformer::Dict) -> Dict{String,Any}\n\n\ncreate_starbus(pm_data, transformer)\n\nCreates a starbus from a given three-winding transformer. \"sourceid\" is given by `[\"busi\", \"name\", \"I\", \"J\", \"K\", \"CKT\"]` where \"bus_i\" and \"name\" are the modified names for the starbus, and \"I\", \"J\", \"K\" and \"CKT\" come from the originating transformer, in the PSS(R)E transformer specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._dfs-NTuple{4,Any}","page":"PowerSystems","title":"PowerSystems._dfs","text":"_dfs(i::Any, neighbors::Any, component_lookup::Any, touched::Any)\n\n\nperforms DFS on a graph\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._export_cost_data-Tuple{IO,Dict{Int64,Dict},String}","page":"PowerSystems","title":"PowerSystems._export_cost_data","text":"_export_cost_data(io::IO, components::Dict{Int64,Dict}, prefix::String)\n\n\nExport cost data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._export_extra_data","page":"PowerSystems","title":"PowerSystems._export_extra_data","text":"_export_extra_data(io::IO, data::Dict{String,#s562} where #s562, component::Any)\n_export_extra_data(io::IO, data::Dict{String,#s561} where #s561, component::Any, excluded_fields::Any; postfix)\n\n\nExport fields of a component type\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._extract_matlab_assignment-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._extract_matlab_assignment","text":"_extract_matlab_assignment(string::AbstractString) -> Tuple{SubString{_A} where _A,SubString{_A} where _A}\n\n\nbreaks up matlab strings of the form 'name = value;'\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._find_max_bus_id-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._find_max_bus_id","text":"_find_max_bus_id(pm_data::Dict) -> Int64\n\n\n_find_max_bus_id(pm_data)\n\nReturns the maximum bus id in pm_data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._float2string-Tuple{AbstractFloat,Int64}","page":"PowerSystems","title":"PowerSystems._float2string","text":"_float2string(v::AbstractFloat, float_precision::Int64) -> String\n\n\nconverts a float value into a string of fixed precision\n\nsprintf would do the job but this work around is needed because sprintf cannot take format strings during runtime\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_bus_value-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems._get_bus_value","text":"_get_bus_value(bus_i::Any, field::Any, pm_data::Any) -> Any\n\n\n_get_bus_value(bus_i, field, pm_data)\n\nReturns the value of field of bus_i from the PowerModels data. Requires \"bus\" Dict to already be populated.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_component_property-NTuple{4,Any}","page":"PowerSystems","title":"PowerSystems._get_component_property","text":"_get_component_property(section::Any, ret::Any, search_field::Any, search_value::Any) -> Any\n\n\n_get_component_property(section, ret, search_field, search_value)\n\nInternal function. Finds a component in section where search_field == search_value and returns ret from that component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_default","page":"PowerSystems","title":"PowerSystems._get_default","text":"_get_default(dict::Any, key::Any) -> Any\n_get_default(dict::Any, key::Any, default::Any) -> Any\n\n\nGet a default value for dict entry \n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._get_line_elements-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._get_line_elements","text":"_get_line_elements(line::AbstractString) -> Array\n\n\n_get_line_elements(line)\n\nInternal function. Uses regular expressions to extract all separate data elements from a line of a PTI file and populate them into an Array{String}. Comments, typically indicated at the end of a line with a '/' character, are also extracted separately, and Array{Array{String}, String} is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_pm_dict_name-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._get_pm_dict_name","text":"_get_pm_dict_name(device_dict::Any) -> Any\n\n\nInternal component name retreval from pm2ps_dict\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_pti_default-Tuple{AbstractString,AbstractString,Dict,Dict}","page":"PowerSystems","title":"PowerSystems._get_pti_default","text":"_get_pti_default(section::AbstractString, field::AbstractString, data::Dict, component::Dict; sub_field) -> Any\n\n\n_get_pti_default(section, field, data, component)\n\nInternal function. Returns a default value in section for field in component from data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_pti_dtypes-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._get_pti_dtypes","text":"_get_pti_dtypes(field_name::AbstractString) -> Array\n\n\n_get_pti_dtypes(field_name)\n\nInternal function. Returns array of data types for PTI file section given by field_name, as enumerated by PSS/E Program Operation Manual.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_pti_sections-Tuple{}","page":"PowerSystems","title":"PowerSystems._get_pti_sections","text":"_get_pti_sections() -> Array{String,1}\n\n\ngetpti_sections()\n\nInternal function. Returns Array of the names of the sections, in the order that they appear in a PTI file, v33\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._grey-Tuple{String}","page":"PowerSystems","title":"PowerSystems._grey","text":"_grey(s::String) -> String\n\n\nMakes a string grey in the terminal, does not seem to work well on Windows terminals more info can be found at https://en.wikipedia.org/wiki/ANSIescapecode\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._import_remaining!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._import_remaining!","text":"_import_remaining!(data_out::Dict, data_in::Dict, import_all::Bool; exclude)\n\n\nImports remaining keys from data_in into data_out, excluding keys in exclude\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._init_bus!-Tuple{Dict{String,Any},Int64}","page":"PowerSystems","title":"PowerSystems._init_bus!","text":"_init_bus!(bus::Dict{String,Any}, id::Int64) -> Int64\n\n\n_init_bus!(bus, id)\n\nInitializes a bus of id id with default values given in the PSS(R)E specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._make_mixed_units!-Tuple{Dict{String,#s561} where #s561,Real}","page":"PowerSystems","title":"PowerSystems._make_mixed_units!","text":"_make_mixed_units!(data::Dict{String,#s561} where #s561, mva_base::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._make_per_unit!-Tuple{Dict{String,#s561} where #s561,Real}","page":"PowerSystems","title":"PowerSystems._make_per_unit!","text":"_make_per_unit!(data::Dict{String,#s561} where #s561, mva_base::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._matpower_to_powermodels!-Tuple{Dict{String,#s164} where #s164}","page":"PowerSystems","title":"PowerSystems._matpower_to_powermodels!","text":"_matpower_to_powermodels!(mp_data::Dict{String,#s164} where #s164) -> Dict{String,#s164} where #s164\n\n\nConverts a Matpower dict into a PowerModels dict\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_bus_name_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_bus_name_data!","text":"_merge_bus_name_data!(data::Dict{String,Any}) -> Union{Nothing, Dict{String,Any}}\n\n\nmerges bus name data into buses, if names exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_generator_cost_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_generator_cost_data!","text":"_merge_generator_cost_data!(data::Dict{String,Any}) -> Union{Nothing, Dict{String,Any}}\n\n\nmerges generator cost functions into generator data, if costs exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_generic_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_generic_data!","text":"_merge_generic_data!(data::Dict{String,Any})\n\n\nmerges Matpower tables based on the table extension syntax\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp2pm_branch!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._mp2pm_branch!","text":"_mp2pm_branch!(data::Dict{String,Any})\n\n\nsets all branch transformer taps to 1.0, to simplify branch models\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp2pm_dcline!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._mp2pm_dcline!","text":"_mp2pm_dcline!(data::Dict{String,Any})\n\n\nadds pmin and pmax values at to and from buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp_cost_data-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._mp_cost_data","text":"_mp_cost_data(cost_row::Any) -> Dict{String,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_line_element!-Tuple{Dict,Array,AbstractString}","page":"PowerSystems","title":"PowerSystems._parse_line_element!","text":"_parse_line_element!(data::Dict, elements::Array, section::AbstractString)\n\n\nparseline_element!(data, elements, section)\n\nInternal function. Parses a single \"line\" of data elements from a PTI file, as given by elements which is an array of the line, typically split at ,. Elements are parsed into data types given by section and saved into data::Dict.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_cells-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_cells","text":"_parse_matlab_cells(lines::Any, index::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_data-NTuple{4,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_data","text":"_parse_matlab_data(lines::Any, index::Any, start_char::Any, end_char::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_matrix-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_matrix","text":"_parse_matlab_matrix(lines::Any, index::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matpower_string-Tuple{String}","page":"PowerSystems","title":"PowerSystems._parse_matpower_string","text":"_parse_matpower_string(data_string::String) -> Dict{String,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_pti_data-Tuple{IO,Array}","page":"PowerSystems","title":"PowerSystems._parse_pti_data","text":"_parse_pti_data(data_io::IO, sections::Array) -> Dict{String,Array{Dict,N} where N}\n\n\n_parse_pti_data(data_string, sections)\n\nInternal function. Parse a PTI raw file into a Dict, given the data_string of the file and a list of the sections in the PTI file (typically given by default by get_pti_sections().\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._populate_defaults!-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._populate_defaults!","text":"_populate_defaults!(data::Dict)\n\n\n_populate_defaults!(pti_data)\n\nInternal function. Populates empty fields with PSS(R)E PTI v33 default values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._propagate_topology_status!-Tuple{Dict{String,#s512} where #s512}","page":"PowerSystems","title":"PowerSystems._propagate_topology_status!","text":"_propagate_topology_status!(data::Dict{String,#s512} where #s512)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_branch!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_branch!","text":"_psse2pm_branch!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_branch!(pm_data, pti_data)\n\nParses PSS(R)E-style Branch data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"J\", \"CKT\"] in PSS(R)E Branch specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_bus!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_bus!","text":"_psse2pm_bus!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_bus!(pm_data, pti_data)\n\nParses PSS(R)E-style Bus data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"NAME\"] in PSS(R)E Bus specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_dcline!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_dcline!","text":"_psse2pm_dcline!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_dcline!(pm_data, pti_data)\n\nParses PSS(R)E-style Two-Terminal and VSC DC Lines data into a PowerModels compatible Dict structure by first converting them to a simple DC Line Model. For Two-Terminal DC lines, \"sourceid\" is given by [\"IPR\", \"IPI\", \"NAME\"] in the PSS(R)E Two-Terminal DC specification. For Voltage Source Converters, \"sourceid\" is given by [\"IBUS1\", \"IBUS2\", \"NAME\"], where \"IBUS1\" is \"IBUS\" of the first converter bus, and \"IBUS2\" is the \"IBUS\" of the second converter bus, in the PSS(R)E Voltage Source Converter specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_generator!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_generator!","text":"_psse2pm_generator!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_generator!(pm_data, pti_data)\n\nParses PSS(R)E-style Generator data in a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] in PSS(R)E Generator specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_load!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_load!","text":"_psse2pm_load!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_load!(pm_data, pti_data)\n\nParses PSS(R)E-style Load data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] in the PSS(R)E Load specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_shunt!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_shunt!","text":"_psse2pm_shunt!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_shunt!(pm_data, pti_data)\n\nParses PSS(R)E-style Fixed and Switched Shunt data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] for Fixed Shunts, and [\"I\", \"SWREM\"] for Switched Shunts, as given by the PSS(R)E Fixed and Switched Shunts specifications.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_transformer!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_transformer!","text":"_psse2pm_transformer!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_transformer!(pm_data, pti_data)\n\nParses PSS(R)E-style Transformer data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"J\", \"K\", \"CKT\", \"winding\"], where \"winding\" is 0 if transformer is two-winding, and 1, 2, or 3 for three-winding, and the remaining keys are defined in the PSS(R)E Transformer specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._pti_to_powermodels!-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._pti_to_powermodels!","text":"_pti_to_powermodels!(pti_data::Dict; import_all, validate) -> Dict{String,Any}\n\n\n_pti_to_powermodels!(pti_data)\n\nConverts PSS(R)E-style data parsed from a PTI raw file, passed by pti_data into a format suitable for use internally in PowerModels. Imports all remaining data from the PTI file if import_all is true (Default: false).\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._read_data_row-Tuple{PowerSystems.PowerSystemTableData,Any,Any}","page":"PowerSystems","title":"PowerSystems._read_data_row","text":"_read_data_row(data::PowerSystems.PowerSystemTableData, row::Any, field_infos::Any; na_to_nothing) -> NamedTuple{_A,_B} where _B where _A\n\n\nReads values from dataframe row and performs necessary conversions.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._remove_pwl_cost_duplicates!","page":"PowerSystems","title":"PowerSystems._remove_pwl_cost_duplicates!","text":"_remove_pwl_cost_duplicates!(id::Any, comp::Any, type_name::Any) -> Bool\n_remove_pwl_cost_duplicates!(id::Any, comp::Any, type_name::Any, tolerance::Any) -> Bool\n\n\nchecks that each point in the a pwl function is unqiue, simplifies the function if duplicates appear\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._remove_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems._remove_service!","text":"_remove_service!(device::Device, service::Service) -> Bool\n\n\nRemove service from device if it is attached.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._rescale_cost_model!-Tuple{Dict{String,#s573} where #s573,Real}","page":"PowerSystems","title":"PowerSystems._rescale_cost_model!","text":"_rescale_cost_model!(comp::Dict{String,#s573} where #s573, scale::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._select_largest_component!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems._select_largest_component!","text":"_select_largest_component!(data::Dict{String,#s574} where #s574) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._simplify_pwl_cost!","page":"PowerSystems","title":"PowerSystems._simplify_pwl_cost!","text":"_simplify_pwl_cost!(id::Any, comp::Any, type_name::Any) -> Bool\n_simplify_pwl_cost!(id::Any, comp::Any, type_name::Any, tolerance::Any) -> Bool\n\n\nchecks the slope of each segment in a pwl function, simplifies the function if the slope changes is below a tolerance\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._split_loads_shunts!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._split_loads_shunts!","text":"_split_loads_shunts!(data::Dict{String,Any})\n\n\n_split_loads_shunts!(data)\n\nSeperates Loads and Shunts in data under separate \"load\" and \"shunt\" keys in the PowerModels data format. Includes references to originating bus via \"loadbus\" and \"shuntbus\" keys, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._standardize_cost_terms!-Tuple{Dict{String,#s573} where #s573,Int64,String}","page":"PowerSystems","title":"PowerSystems._standardize_cost_terms!","text":"_standardize_cost_terms!(components::Dict{String,#s573} where #s573, comp_order::Int64, cost_comp_name::String) -> Set{Int64}\n\n\nensures all polynomial costs functions have at exactly comp_order terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._type_array-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:AbstractString","page":"PowerSystems","title":"PowerSystems._type_array","text":"_type_array(string_array::Array{T<:AbstractString,1}) -> Any\n\n\nAttempts to determine the type of an array of strings extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._type_value-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._type_value","text":"_type_value(value_string::AbstractString) -> Any\n\n\nAttempts to determine the type of a string extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._update_data!-Tuple{Dict{String,#s573} where #s573,Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems._update_data!","text":"_update_data!(data::Dict{String,#s573} where #s573, new_data::Dict{String,#s572} where #s572)\n\n\nrecursive call of updatedata\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._value2string-Tuple{Any,Int64}","page":"PowerSystems","title":"PowerSystems._value2string","text":"_value2string(v::Any, float_precision::Int64) -> Any\n\n\nconverts any value to a string, summarizes arrays and dicts\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.arrays_to_dicts!-Tuple{Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems.arrays_to_dicts!","text":"arrays_to_dicts!(data::Dict{String,#s572} where #s572)\n\n\nturns top level arrays into dicts\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.branch_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.branch_csv_parser!","text":"branch_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nbranch_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd branches to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.bus_csv_parser!","text":"bus_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nbus_csv_parser!(sys::System, bus_raw::DataFrames.DataFrame)\n\nAdd buses to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_gen_lookup-Tuple{Dict{String,#s571} where #s571,Dict{String,#s570} where #s570}","page":"PowerSystems","title":"PowerSystems.bus_gen_lookup","text":"bus_gen_lookup(gen_data::Dict{String,#s571} where #s571, bus_data::Dict{String,#s570} where #s570) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what generators are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_load_lookup-Tuple{Dict{String,#s571} where #s571,Dict{String,#s570} where #s570}","page":"PowerSystems","title":"PowerSystems.bus_load_lookup","text":"bus_load_lookup(load_data::Dict{String,#s571} where #s571, bus_data::Dict{String,#s570} where #s570) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what loads are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_shunt_lookup-Tuple{Dict{String,#s571} where #s571,Dict{String,#s570} where #s570}","page":"PowerSystems","title":"PowerSystems.bus_shunt_lookup","text":"bus_shunt_lookup(shunt_data::Dict{String,#s571} where #s571, bus_data::Dict{String,#s570} where #s570) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what shunts are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_storage_lookup-Tuple{Dict{String,#s571} where #s571,Dict{String,#s570} where #s570}","page":"PowerSystems","title":"PowerSystems.bus_storage_lookup","text":"bus_storage_lookup(storage_data::Dict{String,#s571} where #s571, bus_data::Dict{String,#s570} where #s570) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what storage is connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_flow_ac-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.calc_branch_flow_ac","text":"calc_branch_flow_ac(data::Dict{String,#s574} where #s574) -> Dict{String,Any}\n\n\nassumes a vaild ac solution is included in the data and computes the branch flow values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_flow_dc-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.calc_branch_flow_dc","text":"calc_branch_flow_dc(data::Dict{String,#s574} where #s574) -> Dict{String,Any}\n\n\nassumes a vaild dc solution is included in the data and computes the branch flow values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_t-Tuple{Dict{String,#s576} where #s576}","page":"PowerSystems","title":"PowerSystems.calc_branch_t","text":"calc_branch_t(branch::Dict{String,#s576} where #s576) -> Tuple{Any,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_y-Tuple{Dict{String,#s576} where #s576}","page":"PowerSystems","title":"PowerSystems.calc_branch_y","text":"calc_branch_y(branch::Dict{String,#s576} where #s576) -> Tuple{Any,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_connected_components-Tuple{Dict{String,#s568} where #s568}","page":"PowerSystems","title":"PowerSystems.calc_connected_components","text":"calc_connected_components(data::Dict{String,#s568} where #s568; edges) -> Set{Set{Int64}}\n\n\ncomputes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_cost_pwl_lines-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems.calc_cost_pwl_lines","text":"calc_cost_pwl_lines(comp_dict::Dict) -> Dict{Any,Any}\n\n\ncompute lines in m and b from from pwl cost models data is a list of components.\n\nCan be run on data or ref data structures\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_dcline_cost-Tuple{Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems.calc_dcline_cost","text":"calc_dcline_cost(data::Dict{String,#s572} where #s572) -> Any\n\n\ncomputes the dcline cost from given network data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_gen_cost-Tuple{Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems.calc_gen_cost","text":"calc_gen_cost(data::Dict{String,#s572} where #s572) -> Any\n\n\ncomputes the generator cost from given network data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_max_cost_index-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.calc_max_cost_index","text":"calc_max_cost_index(data::Dict{String,Any}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_power_balance-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.calc_power_balance","text":"calc_power_balance(data::Dict{String,#s574} where #s574) -> Dict{String,Any}\n\n\nassumes a vaild solution is included in the data and computes the power balance at each bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_theta_delta_bounds-Tuple{Dict{String,#s575} where #s575}","page":"PowerSystems","title":"PowerSystems.calc_theta_delta_bounds","text":"calc_theta_delta_bounds(data::Dict{String,#s575} where #s575) -> Tuple{Real,Real}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_ascending_order-Tuple{Array{Int64,N} where N,AbstractString}","page":"PowerSystems","title":"PowerSystems.check_ascending_order","text":"check_ascending_order(array::Array{Int64,N} where N, name::AbstractString)\n\n\nThrows DataFormatError if the array is not in ascending order.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_branch_loops-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.check_branch_loops","text":"check_branch_loops(data::Dict{String,#s574} where #s574)\n\n\nchecks that all branches connect two distinct buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_bus-Tuple{System,Bus,Component}","page":"PowerSystems","title":"PowerSystems.check_bus","text":"check_bus(sys::System, bus::Bus, component::Component)\n\n\nThrows ArgumentError if the bus is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_component_addition-Tuple{System,Component}","page":"PowerSystems","title":"PowerSystems.check_component_addition","text":"check_component_addition(sys::System, component::Component)\n\n\nThrows ArgumentError if a PowerSystems rule blocks addition to the system.\n\nThis method is tied with handlecomponentaddition!. If the methods are re-implemented for a subtype then whatever is added in handlecomponentaddition! must be checked here.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_conductors-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.check_conductors","text":"check_conductors(data::Dict{String,#s574} where #s574)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_connectivity-Tuple{Dict{String,#s560} where #s560}","page":"PowerSystems","title":"PowerSystems.check_connectivity","text":"check_connectivity(data::Dict{String,#s560} where #s560)\n\n\nchecks that all buses are unique and other components link to valid buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_reference_bus-Tuple{Dict{String,#s573} where #s573}","page":"PowerSystems","title":"PowerSystems.check_reference_bus","text":"check_reference_bus(data::Dict{String,#s573} where #s573)\n\n\nchecks that contains at least one refrence bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_reference_buses-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.check_reference_buses","text":"check_reference_buses(data::Dict{String,Any})\n\n\nchecks that each connected components has a reference bus, if not, adds one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_status-Tuple{Dict{String,#s560} where #s560}","page":"PowerSystems","title":"PowerSystems.check_status","text":"check_status(data::Dict{String,#s560} where #s560)\n\n\nchecks that active components are not connected to inactive buses, otherwise prints warnings\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_storage_parameters-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.check_storage_parameters","text":"check_storage_parameters(data::Dict{String,Any})\n\n\nchecks that each storage unit has a reasonable parameters\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_switch_parameters-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.check_switch_parameters","text":"check_switch_parameters(data::Dict{String,#s574} where #s574)\n\n\nchecks that each switch has a reasonable parameters\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_type-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.check_type","text":"check_type(typ::Any, value::Any) -> Any\n\n\nChecks if the given value is of a given type, if not tries to make it that type\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_voltage_setpoints-Tuple{Dict{String,#s571} where #s571}","page":"PowerSystems","title":"PowerSystems.check_voltage_setpoints","text":"check_voltage_setpoints(data::Dict{String,#s571} where #s571)\n\n\nthrows warnings if generator and dc line voltage setpoints are not consistent with the bus voltage setpoint\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_services!-Tuple{Device}","page":"PowerSystems","title":"PowerSystems.clear_services!","text":"clear_services!(device::Device) -> Any\n\n\nclear_services!(device::Device)\n\nRemove all services attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.compare_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.compare_dict","text":"compare_dict(d1::Any, d2::Any) -> Bool\n\n\ntests if two dicts are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_branch_directions!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.correct_branch_directions!","text":"correct_branch_directions!(data::Dict{String,#s574} where #s574) -> Set{Int64}\n\n\nchecks that all parallel branches have the same orientation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_bus_types!-Tuple{Dict{String,#s570} where #s570}","page":"PowerSystems","title":"PowerSystems.correct_bus_types!","text":"correct_bus_types!(data::Dict{String,#s570} where #s570) -> Set{Int64}\n\n\nchecks bus types are consistent with generator connections, if not, fixes them\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_component_refrence_bus!-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.correct_component_refrence_bus!","text":"correct_component_refrence_bus!(component_bus_ids::Any, bus_lookup::Any, component_gens::Any)\n\n\nchecks that a connected component has a reference bus, if not, adds one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_cost_functions!-Tuple{Dict{String,#s572} where #s572}","page":"PowerSystems","title":"PowerSystems.correct_cost_functions!","text":"correct_cost_functions!(data::Dict{String,#s572} where #s572) -> Tuple{Set{Int64},Set{Int64}}\n\n\nthrows warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_current_limits!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.correct_current_limits!","text":"correct_current_limits!(data::Dict{String,#s574} where #s574) -> Set{Int64}\n\n\nchecks that each branch has a reasonable current rating-a, if not computes one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_dcline_limits!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.correct_dcline_limits!","text":"correct_dcline_limits!(data::Dict{String,Any}) -> Set{Int64}\n\n\nchecks that parameters for dc lines are reasonable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_network_data!-Tuple{Dict{String,#s575} where #s575}","page":"PowerSystems","title":"PowerSystems.correct_network_data!","text":"correct_network_data!(data::Dict{String,#s575} where #s575) -> Dict{String,Dict{Symbol,Set{Int64}}}\n\n\nRuns various data quality checks on a PowerModels data dictionary. Applies modifications in some cases.  Reports modified component ids.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_thermal_limits!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.correct_thermal_limits!","text":"correct_thermal_limits!(data::Dict{String,#s574} where #s574) -> Set{Int64}\n\n\nchecks that each branch has a reasonable thermal rating-a, if not computes one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_transformer_parameters!-Tuple{Dict{String,#s573} where #s573}","page":"PowerSystems","title":"PowerSystems.correct_transformer_parameters!","text":"correct_transformer_parameters!(data::Dict{String,#s573} where #s573) -> Set{Int64}\n\n\nchecks that each branch has a reasonable transformer parameters\n\nthis is important because setting tap == 0.0 leads to NaN computations, which are hard to debug\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_voltage_angle_differences!","page":"PowerSystems","title":"PowerSystems.correct_voltage_angle_differences!","text":"correct_voltage_angle_differences!(data::Dict{String,#s572} where #s572) -> Set{Int64}\ncorrect_voltage_angle_differences!(data::Dict{String,#s571} where #s571, default_pad::Any) -> Set{Int64}\n\n\nchecks that voltage angle differences are within 90 deg., if not tightens\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.dc_branch_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.dc_branch_csv_parser!","text":"dc_branch_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\ndc_branch_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd DC branches to the System from raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.encode_for_json-Union{Tuple{T}, Tuple{T}} where T<:Component","page":"PowerSystems","title":"PowerSystems.encode_for_json","text":"Encode composed buses as UUIDs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.encode_for_json-Union{Tuple{T}, Tuple{T}} where T<:Device","page":"PowerSystems","title":"PowerSystems.encode_for_json","text":"Encode composed buses and services as UUIDs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.export_matpower-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.export_matpower","text":"export_matpower(data::Dict{String,Any}) -> String\n\n\nExport power network data in the matpower format\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.export_matpower-Tuple{IO,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.export_matpower","text":"export_matpower(io::IO, data::Dict{String,Any})\n\n\nExport power network data in the matpower format\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::Line) -> Complex{Float64}\n\n\nflow_val(b::TapTransformer)\n\nCalculates the From - To complex power flow (Flow injected at the bus) of branch of type Line\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::TapTransformer) -> Complex{Float64}\n\n\nflow_val(b::TapTransformer)\n\nCalculates the From - To comp[lex power flow (Flow injected at the bus) of branch of type TapTransformer\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::Transformer2W) -> Complex{Float64}\n\n\nflow_val(b::TapTransformer)\n\nCalculates the From - To complex power flow (Flow injected at the bus) of branch of type Transformer2W\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.gen_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.gen_csv_parser!","text":"gen_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\ngen_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd generators to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dataframe-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory}","page":"PowerSystems","title":"PowerSystems.get_dataframe","text":"get_dataframe(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory) -> DataFrames.DataFrame\n\n\nReturn the dataframe for the category.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_enum_value-Tuple{Any,String}","page":"PowerSystems","title":"PowerSystems.get_enum_value","text":"get_enum_value(enum::Any, value::String) -> Any\n\n\nGet the enum value for the string. Case insensitive.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_generator_mapping","page":"PowerSystems","title":"PowerSystems.get_generator_mapping","text":"get_generator_mapping() -> Dict{NamedTuple,DataType}\nget_generator_mapping(filename::Any) -> Dict{NamedTuple,DataType}\n\n\nReturn a dict where keys are a tuple of input parameters (fuel, unit_type) and values are generator types.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.get_generator_type-Tuple{Any,Any,Dict{NamedTuple,DataType}}","page":"PowerSystems","title":"PowerSystems.get_generator_type","text":"get_generator_type(fuel::Any, unit_type::Any, mappings::Dict{NamedTuple,DataType}) -> Union{Nothing, DataType}\n\n\nReturn the PowerSystems generator type for this fuel and unit_type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_user_field-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory,AbstractString}","page":"PowerSystems","title":"PowerSystems.get_user_field","text":"get_user_field(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory, field::AbstractString) -> Any\n\n\nReturn the custom name stored in the user descriptor file.\n\nThrows DataFormatError if a required value is not found in the file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_user_fields-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory}","page":"PowerSystems","title":"PowerSystems.get_user_fields","text":"get_user_fields(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory) -> Any\n\n\nReturn a vector of user-defined fields for the category.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.handle_component_addition!-Tuple{System,Component}","page":"PowerSystems","title":"PowerSystems.handle_component_addition!","text":"handle_component_addition!(sys::System, component::Component) -> Set{Int64}\n\n\nRefer to docstring for checkcomponentaddition!\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.handle_component_removal!-Tuple{System,Bus}","page":"PowerSystems","title":"PowerSystems.handle_component_removal!","text":"handle_component_removal!(sys::System, bus::Bus) -> Int64\n\n\nThrows ArgumentError if the bus number is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.im_replicate-Tuple{Dict{String,#s574} where #s574,Int64,Set{String}}","page":"PowerSystems","title":"PowerSystems.im_replicate","text":"im_replicate(sn_data::Dict{String,#s574} where #s574, count::Int64, global_keys::Set{String}) -> Dict{String,Any}\n\n\nTransforms a single network into a multinetwork with several deepcopies of the original network\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.isafield-Tuple{Component,Symbol}","page":"PowerSystems","title":"PowerSystems.isafield","text":"isafield(component::Component, field::Symbol) -> Any\n\n\nChecks if a PowerSystemDevice has a field or subfield name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.ismultinetwork-Tuple{Dict{String,#s576} where #s576}","page":"PowerSystems","title":"PowerSystems.ismultinetwork","text":"ismultinetwork(data::Dict{String,#s576} where #s576) -> Any\n\n\nchecks if a given network data is a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_rows-Tuple{PowerSystems.PowerSystemTableData,Any}","page":"PowerSystems","title":"PowerSystems.iterate_rows","text":"iterate_rows(data::PowerSystems.PowerSystemTableData, category::Any; na_to_nothing) -> Channel{Any}\n\n\niterate_rows(data::PowerSystemTableData, category; na_to_nothing=true)\n\nReturn a NamedTuple of parameters from the descriptor file for each row of a dataframe, making type conversions as necessary.\n\nRefer to the PowerSystems descriptor file for field names that will be created.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.load_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.load_csv_parser!","text":"load_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nload_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd loads to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.loadzone_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.loadzone_csv_parser!","text":"loadzone_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nloadzone_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd branches to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_bus-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.make_bus","text":"make_bus(bus_dict::Dict{String,Any}) -> Bus\n\n\nCreates a PowerSystems.Bus from a PowerSystems bus dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_generator-Tuple{PowerSystems.PowerSystemTableData,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.make_generator","text":"make_generator(data::PowerSystems.PowerSystemTableData, gen::Any, cost_colnames::Any, bus::Any) -> Any\n\n\nCreates a generator of any type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_mixed_units!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.make_mixed_units!","text":"make_mixed_units!(data::Dict{String,#s574} where #s574)\n\n\nTransforms network data into mixed-units (inverse of per-unit)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_per_unit!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.make_per_unit!","text":"make_per_unit!(data::Dict{String,#s574} where #s574)\n\n\nTransforms network data into per-unit\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_thermal_gen-Tuple{AbstractString,Dict,Bus}","page":"PowerSystems","title":"PowerSystems.make_thermal_gen","text":"make_thermal_gen(gen_name::AbstractString, d::Dict, bus::Bus) -> ThermalStandard\n\n\nThe polynomial term follows the convention that for an n-degree polynomial, at least n + 1 components are needed.     c(p) = cn*p^n+...+c1p+c0     co is stored in the  field in of the Econ Struct\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.move_genfuel_and_gentype!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.move_genfuel_and_gentype!","text":"move_genfuel_and_gentype!(data::Dict{String,Any})\n\n\nMove gentype and genfuel fields to be subfields of gen\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_matpower-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_matpower","text":"parse_matpower(io::IO; validate) -> Dict{String,Any}\n\n\nParses the matpwer data from either a filename or an IO object\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_psse-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_psse","text":"parse_psse(io::IO; kwargs...) -> Dict{String,Any}\n\n\nParses directly from iostream\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_psse-Tuple{String}","page":"PowerSystems","title":"PowerSystems.parse_psse","text":"parse_psse(filename::String; kwargs...) -> Dict{String,Any}\n\n\nParses directly from file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_pti-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_pti","text":"parse_pti(io::IO) -> Dict{String,Array{Dict,N} where N}\n\n\nparse_pti(io::IO)\n\nReads PTI data in io::IO, returning a Dict of the data parsed into the proper types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_pti-Tuple{String}","page":"PowerSystems","title":"PowerSystems.parse_pti","text":"parse_pti(filename::String) -> Dict{String,Array{Dict,N} where N}\n\n\nparse_pti(filename::String)\n\nOpen PTI raw file given by filename, returning a Dict of the data parsed into the proper types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.pm2ps_dict-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.pm2ps_dict","text":"pm2ps_dict(data::Dict{String,Any}; kwargs...) -> System\n\n\nConverts a dictionary parsed by PowerModels to a System. Currently Supports MATPOWER and PSSE data files parsed by PowerModels. Supports kwargs to supply formatters for different device types, such as bus_name_formatter or gen_name_formatter.\n\nExamples\n\nsys = PSY.pm2ps_dict(pm_data, configpath = \"ACTIVSg25k_validation.json\",\n                    bus_name_formatter = x->string(x[\"name\"]*\"-\"*string(x[\"index\"])),\n                    load_name_formatter = x->strip(join(x[\"source_id\"], \"_\")))\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.propagate_topology_status!-Tuple{Dict{String,#s574} where #s574}","page":"PowerSystems","title":"PowerSystems.propagate_topology_status!","text":"propagate_topology_status!(data::Dict{String,#s574} where #s574)\n\n\nfinds active network buses and branches that are not necessary for the computation and sets their status to off.\n\nWorks on a PowerModels data dict, so that a it can be used without a GenericPowerModel object\n\nWarning: this implementation has quadratic complexity, in the worst case\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.read_gen!-Tuple{System,Any,Dict{Int64,Bus}}","page":"PowerSystems","title":"PowerSystems.read_gen!","text":"read_gen!(sys::System, data::Any, bus_number_to_bus::Dict{Int64,Bus}; kwargs...)\n\n\nTransfer generators to ps_dict according to their classification\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.replicate-Tuple{Dict{String,#s573} where #s573,Int64}","page":"PowerSystems","title":"PowerSystems.replicate","text":"replicate(sn_data::Dict{String,#s573} where #s573, count::Int64; global_keys) -> Dict{String,Any}\n\n\nTurns in given single network data in multinetwork data with a count replicate of the given network.  Note that this function performs a deepcopy of the network data.  Significant multinetwork space savings can often be achieved by building application specific methods of building multinetwork with minimal data replication.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.row_to_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.row_to_dict","text":"row_to_dict(row_data::Any, columns::Any) -> Dict{String,Any}\n\n\ntakes a row from a matrix and assigns the values names\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.row_to_typed_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.row_to_typed_dict","text":"row_to_typed_dict(row_data::Any, columns::Any) -> Dict{String,Any}\n\n\ntakes a row from a matrix and assigns the values names and types\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.select_largest_component-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.select_largest_component","text":"select_largest_component(data::Dict{String,Any}) -> Any\n\n\ndetermines the largest connected component of the network and turns everything else off\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.services_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.services_csv_parser!","text":"services_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nservices_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd services to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.simplify_cost_terms!-Tuple{Dict{String,#s568} where #s568}","page":"PowerSystems","title":"PowerSystems.simplify_cost_terms!","text":"simplify_cost_terms!(data::Dict{String,#s568} where #s568) -> Tuple{Set{Int64},Set{Int64}}\n\n\ntrims zeros from higher order cost terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.split_line-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems.split_line","text":"split_line(mp_line::AbstractString) -> Array{_A,1} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.standardize_cost_terms!-Tuple{Dict{String,#s563} where #s563}","page":"PowerSystems","title":"PowerSystems.standardize_cost_terms!","text":"standardize_cost_terms!(data::Dict{String,#s563} where #s563; order)\n\n\nensures all polynomial costs functions have the same number of terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.validate_struct-Tuple{System,PowerSystemType}","page":"PowerSystems","title":"PowerSystems.validate_struct","text":"validate_struct(sys::System, value::PowerSystemType) -> Bool\n\n\nValidates an instance of a PowerSystemType against System data. Returns true if the instance is valid.\n\nUsers implementing this function for custom types should consider implementing InfrastructureSystems.validate_struct instead if the validation logic only requires data contained within the instance.\n\n\n\n\n\n","category":"method"},{"location":"#PowerSystems.jl-1","page":"Introduction","title":"PowerSystems.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerSystems","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"PowerSystems.jl is a Julia package Power Systems Modeling that provides a rigorous data model using Julia structures to enable power systems analysis in addition to stand-alone system analysis tools and model building. Each device is defined using a Julia Structure embedded in a hierarchy for types. This enables categorization of the devices by their operational characteristics and the data required to model them.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The storage of power system data has traditionally been done with general use tables based on the power flow problem. However, tables are not inherently designed to store data with mixed data representations or hierarchal structures. This limitation was addressed in the early 1990's with the advent of automation, spurred by increasingly complex data needs for power systems operations. The industry required standardized models to exchange larger and more complex sets of information, and so resorted to an object-oriented data model. The CIM was developed and later made a standard maintained by the IEC - Technical Committee 57 Working Group 13. The aim was to provide a standard definition for power system components that could be used in automated EMS and asset-management databases.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From the computer engineering point-of-view, using tables would require to re-write a lot of code. In most languages with strongly type hierarchies, using a tree structure it is advantageous. This is particularly relevant for code re-use and data encapsulation. Collecting all potential devices is not possible; neither is it desirable. However, it is necessary to have the capability to extend the data model such that different user can store their data in an organized ontology.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For instance, take the data hierarchy for thermal generation devices shown in Fig. \\ref{fig:PS_thermal}. Generation is classified by the distinctive operational characteristics of the generators and then further categorized by the data required to model a specific technology.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For more detailed documentation of each object in the library, see the API/PowerSystems page.","category":"page"},{"location":"#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"] add PowerSystems","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"] add PowerSystems#master","category":"page"},{"location":"developer/style/#Julia-Coding-Style-Guide-for-PowerSystems.jl-1","page":"Style Guide","title":"Julia Coding Style Guide for PowerSystems.jl","text":"","category":"section"},{"location":"developer/style/#Goals-1","page":"Style Guide","title":"Goals","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Define a straightforward set of rules that lead to consistent, readable code.\nDevelopers focus on producing high quality code, not how to format it.","category":"page"},{"location":"developer/style/#Base-1","page":"Style Guide","title":"Base","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Read the official","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Julia style guide as reference.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Read Julia contribution guidelines, notably its line length limit.\nRead Julia guidelines for docstrings.\nRead BlueStyle style guide.\nConsider using a plugin that configures your text editor to use EditorConfig settings.\nConsider using JuliaFormatter.jl.","category":"page"},{"location":"developer/style/#Code-Organization-1","page":"Style Guide","title":"Code Organization","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Import standard modules, then 3rd-party modules, then yours. Include a blank line between each group.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"<!– ### Modules:  TODO –>","category":"page"},{"location":"developer/style/#Comments-1","page":"Style Guide","title":"Comments","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Use comments to describe non-obvious or non-trivial aspects of code. Describe why something was done but not how. The \"how\" should be apparent from the code itself.\nUse complete sentences and proper grammar.\nInclude a space in between the \"#\" and the first word of the comment.\nDon't use block comments for Julia code. Prefer using the # prefix. If you are commenting code, consider deleting it instead.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"for i in 1:100\n    #=\n    arr[i] += a[i] * x^2\n    arr[i] += b[i] * x\n    arr[i] += c[i]\n    =#\n    nothing\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"for i in 1:100\n    # arr[i] += a[i] * x^2\n    # arr[i] += b[i] * x\n    # arr[i] += c[i]\n    nothing\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Use these tags in comments to describe known work:\nTODO:  tasks that need to be done\nFIXME:  code that needs refactoring\nBUG:  known bug that exists. Should include a bug ID and tracking system.\nPERF:  known performance limitation that needs improvement","category":"page"},{"location":"developer/style/#Constructors-1","page":"Style Guide","title":"Constructors","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Per guidance from Julia documentation, use inner constructors to enforce restrictions on parameters or to allow construction of self-referential objects. Use outer constructors to provide default values or to perform customization.\nDocument the reason why the outer constructor is different.\nNote that the compiler will provide a default constructor with all struct","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"members if no inner constructor is defined.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"When creating a constructor use function Foo() instead of Foo() = ....\nOne exception is the case where one file has all single-line functions.\nPrefer explicit return in multi line functions instead of the implicit return.","category":"page"},{"location":"developer/style/#Exceptions-1","page":"Style Guide","title":"Exceptions","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Use exceptions for unexpected errors and not for normal error handling.\nDetection of an unsupported data format from a user should likely throw\nan exception and terminate the application.\nDo not use try/catch to handle retrieving a potentially-missing key from a\ndictionary.\nUse @assert statements to guard against programming errors. Do not use them after detecting bad user input. Note that they may be compiled out in release builds.","category":"page"},{"location":"developer/style/#Globals-1","page":"Style Guide","title":"Globals","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Global constants should be written in upper case and be declared const.\nconst UPPER_CASE_VARIABLE = π / 2\nIf global variables are needed, prefix them with g_.\nDon't use magic numbers. Instead, define const GLOBALS or Enums (Julia @enum).","category":"page"},{"location":"developer/style/#One-line-Conditionals-1","page":"Style Guide","title":"One-line Conditionals","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Julia code base uses this idiom frequently: <condition> && <statement>.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"See Example:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"function fact(n::Int)\n   n >= 0 || error(\"n must be non-negative\")\n   n == 0 && return 1\n   n * fact(n-1)\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"This is acceptable for simple code as in this example. However, in general, prefer to write out an entire if statement.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Ternary operators provide a way to write clean, concise code.  Use good judgement.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"y = x > 0 ? x : -x","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"There are many examples in our codebase that use the form <cond> ? <statement> : <statement>. These may be expressed much more clearly in an if/else statement.","category":"page"},{"location":"developer/style/#Unit-Tests-1","page":"Style Guide","title":"Unit Tests","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"All code should be tested.","category":"page"},{"location":"developer/style/#Whitespace-1","page":"Style Guide","title":"Whitespace","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"If many function arguments cause the line length to be exceeded, put one","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"argument per line. In some cases it may make sense to pair some variables on the same line.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"function foo(\n    var1::String,\n    var2::String,\n    var3::String,\n    var6::T,\n) where T <: Number\n    println(\"hello world\")\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"function foo(var1::String,\n             var2::String,\n             var3::String,\n             var6::T) where T <: Number\n    println(\"hello world\")\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Surround equal signs with spaces when passing keyword args to a","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"function or defining default values in function declarations.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Prefer elements in an array on separate lines. Follow opening square bracket with a new line and use closing square bracket on a separate new line.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"nodes = [\n    Node(1),\n    Node(2),\n    Node(3),\n    Node(4),\n    Node(5),\n];","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"nodes = [Node(1), Node(2), Node(3), Node(4), Node(5)];","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Prefer a similar rule for Dictionaries, Sets and other data structures. Use your judgement when data structures can neatly fit on a single line.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Do not right-align equal signs when assigning groups of variables. It causes unnecessary changes whenever someone adds a new variable with a longer name.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"x   = 1\nfoo = 2","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"x = 1\nfoo = 2","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Define abstract types on one line. Given the lack of IDE support for Julia, this makes it easier to find type definitions.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"abstract type\n    Foo\nend","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"abstract type Foo end","category":"page"},{"location":"developer/style/#Exports-1","page":"Style Guide","title":"Exports","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"export should be used to make it easy for the user to use a symbol from the REPL, an interactive interface or a program.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"You may need to use export when extending functionality of other packages that have also exported the same symbol.","category":"page"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"All symbols that have export must have proper docstrings.","category":"page"},{"location":"developer/style/#References-1","page":"Style Guide","title":"References","text":"","category":"section"},{"location":"developer/style/#","page":"Style Guide","title":"Style Guide","text":"The Zen of Python.","category":"page"},{"location":"developer/logging/#Logging-1","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"This document describes logging facilities available in the PowerSystems module. The examples assume the following imports:","category":"page"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"import Logging\nimport PowerSystems: configure_logging, open_file_logger, MultiLogger, LogEventTracker","category":"page"},{"location":"developer/logging/#Use-Cases-1","page":"Logging","title":"Use Cases","text":"","category":"section"},{"location":"developer/logging/#Enable-logging-in-REPL-or-Jupyter-Notebook-1","page":"Logging","title":"Enable logging in REPL or Jupyter Notebook","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"Use configure_logging to create a logger with your preferences (console and/or file, levels, etc.).","category":"page"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"Note: log messages are not automatically flushed to files. Call flush(logger) to make this happen.","category":"page"},{"location":"developer/logging/#Example-1","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\nflush(logger)\n@error \"some error\"\nclose(logger)","category":"page"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"The function provides lots of customization. Refer to the docstring for complete details.","category":"page"},{"location":"developer/logging/#Log-to-console-and-file-in-an-application-or-unit-test-environment.-1","page":"Logging","title":"Log to console and file in an application or unit test environment.","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"Create a MultiLogger from Logging.ConsoleLogger and Logging.SimpleLogger. Use open_file_logger to guarantee that all messages get flushed to the file.","category":"page"},{"location":"developer/logging/#Example-2","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"console_logger = ConsoleLogger(stderr, Logging.Error)\n\nopen_file_logger(\"log.txt\", Logging.Info) do file_logger\n    multi_logger = MultiLogger([console_logger, file_logger])\n    global_logger(multi_logger)\n    \n    do_stuff()\nend","category":"page"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"Note: If someone may execute the code in the REPL then wrap that code in a try/finally block and reset the global logger upon exit.","category":"page"},{"location":"developer/logging/#Example-3","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"function run_tests()\n    console_logger = ConsoleLogger(stderr, Logging.Error)\n    \n    open_file_logger(\"log.txt\", Logging.Info) do file_logger\n        multi_logger = MultiLogger([console_logger, file_logger])\n        global_logger(multi_logger)\n        \n        do_stuff()\n    end\nend\n\nlogger = global_logger()\n\ntry\n    run_tests()\nfinally\n    # Guarantee that the global logger is reset.\n    global_logger(logger)\n    nothing\nend","category":"page"},{"location":"developer/logging/#Suppress-frequent-messages-1","page":"Logging","title":"Suppress frequent messages","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"The standard Logging module in Julia provides a method to suppress messages. Tag the log message with maxlog=X.","category":"page"},{"location":"developer/logging/#Example-4","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"for i in range(1, length=100)\n    @error \"something happened\" i maxlog=2\nend","category":"page"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"Only 2 messages will get logged.","category":"page"},{"location":"developer/logging/#Get-a-summary-of-log-messages-1","page":"Logging","title":"Get a summary of log messages","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"By default a MultiLogger creates a LogEventTracker that keeps counts of all messages. Call report_log_summary after execution.","category":"page"},{"location":"developer/logging/#Example-5","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\n\n# Include a summary in the log file.\n@info report_log_summary(logger)\nclose(logger)","category":"page"},{"location":"developer/logging/#Example-output-1","page":"Logging","title":"Example output","text":"","category":"section"},{"location":"developer/logging/#","page":"Logging","title":"Logging","text":"julia> for i in range(1, length=100)\n           @info \"hello\" maxlog=2\n           @warn \"beware\" maxlog=2\n       end\njulia> @info report_log_summary(logger)\n┌ Info:\n│ Log message summary:\n│\n│ 0 Error events:\n│\n│ 1 Warn events:\n│   count=100 at REPL[19]:3\n│     example message=\"beware\"\n│     suppressed=98\n│\n│ 1 Info events:\n│   count=100 at REPL[19]:2\n│     example message=\"hello\"\n└     suppressed=98","category":"page"}]
}
