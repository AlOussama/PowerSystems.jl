var documenterSearchIndex = {"docs":
[{"location":"man/data/#Saving-and-Viewing-PowerSystems-Data","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"PowerSystems data can be serialized and deserialized in JSON.","category":"page"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"PowerSystems.to_json(system, \"system.json\")\nsystem = System(\"system.json\")","category":"page"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"It can be useful to view and filter the PowerSystems data in this format. There are many tools available to browse JSON data.","category":"page"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"Here is an example GUI tool that is available online in a browser.","category":"page"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"The command line utility jq offers even more features. The rest of this document provides example commands.","category":"page"},{"location":"man/data/#View-the-entire-file-pretty-printed.","page":"Saving and Viewing PowerSystems Data","title":"View the entire file pretty-printed.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq . system.json","category":"page"},{"location":"man/data/#View-the-PowerSystems-component-hierarchy.","page":"Saving and Viewing PowerSystems Data","title":"View the PowerSystems component hierarchy.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components | keys' system.json\njq '.components.Devices | keys' system.json\njq '.components.Devices.StaticInjection | keys' system.json\njq '.components.Devices.StaticInjection.Generator | keys' system.json","category":"page"},{"location":"man/data/#View-specific-components.","page":"Saving and Viewing PowerSystems Data","title":"View specific components.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard' system.json\njq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard[0]' system.json","category":"page"},{"location":"man/data/#Filter-on-a-parameter.","page":"Saving and Viewing PowerSystems Data","title":"Filter on a parameter.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | select(.name == \"107_CC_1\")' system.json\njq '.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | select(.operation_cost.capacity > 3)' system.json","category":"page"},{"location":"man/data/#Output-a-table-with-select-fields.","page":"Saving and Viewing PowerSystems Data","title":"Output a table with select fields.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq -r '[\"name\", \"econ.capacity\"], (.components.Device.StaticInjection.Generator.ThermalGen.ThermalStandard | .[] | [.name, .operation_cost.capacity]) | @tsv' system.json","category":"page"},{"location":"man/data/#View-the-forecast-types-and-initial_time-values.","page":"Saving and Viewing PowerSystems Data","title":"View the forecast types and initial_time values.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data | keys' system.json","category":"page"},{"location":"man/data/#View-the-fields-of-a-forecast.","page":"Saving and Viewing PowerSystems Data","title":"View the fields of a forecast.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data[\"PowerSystems.ForecastKey(2020-01-01T00:00:00, Deterministic{Bus})\"][0] | keys'","category":"page"},{"location":"man/data/#View-the-value-of-every-field-in-an-array-of-forecasts.","page":"Saving and Viewing PowerSystems Data","title":"View the value of every field in an array of forecasts.","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"jq '.forecasts.data[\"PowerSystems.ForecastKey(2020-01-01T00:00:00, Deterministic{Bus})\"] | .[].initial_time'","category":"page"},{"location":"man/data/#Contents","page":"Saving and Viewing PowerSystems Data","title":"Contents","text":"","category":"section"},{"location":"man/data/","page":"Saving and Viewing PowerSystems Data","title":"Saving and Viewing PowerSystems Data","text":"Pages = [\n  \"man/data_requirements_table.md\",\n]","category":"page"},{"location":"developer/extending_parsing/#Extending-PowerSystemTableData-parsing","page":"Extending Parsing","title":"Extending PowerSystemTableData parsing","text":"","category":"section"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"This page describes how developers should read columns from raw data files.","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"The main point is that you should not read individual hard-coded column names from DataFrames. The parsing code includes mapping functionality that allows you to use PowerSystems-standard names while letting the users define their own custom names.","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"Note:  This assumes that you are familiar with this user workflow.","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"Procedure","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"Add an entry to the array of parameters for your category in src/descriptors/power_system_inputs.json according to the following:\nUse snake_case for the name field.\nThe fields name and description are required.\nTry to use a name that is generic and not specific to one dataset.\nIt is recommended that you define unit.\nIf PowerSystems expects the value to be per-unit then you must specify system_per_unit=true.\nPowerSystems has two commonly-used datasets with customized user config files: PowerSystemsTestData and RTS_GMLC. Update both of these files and submit pull requests.\nParse the raw data like in this example:","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"\nfunction demo_bus_csv_parser!(data::PowerSystemTableData)\n    for bus in iterate_rows(data, BUS::InputCategory)\n        @show bus.name, bus.max_active_power, bus.max_reactive_power\n    end\nend","category":"page"},{"location":"developer/extending_parsing/","page":"Extending Parsing","title":"Extending Parsing","text":"iterate_rows returns a NamedTuple where each name defined in src/descriptors/power_system_inputs.json is a field.","category":"page"},{"location":"man/parsing/#Constructing-a-System-from-raw-data","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"","category":"section"},{"location":"man/parsing/#Supported-Formats","page":"Constructing a System from raw data","title":"Supported Formats","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems table data\nMATPOWER (parsed by PowerModels)\nPSS/E (parsed by PowerModels)","category":"page"},{"location":"man/parsing/#PowerSystems-Table-Data","page":"Constructing a System from raw data","title":"PowerSystems Table Data","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"This is a custom format that allows users to define power system component data by category and column with custom names, types, and units.","category":"page"},{"location":"man/parsing/#Categories","page":"Constructing a System from raw data","title":"Categories","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Components for each category must be defined in their own CSV file. The following categories are currently supported:","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"branch.csv\nbus.csv\ndc_branch.csv\ngen.csv\nload.csv\nreserves.csv\nstorage.csv","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"These must reside in the directory passed when constructing PowerSystemTableData.","category":"page"},{"location":"man/parsing/#Customization","page":"Constructing a System from raw data","title":"Customization","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Generate a configuration file (such as user_descriptors.yaml) from the defaults, which are stored in src/descriptors/power_system_inputs.json.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"python ./bin/generate_config_file.py ./user_descriptors.yaml","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Next, edit this file with your customizations.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Note that the user-specific customizations are stored in YAML rather than JSON to allow for easier editing. The next few sections describe changes you can make to this YAML file.  Do not edit the default JSON file.","category":"page"},{"location":"man/parsing/#Column-names","page":"Constructing a System from raw data","title":"Column names","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems provides a mapping capability that allows you to keep your own column names.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"For example, when parsing raw data for a generator the code expects a column called name. If the raw data instead defines that column as GEN UID then you can change the custom_name field under the generator category to GEN UID in your YAML file. ","category":"page"},{"location":"man/parsing/#Per-unit-conversion","page":"Constructing a System from raw data","title":"Per-unit conversion","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems defines whether it expects a column value to be per-unit in power_system_inputs.json. If it expects per-unit but your values are not per-unit then you can set system_per_unit: false in user_descriptors.yaml and PowerSystems will automatically convert the values.","category":"page"},{"location":"man/parsing/#Unit-conversion","page":"Constructing a System from raw data","title":"Unit conversion","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems provides a limited set of unit conversions. For example, if power_system_inputs.json indicates that a value's unit is degrees but your values are in radians then you can set unit_conversion: radian in your YAML file.","category":"page"},{"location":"man/parsing/#Example-file","page":"Constructing a System from raw data","title":"Example file","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Refer to RTS_GMLC for an example.","category":"page"},{"location":"man/parsing/#Time-series-data","page":"Constructing a System from raw data","title":"Time series data","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems requires a metadata file that maps components to their time series data in order to be able to automatically construct forecasts from raw data files. The following fields are required for each time array:","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"simulation:  User description of simulation\ncategory:  Type of component. Must map to PowerSystems abstract types (Bus, ElectricLoad, Generator, LoadZone, Reserve)\ncomponent_name:  Name of component\nlabel:  Name of accessor function that can be called on the component to retrieve the forecasted value.\nscaling_factor:  Controls normalization of the data. Use 1.0 for pre-normalized data. Use 'Max' to divide the timeseries by the max value in the column. Use any float for a custom scaling factor.\ndata_file:  Path to the time series data file","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems supports this metadata in either CSV or JSON formats. Refer to RTS_GMLC for an example.","category":"page"},{"location":"man/parsing/#Performance-considerations","page":"Constructing a System from raw data","title":"Performance considerations","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"By default PowerSystems stores time series data in HDF5 files. It does not keep all of the data in memory. This means that every time you access a forecast PowerSystems will have to read the data from storage, which will add latency. If you know ahead of time that all of your data will fit in memory then you can change this behavior by passing time_series_in_memory = true when you create the System.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"If the time series data is stored in HDF5 then PowerSystems will use the tmp filesystem by default. You can change this by passing time_series_directory = X when you create the System. This is required if the time series data is larger than the amount of tmp space available.","category":"page"},{"location":"man/parsing/#Custom-construction-of-generators","page":"Constructing a System from raw data","title":"Custom construction of generators","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"PowerSystems supports custom construction of subtypes of the abstract type Generator based on fuel and type. The parsing code detects these fields in the raw data and then constructs the concrete type listed in the passed generator mapping file. The default file is src/parsers/generator_mapping.yaml. You can override this behavior by specifying your own file when constructing PowerSystemTableData.","category":"page"},{"location":"man/parsing/#System-creation-with-custom-config-files","page":"Constructing a System from raw data","title":"System creation with custom config files","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"Here is an example of how to construct a System with all customizations listed on this page.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"data_dir = \"/data/my-data-dir\"\nbase_power = 100.0\ndescriptors = \"./user_descriptors.yaml\"\ntimeseries_metadata_file = \"./timeseries_pointers.json\"\ngenerator_mapping_file = \"./generator_mapping.yaml\"\ndata = PowerSystemTableData(\n    data_dir,\n    base_power,\n    descriptors;\n    timeseries_metadata_file = timeseries_metadata_file,\n    generator_mapping_file = generator_mapping_file,\n)\nsys = System(data, time_series_in_memory = true)","category":"page"},{"location":"man/parsing/#MATPOWER-/-PSS/E","page":"Constructing a System from raw data","title":"MATPOWER / PSS/E","text":"","category":"section"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"The following code will create a System from a MATPOWER or PSS/E file by first parsing it with PowerModels.","category":"page"},{"location":"man/parsing/","page":"Constructing a System from raw data","title":"Constructing a System from raw data","text":"sys = System(PowerSystems.PowerModelsData(\"./case5.m\"))","category":"page"},{"location":"developer/tests/#Tests","page":"Tests","title":"Tests","text":"","category":"section"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"Unit tests can be executed in the REPL by executing the following:","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"julia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"The unit test module supports several customizations to aid development and debug.","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"Run a subset of tests in the REPL:","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"julia> push!(ARGS, \"<test_filename_without_.jl>\")\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"Change console logging level (defaults to Error):","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"julia> ENV[\"PS_CONSOLE_LOG_LEVEL\"] = Info\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"Change log file (./power-systems.log) logging level (defaults to Info):","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"julia> ENV[\"PS_LOG_LEVEL\"] = Debug\njulia> include(\"test/runtests.jl\")","category":"page"},{"location":"developer/tests/","page":"Tests","title":"Tests","text":"The unit test module appends a summary of all log message counts to the log file.  If a message is logged too frequently then consider tagging that message with maxlog=X to suppress it.","category":"page"},{"location":"api/PowerSystems/#PowerSystems","page":"PowerSystems","title":"PowerSystems","text":"","category":"section"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"CurrentModule = PowerSystems\nDocTestSetup  = quote\n    using PowerSystems\nend","category":"page"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"API documentation","category":"page"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"Pages = [\"PowerSystems.md\"]","category":"page"},{"location":"api/PowerSystems/#Index","page":"PowerSystems","title":"Index","text":"","category":"section"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"Pages = [\"PowerSystems.md\"]","category":"page"},{"location":"api/PowerSystems/#Exported","page":"PowerSystems","title":"Exported","text":"","category":"section"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"Modules = [PowerSystems]\nPrivate = false","category":"page"},{"location":"api/PowerSystems/#PowerSystems.PowerSystems","page":"PowerSystems","title":"PowerSystems.PowerSystems","text":"Module for constructing self-contained power system objects.\n\n\n\n\n\n","category":"module"},{"location":"api/PowerSystems/#PowerSystems.AC1A","page":"PowerSystems","title":"PowerSystems.AC1A","text":"mutable struct AC1A <: AVR\n    Tr::Float64\n    Tb::Float64\n    Tc::Float64\n    Ka::Float64\n    Ta::Float64\n    Va_lim::Tuple{Float64, Float64}\n    Te::Float64\n    Kf::Float64\n    Tf::Float64\n    Kc::Float64\n    Kd::Float64\n    Ke::Float64\n    E_sat::Tuple{Float64, Float64}\n    Se::Tuple{Float64, Float64}\n    Vr_lim::Tuple{Float64, Float64}\n    V_ref::Float64\n    saturation_coeffs::Tuple{Float64, Float64}\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nThis excitation systems consists of an alternator main exciter feeding its output via non-controlled rectifiers. The exciter does not employ self-excitation, and the voltage regulator power is taken from a source that is not affected by external transients. Parameters of IEEE Std 421.5 Type AC1A Excitacion System. ESAC1A in PSSE and PSLF\n\nArguments\n\nTr::Float64: Regulator input filter time constant in s, validation range: (0, nothing)\nTb::Float64: Regulator denominator (lag) time constant in s, validation range: (0, nothing)\nTc::Float64: Regulator numerator (lead) time constant in s, validation range: (0, nothing)\nKa::Float64: Regulator output gain, validation range: (0, nothing)\nTa::Float64: Regulator output time constant in s, validation range: (0, nothing)\nVa_lim::Tuple{Float64, Float64}: Limits for regulator output (Vamin, Vamax)\nTe::Float64: Exciter field time constant in s, validation range: (&quot;eps()&quot;, nothing)\nKf::Float64: Rate feedback excitation system stabilizer gain, validation range: (0, nothing)\nTf::Float64: Rate feedback time constant, validation range: (&quot;eps()&quot;, nothing)\nKc::Float64: Rectifier loading factor proportional to commutating reactance, validation range: (0, nothing)\nKd::Float64: Demagnetizing factor, function of exciter alternator reactances, validation range: (0, nothing)\nKe::Float64: Exciter field proportional constant, validation range: (0, nothing)\nE_sat::Tuple{Float64, Float64}: Exciter output voltage for saturation factor: (E1, E2)\nSe::Tuple{Float64, Float64}: Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))\nVr_lim::Tuple{Float64, Float64}: Limits for exciter field voltage: (Vrmin, Vrmax)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\nsaturation_coeffs::Tuple{Float64, Float64}: Coefficients (A,B) of the function: Se(x) = B(x - A)^2/x\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVm: Sensed terminal voltage,\nVr1: Lead-lag state,\nVr2: Regulator output state,\nVe: Integrator output state,\nVr3: Feedback output state\n\nn_states::Int64: AC1A has 5 states\nstates_types::Vector{StateTypes.StateType}: AC1A has 5 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AGC","page":"PowerSystems","title":"PowerSystems.AGC","text":"mutable struct AGC <: Service\n    name::String\n    available::Bool\n    bias::Float64\n    K_p::Float64\n    K_i::Float64\n    K_d::Float64\n    delta_t::Float64\n    area::Union{Nothing, Area}\n    initial_ace::Float64\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbias::Float64\nK_p::Float64: PID Proportional Constant\nK_i::Float64: PID Integral Constant\nK_d::Float64: PID Derrivative Constant\ndelta_t::Float64: PID Discretization period [Seconds]\narea::Union{Nothing, Area}: the area controlled by the AGC\ninitial_ace::Float64: PID Discretization period [Seconds]\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRFixed","page":"PowerSystems","title":"PowerSystems.AVRFixed","text":"mutable struct AVRFixed <: AVR\n    Vf::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a AVR that returns a fixed voltage to the rotor winding\n\nArguments\n\nVf::Float64: Fixed voltage field applied to the rotor winding, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: Fixed AVR has no states\nn_states::Int64: Fixed AVR has no states\nstates_types::Vector{StateTypes.StateType}: Fixed AVR has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRSimple","page":"PowerSystems","title":"PowerSystems.AVRSimple","text":"mutable struct AVRSimple <: AVR\n    Kv::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a simple proportional AVR in the derivative of EMF i.e. an integrator controller on EMF\n\nArguments\n\nKv::Float64: Proportional Gain, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVf: field voltage\n\nn_states::Int64: Fixed AVR has 1 states\nstates_types::Vector{StateTypes.StateType}: Simple AVR has 1 differential states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRTypeI","page":"PowerSystems","title":"PowerSystems.AVRTypeI","text":"mutable struct AVRTypeI <: AVR\n    Ka::Float64\n    Ke::Float64\n    Kf::Float64\n    Ta::Float64\n    Te::Float64\n    Tf::Float64\n    Tr::Float64\n    Vr_max::Float64\n    Vr_min::Float64\n    Ae::Float64\n    Be::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an Automatic Voltage Regulator Type I - Resembles IEEE Type DC1\n\nArguments\n\nKa::Float64: Amplifier Gain, validation range: (0, nothing)\nKe::Float64: Field circuit integral deviation, validation range: (0, nothing)\nKf::Float64: Stabilizer Gain in s * pu/pu, validation range: (0, nothing)\nTa::Float64: Amplifier Time Constant in s, validation range: (0, nothing)\nTe::Float64: Field Circuit Time Constant in s, validation range: (0, nothing)\nTf::Float64: Stabilizer Time Constant in s, validation range: (0, nothing)\nTr::Float64: Voltage Measurement Time Constant in s, validation range: (0, nothing)\nVr_max::Float64: Maximum regulator voltage in pu, validation range: (0, nothing)\nVr_min::Float64: Minimum regulator voltage in pu, validation range: (0, nothing)\nAe::Float64: 1st ceiling coefficient, validation range: (0, nothing)\nBe::Float64: 2nd ceiling coefficient, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVf: Voltage field,\nVr1: Amplifier State,\nVr2: Stabilizing Feedback State,\nVm: Measured voltage\n\nn_states::Int64: The AVR Type I has 4 states\nstates_types::Vector{StateTypes.StateType}: AVR Type I has 4 differential states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AVRTypeII","page":"PowerSystems","title":"PowerSystems.AVRTypeII","text":"mutable struct AVRTypeII <: AVR\n    K0::Float64\n    T1::Float64\n    T2::Float64\n    T3::Float64\n    T4::Float64\n    Te::Float64\n    Tr::Float64\n    Vr_max::Float64\n    Vr_min::Float64\n    Ae::Float64\n    Be::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of an Automatic Voltage Regulator Type II -  Typical static exciter model\n\nArguments\n\nK0::Float64: Regulator Gain, validation range: (0, nothing)\nT1::Float64: First Pole in s, validation range: (0, nothing)\nT2::Float64: First zero in s, validation range: (0, nothing)\nT3::Float64: First Pole in s, validation range: (0, nothing)\nT4::Float64: First zero in s, validation range: (0, nothing)\nTe::Float64: Field Circuit Time Constant in s, validation range: (0, nothing)\nTr::Float64: Voltage Measurement Time Constant in s, validation range: (0, nothing)\nVr_max::Float64: Maximum regulator voltage in pu, validation range: (0, nothing)\nVr_min::Float64: Minimum regulator voltage in pu, validation range: (0, nothing)\nAe::Float64: 1st ceiling coefficient, validation range: (0, nothing)\nBe::Float64: 2nd ceiling coefficient, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVf: Voltage field,\nVr1: First Lead-Lag state,\nVr2: Second lead-lag state,\nVm: Measured voltage\n\nn_states::Int64: AVR Type II has 4 states\nstates_types::Vector{StateTypes.StateType}: AVR Type II has 4 differential states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AggregationTopology","page":"PowerSystems","title":"PowerSystems.AggregationTopology","text":"Represents a geographical region of system components.\n\nAll subtypes must implement the method getaggregationtopology_accessor.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AndersonFouadMachine","page":"PowerSystems","title":"PowerSystems.AndersonFouadMachine","text":"mutable struct AndersonFouadMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 6-states synchronous machine: Anderson-Fouad model\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nψq: q-axis stator flux,\nψd: d-axis stator flux,\neq_p: q-axis transient voltage,\ned_p: d-axis transient voltage,\neq_pp: q-axis subtransient voltage,\ned_pp: d-axis subtransient voltage\n\nn_states::Int64: AndersonFouadMachine has 6 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Arc","page":"PowerSystems","title":"PowerSystems.Arc","text":"mutable struct Arc <: Topology\n    from::Bus\n    to::Bus\n    internal::InfrastructureSystemsInternal\nend\n\nA topological Arc.\n\nArguments\n\nfrom::Bus: The initial bus\nto::Bus: The terminal bus\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Area","page":"PowerSystems","title":"PowerSystems.Area","text":"mutable struct Area <: AggregationTopology\n    name::String\n    peak_active_power::Float64\n    peak_reactive_power::Float64\n    load_response::Float64\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nA collection of buses for control purposes.\n\nArguments\n\nname::String\npeak_active_power::Float64\npeak_reactive_power::Float64\nload_response::Float64\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.AverageConverter","page":"PowerSystems","title":"PowerSystems.AverageConverter","text":"mutable struct AverageConverter <: Converter\n    rated_voltage::Float64\n    rated_current::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of an average converter model\n\nArguments\n\nrated_voltage::Float64: rated voltage, validation range: (0, nothing)\nrated_current::Float64: rated VA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: AverageConverter has no states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.BaseMachine","page":"PowerSystems","title":"PowerSystems.BaseMachine","text":"mutable struct BaseMachine <: Machine\n    R::Float64\n    Xd_p::Float64\n    eq_p::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Classic Machine: GENCLS in PSSE and PSLF\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd_p::Float64: Reactance after EMF in machine per unit, validation range: (0, nothing)\neq_p::Float64: Fixed EMF behind the impedance, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: BaseMachine has no states\nn_states::Int64: BaseMachine has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Bus","page":"PowerSystems","title":"PowerSystems.Bus","text":"mutable struct Bus <: Topology\n    number::Int64\n    name::String\n    bustype::Union{Nothing, BusTypes.BusType}\n    angle::Union{Nothing, Float64}\n    magnitude::Union{Nothing, Float64}\n    voltage_limits::Union{Nothing, Min_Max}\n    base_voltage::Union{Nothing, Float64}\n    area::Union{Nothing, Area}\n    load_zone::Union{Nothing, LoadZone}\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nA power-system bus.\n\nArguments\n\nnumber::Int64: number associated with the bus\nname::String: the name of the bus\nbustype::Union{Nothing, BusTypes.BusType}: bus type\nangle::Union{Nothing, Float64}: angle of the bus in radians, validation range: (-1.571, 1.571), action if invalid: error\nmagnitude::Union{Nothing, Float64}: voltage as a multiple of basevoltage, validation range: voltage_limits, action if invalid: warn\nvoltage_limits::Union{Nothing, Min_Max}: limits on the voltage variation as multiples of basevoltage\nbase_voltage::Union{Nothing, Float64}: the base voltage in kV, validation range: (0, nothing), action if invalid: error\narea::Union{Nothing, Area}: the area containing the bus\nload_zone::Union{Nothing, LoadZone}: the load zone containing the bus\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Bus-Tuple{Any,Any,String,Any,Any,Any,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.Bus","text":"Bus(number::Any, name::Any, bustype::String, angle::Any, voltage::Any, voltage_limits::Any, base_voltage::Any, area::Any, load_zone::Any; ext) -> Bus\n\n\nAllows construction with bus type specified as a string for legacy code.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.CurrentControl","page":"PowerSystems","title":"PowerSystems.CurrentControl","text":"mutable struct CurrentControl <: InnerControl\n    kpv::Float64\n    kiv::Float64\n    kffv::Float64\n    rv::Float64\n    lv::Float64\n    kpc::Float64\n    kic::Float64\n    kffi::Float64\n    ωad::Float64\n    kad::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of an inner loop current control PID using virtual impedance based on D'Arco, Suul and Fosso. \"A Virtual Synchronous Machine implementation for distributed control of power converters in SmartGrids.\" Electric Power Systems Research 122 (2015) 180–197.\n\nArguments\n\nkpv::Float64: voltage controller proportional gain, validation range: (0, nothing)\nkiv::Float64: voltage controller integral gain, validation range: (0, nothing)\nkffv::Float64: Binary variable to enable feed-forward gain of voltage., validation range: (0, nothing)\nrv::Float64: virtual resistance, validation range: (0, nothing)\nlv::Float64: virtual inductance, validation range: (0, nothing)\nkpc::Float64: current controller proportional gain, validation range: (0, nothing)\nkic::Float64: current controller integral gain, validation range: (0, nothing)\nkffi::Float64: Binary variable to enable feed-forward gain of current, validation range: (0, nothing)\nωad::Float64: active damping filter cutoff frequency (rad/sec), validation range: (0, nothing)\nkad::Float64: active damping gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the VirtualInertia model are:\n\nξd_ic: d-axis integrator state of the PI voltage controller,\nξq_ic: q-axis integrator state of the PI voltage controller,\nγd_ic: d-axis integrator state of the PI current controller,\nγq_ic: q-axis integrator state of the PI current controller,\nϕd_ic: d-axis low-pass filter of active damping,\nϕq_ic: q-axis low-pass filter of active damping\n\nn_states::Int64: CurrentControl has 6 states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.DynamicInjection","page":"PowerSystems","title":"PowerSystems.DynamicInjection","text":"Abstract type for all dynamic injection types\n\nSubtypes must implement these methods:\n\nget_static_injector\nset_static_injector!\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FiveMassShaft","page":"PowerSystems","title":"PowerSystems.FiveMassShaft","text":"mutable struct FiveMassShaft <: Shaft\n    H::Float64\n    H_hp::Float64\n    H_ip::Float64\n    H_lp::Float64\n    H_ex::Float64\n    D::Float64\n    D_hp::Float64\n    D_ip::Float64\n    D_lp::Float64\n    D_ex::Float64\n    D_12::Float64\n    D_23::Float64\n    D_34::Float64\n    D_45::Float64\n    K_hp::Float64\n    K_ip::Float64\n    K_lp::Float64\n    K_ex::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 5 mass-spring shaft model.  It contains a High-Pressure (HP) steam turbine, Intermediate-Pressure (IP)  steam turbine, Low-Pressure (LP) steam turbine, the Rotor and an Exciter (EX) mover.\n\nArguments\n\nH::Float64: Rotor inertia constant in MWs/MVA, validation range: (0, nothing)\nH_hp::Float64: High pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_ip::Float64: Intermediate pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_lp::Float64: Low pressure turbine inertia constant in MWs/MVA, validation range: (0, nothing)\nH_ex::Float64:  Exciter inertia constant in MWs/MVA, validation range: (0, nothing)\nD::Float64: Rotor natural damping in pu, validation range: (0, nothing)\nD_hp::Float64: High pressure turbine natural damping in pu, validation range: (0, nothing)\nD_ip::Float64: Intermediate pressure turbine natural damping in pu, validation range: (0, nothing)\nD_lp::Float64: Low pressure turbine natural damping in pu, validation range: (0, nothing)\nD_ex::Float64: Exciter natural damping in pu, validation range: (0, nothing)\nD_12::Float64: High-Intermediate pressure turbine damping, validation range: (0, nothing)\nD_23::Float64: Intermediate-Low pressure turbine damping, validation range: (0, nothing)\nD_34::Float64: Low pressure turbine-Rotor damping, validation range: (0, nothing)\nD_45::Float64: Rotor-Exciter damping, validation range: (0, nothing)\nK_hp::Float64: High pressure turbine angle coefficient, validation range: (0, nothing)\nK_ip::Float64: Intermediate pressure turbine angle coefficient, validation range: (0, nothing)\nK_lp::Float64: Low pressure turbine angle coefficient, validation range: (0, nothing)\nK_ex::Float64: Exciter angle coefficient, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nδ: rotor angle,\nω: rotor speed,\nδ_hp: rotor angle of high pressure turbine,\nω_hp: rotor speed of high pressure turbine,\nδ_ip: rotor angle of intermediate pressure turbine,\nω_ip: rotor speed of intermediate pressure turbine,\nδ_lp: rotor angle of low pressure turbine,\nω_lp: rotor speed of low pressure turbine,\nδ_ex: rotor angle of exciter,\nω_lp: rotor speed of exciter\n\nn_states::Int64: FiveMassShaft has 10 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FixedAdmittance","page":"PowerSystems","title":"PowerSystems.FixedAdmittance","text":"mutable struct FixedAdmittance <: ElectricLoad\n    name::String\n    available::Bool\n    bus::Bus\n    Y::Complex{Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nY::Complex{Float64}: System per-unit value\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FixedDCSource","page":"PowerSystems","title":"PowerSystems.FixedDCSource","text":"mutable struct FixedDCSource <: DCSource\n    voltage::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Fixed DC Source that returns a fixed DC voltage\n\nArguments\n\nvoltage::Float64: rated VA, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: FixedDCSource has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.FullMachine","page":"PowerSystems","title":"PowerSystems.FullMachine","text":"mutable struct FullMachine <: Machine\n    R::Float64\n    R_f::Float64\n    R_1d::Float64\n    R_1q::Float64\n    L_d::Float64\n    L_q::Float64\n    L_ad::Float64\n    L_aq::Float64\n    L_f1d::Float64\n    L_ff::Float64\n    L_1d::Float64\n    L_1q::Float64\n    ext::Dict{String, Any}\n    inv_d_fluxlink::Array{Float64,2}\n    inv_q_fluxlink::Array{Float64,2}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameter of a full order flux stator-rotor model without zero sequence flux in the stator.  The derivative of stator fluxes (ψd and ψq) is NOT neglected. Only one q-axis damping circuit is considered. All parameters are in machine per unit.  Refer to Chapter 3 of Power System Stability and Control by P. Kundur or Chapter 11 of Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby, for more details.  Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nR_f::Float64: Field rotor winding resistance in per unit, validation range: (0, nothing)\nR_1d::Float64:  Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski., validation range: (0, nothing)\nR_1q::Float64: Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski., validation range: (0, nothing)\nL_d::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as Lad + Ll in Kundur (and Ld in Machowski)., validation range: (0, nothing)\nL_q::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as Laq + Ll in Kundur., validation range: (0, nothing)\nL_ad::Float64: Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_aq::Float64: Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit, validation range: (0, nothing)\nL_f1d::Float64: Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_ff::Float64: Field rotor winding inductance, in per unit, validation range: (0, nothing)\nL_1d::Float64: Inductance of the d-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nL_1q::Float64: Inductance of the q-axis rotor damping circuit, in per unit, validation range: (0, nothing)\next::Dict{String, Any}\ninv_d_fluxlink::Array{Float64,2}: Equations 3.127, 3.130, 3.131 From Kundur\ninv_q_fluxlink::Array{Float64,2}: Equations 3.128, 3.132 From Kundur\nstates::Vector{Symbol}: The states are:\n\nψd: d-axis stator flux,\nψq: q-axis stator flux,\nψf: field rotor flux,\nψ1d: d-axis rotor damping flux,\nψ1q: q-axis rotor damping flux\n\nn_states::Int64: FullMachine has 5 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.GasTG","page":"PowerSystems","title":"PowerSystems.GasTG","text":"mutable struct GasTG <: TurbineGov\n    R::Float64\n    T1::Float64\n    T2::Float64\n    T3::Float64\n    AT::Float64\n    Kt::Float64\n    V_lim::Tuple{Float64, Float64}\n    D_turb::Float64\n    Load_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of Gas Turbine-Governor. GAST in PSSE and GAST_PTI in PowerWorld.\n\nArguments\n\nR::Float64: Speed droop parameter, validation range: (&quot;eps()&quot;, nothing)\nT1::Float64: Governor time constant in s, validation range: (&quot;eps()&quot;, nothing)\nT2::Float64: Combustion chamber time constant, validation range: (&quot;eps()&quot;, nothing)\nT3::Float64: Load limit time constant (exhaust gas measurement time), validation range: (&quot;eps()&quot;, nothing)\nAT::Float64: Ambient temperature load limit, validation range: (0, nothing)\nKt::Float64: Load limit feedback gain, validation range: (0, nothing)\nV_lim::Tuple{Float64, Float64}: Operational control limits on fuel valve opening (Vmin, Vmax)\nD_turb::Float64: Speed damping coefficient of gas turbine rotor, validation range: (0, nothing)\nLoad_ref::Float64: Reference Load Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the GAST model are:\n\nx_g1: Fuel valve opening,\nx_g2: Fuel flow,\nx_g3: Exhaust temperature load\n\nn_states::Int64: GasTG has 3 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.GenericBattery","page":"PowerSystems","title":"PowerSystems.GenericBattery","text":"mutable struct GenericBattery <: Storage\n    name::String\n    available::Bool\n    bus::Bus\n    prime_mover::PrimeMovers.PrimeMover\n    initial_energy::Float64\n    state_of_charge_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    rating::Float64\n    active_power::Float64\n    input_active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    output_active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    efficiency::NamedTuple{(:in, :out), Tuple{Float64, Float64}}\n    reactive_power::Float64\n    reactive_power_limits::Union{Nothing, Min_Max}\n    base_power::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData structure for a generic battery\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\ninitial_energy::Float64: State of Charge of the Battery p.u.-hr, validation range: (0, nothing), action if invalid: error\nstate_of_charge_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}: Maximum and Minimum storage capacity in p.u.-hr, validation range: (0, nothing), action if invalid: error\nrating::Float64\nactive_power::Float64\ninput_active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}, validation range: (0, nothing), action if invalid: error\noutput_active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}, validation range: (0, nothing), action if invalid: error\nefficiency::NamedTuple{(:in, :out), Tuple{Float64, Float64}}, validation range: (0, 1), action if invalid: warn\nreactive_power::Float64, validation range: reactivepowerlimits, action if invalid: warn\nreactive_power_limits::Union{Nothing, Min_Max}\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HVDCLine","page":"PowerSystems","title":"PowerSystems.HVDCLine","text":"mutable struct HVDCLine <: DCBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    arc::Arc\n    active_power_limits_from::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    active_power_limits_to::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits_from::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits_to::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    loss::NamedTuple{(:l0, :l1), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\na High voltage DC line.\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\narc::Arc\nactive_power_limits_from::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nactive_power_limits_to::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits_from::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits_to::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nloss::NamedTuple{(:l0, :l1), Tuple{Float64, Float64}}\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HydroDispatch","page":"PowerSystems","title":"PowerSystems.HydroDispatch","text":"mutable struct HydroDispatch <: HydroGen\n    name::String\n    available::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits::Union{Nothing, NamedTuple{(:min, :max), Tuple{Float64, Float64}}}\n    ramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    time_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    base_power::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactive_power::Float64\nreactive_power::Float64, validation range: reactivepowerlimits, action if invalid: warn\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\nactive_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits::Union{Nothing, NamedTuple{(:min, :max), Tuple{Float64, Float64}}}, action if invalid: warn\nramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: ramp up and ramp down limits in MW (in component base per unit) per minute, validation range: (0, nothing), action if invalid: error\ntime_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: Minimum up and Minimum down time limits in hours, validation range: (0, nothing), action if invalid: error\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.HydroEnergyReservoir","page":"PowerSystems","title":"PowerSystems.HydroEnergyReservoir","text":"mutable struct HydroEnergyReservoir <: HydroGen\n    name::String\n    available::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits::Union{Nothing, Min_Max}\n    ramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    time_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    operation_cost::TwoPartCost\n    base_power::Float64\n    storage_capacity::Float64\n    inflow::Float64\n    initial_storage::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactive_power::Float64\nreactive_power::Float64, validation range: reactivepowerlimits, action if invalid: warn\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\nactive_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits::Union{Nothing, Min_Max}, action if invalid: warn\nramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: ramp up and ramp down limits in MW (in component base per unit) per minute, validation range: (0, nothing), action if invalid: error\ntime_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: Minimum up and Minimum down time limits in hours, validation range: (0, nothing), action if invalid: error\noperation_cost::TwoPartCost: Operation Cost of Generation TwoPartCost\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nstorage_capacity::Float64, validation range: (0, nothing), action if invalid: error\ninflow::Float64, validation range: (0, nothing), action if invalid: error\ninitial_storage::Float64, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.InterruptibleLoad","page":"PowerSystems","title":"PowerSystems.InterruptibleLoad","text":"mutable struct InterruptibleLoad <: ControllableLoad\n    name::String\n    available::Bool\n    bus::Bus\n    model::LoadModels.LoadModel\n    active_power::Float64\n    reactive_power::Float64\n    max_active_power::Float64\n    max_reactive_power::Float64\n    base_power::Float64\n    operation_cost::TwoPartCost\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nmodel::LoadModels.LoadModel\nactive_power::Float64\nreactive_power::Float64\nmax_active_power::Float64\nmax_reactive_power::Float64\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\noperation_cost::TwoPartCost: Operation Cost of Generation TwoPartCost\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.KauraPLL","page":"PowerSystems","title":"PowerSystems.KauraPLL","text":"mutable struct KauraPLL <: FrequencyEstimator\n    ω_lp::Float64\n    kp_pll::Float64\n    ki_pll::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of a Phase-Locked Loop (PLL) based on Kaura, Vikram, and Vladimir Blasko. \"Operation of a phase locked loop system under distorted utility conditions.\" IEEE Transactions on Industry applications 33.1 (1997): 58-63.\n\nArguments\n\nω_lp::Float64: PLL low-pass filter frequency (rad/sec), validation range: (0, nothing)\nkp_pll::Float64: PLL proportional gain, validation range: (0, nothing)\nki_pll::Float64: PLL integral gain, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the KauraPLL model are:\n\nvd_pll: d-axis of the measured voltage in the PLL synchronous reference frame (SRF),\nvq_pll: q-axis of the measured voltage in the PLL SRF,\nε_pll: Integrator state of the PI controller,\nθ_pll: Phase angle displacement in the PLL SRF\n\nn_states::Int64: KauraPLL has 4 states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.LCLFilter","page":"PowerSystems","title":"PowerSystems.LCLFilter","text":"mutable struct LCLFilter <: Filter\n    lf::Float64\n    rf::Float64\n    cf::Float64\n    lg::Float64\n    rg::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of a LCL filter outside the converter, the states are in the grid's reference frame\n\nArguments\n\nlf::Float64: Series inductance in p.u. of converter filter, validation range: (0, nothing)\nrf::Float64: Series resistance in p.u. of converter filter, validation range: (0, nothing)\ncf::Float64: Shunt capacitance in p.u. of converter filter, validation range: (0, nothing)\nlg::Float64: Series inductance in p.u. of converter filter to the grid, validation range: (0, nothing)\nrg::Float64: Series resistance in p.u. of converter filter to the grid, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the LCLFilter model are:\n\nir_cnv: Real current out of the converter,\nii_cnv: Imaginary current out of the converter,\nvr_filter: Real voltage at the filter's capacitor,\nvi_filter: Imaginary voltage at the filter's capacitor,\nir_filter: Real current out of the filter,\nii_filter: Imaginary current out of the filter\n\nn_states::Int64: LCLFilter has 6 states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Line","page":"PowerSystems","title":"PowerSystems.Line","text":"mutable struct Line <: ACBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    reactive_power_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    b::NamedTuple{(:from, :to), Tuple{Float64, Float64}}\n    rate::Float64\n    angle_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\nreactive_power_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nb::NamedTuple{(:from, :to), Tuple{Float64, Float64}}: System per-unit value, validation range: (0, 100), action if invalid: error\nrate::Float64\nangle_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}, validation range: (-1.571, 1.571), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Line-Tuple{Any,Bool,Float64,Float64,Arc,Any,Any,Any,Any,Float64}","page":"PowerSystems","title":"PowerSystems.Line","text":"Line(name::Any, available::Bool, active_power_flow::Float64, reactive_power_flow::Float64, arc::Arc, r::Any, x::Any, b::Any, rate::Any, angle_limits::Float64) -> Line\n\n\nAccepts angle_limits as a Float64.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.LoadZone","page":"PowerSystems","title":"PowerSystems.LoadZone","text":"mutable struct LoadZone <: AggregationTopology\n    name::String\n    peak_active_power::Float64\n    peak_reactive_power::Float64\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nA collection of buses for electricity price analysis.\n\nArguments\n\nname::String\npeak_active_power::Float64\npeak_reactive_power::Float64\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.MarconatoMachine","page":"PowerSystems","title":"PowerSystems.MarconatoMachine","text":"mutable struct MarconatoMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    T_AA::Float64\n    ext::Dict{String, Any}\n    γd::Float64\n    γq::Float64\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 6-states synchronous machine: Marconato model\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nT_AA::Float64: Time constant of d-axis additional leakage, validation range: (0, nothing)\next::Dict{String, Any}\nγd::Float64\nγq::Float64\nstates::Vector{Symbol}: The states are:\n\nψq: q-axis stator flux,\nψd: d-axis stator flux,\neq_p: q-axis transient voltage,\ned_p: d-axis transient voltage,\neq_pp: q-axis subtransient voltage,\ned_pp: d-axis subtransient voltage\n\nn_states::Int64: MarconatoMachine has 6 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ModifiedAC1A","page":"PowerSystems","title":"PowerSystems.ModifiedAC1A","text":"mutable struct ModifiedAC1A <: AVR\n    Tr::Float64\n    Tb::Float64\n    Tc::Float64\n    Ka::Float64\n    Ta::Float64\n    Vr_lim::Tuple{Float64, Float64}\n    Te::Float64\n    Kf::Float64\n    Tf::Float64\n    Kc::Float64\n    Kd::Float64\n    Ke::Float64\n    E_sat::Tuple{Float64, Float64}\n    Se::Tuple{Float64, Float64}\n    V_ref::Float64\n    saturation_coeffs::Tuple{Float64, Float64}\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of Modified Type AC1A Excitacion System. EXAC1 in PSSE and PSLF\n\nArguments\n\nTr::Float64: Regulator input filter time constant in s, validation range: (0, nothing)\nTb::Float64: Regulator denominator (lag) time constant in s, validation range: (0, nothing)\nTc::Float64: Regulator numerator (lead) time constant in s, validation range: (0, nothing)\nKa::Float64: Regulator output gain, validation range: (0, nothing)\nTa::Float64: Regulator output time constant in s, validation range: (0, nothing)\nVr_lim::Tuple{Float64, Float64}: Limits for regulator output (Vrmin, Vrmax)\nTe::Float64: Exciter field time constant in s, validation range: (&quot;eps()&quot;, nothing)\nKf::Float64: Rate feedback excitation system stabilizer gain, validation range: (0, nothing)\nTf::Float64: Rate feedback time constant, validation range: (&quot;eps()&quot;, nothing)\nKc::Float64: Rectifier loading factor proportional to commutating reactance, validation range: (0, nothing)\nKd::Float64: Demagnetizing factor, function of exciter alternator reactances, validation range: (0, nothing)\nKe::Float64: Exciter field proportional constant, validation range: (0, nothing)\nE_sat::Tuple{Float64, Float64}: Exciter output voltage for saturation factor: (E1, E2)\nSe::Tuple{Float64, Float64}: Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\nsaturation_coeffs::Tuple{Float64, Float64}: Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVm: Sensed terminal voltage,\nVr1: Lead-lag state,\nVr2: Regulator output state,\nVe: Integrator output state,\nVr3: Feedback output state\n\nn_states::Int64\nstates_types::Vector{StateTypes.StateType}: ModifiedAC1A has 5 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.MonitoredLine","page":"PowerSystems","title":"PowerSystems.MonitoredLine","text":"mutable struct MonitoredLine <: ACBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    reactive_power_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    b::NamedTuple{(:from, :to), Tuple{Float64, Float64}}\n    flow_limits::NamedTuple{(:from_to, :to_from), Tuple{Float64, Float64}}\n    rate::Float64\n    angle_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\nreactive_power_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nb::NamedTuple{(:from, :to), Tuple{Float64, Float64}}: System per-unit value, validation range: (0, 2), action if invalid: error\nflow_limits::NamedTuple{(:from_to, :to_from), Tuple{Float64, Float64}}: TODO: throw warning above max SIL\nrate::Float64: TODO: compare to SIL (warn) (theoretical limit)\nangle_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}, validation range: (-1.571, 1.571), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.MultiStartCost","page":"PowerSystems","title":"PowerSystems.MultiStartCost","text":"mutable struct MultiStartCost <: OperationalCost\n    variable::VariableCost\n    no_load::Float64\n    fixed::Float64\n    startup::NamedTuple{(:hot, :warm, :cold), NTuple{3, Float64}}\n    shutdn::Float64\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure Operational Cost Data which includes fixed, variable cost, multiple start up cost and stop costs.\n\nArguments\n\nvariable::VariableCost: variable cost\nno_load::Float64: no load cost\nfixed::Float64: fixed cost\nstartup::NamedTuple{(:hot, :warm, :cold), NTuple{3, Float64}}: startup cost\nshutdn::Float64: shutdown cost, validation range: (0, nothing), action if invalid: warn\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.OneDOneQMachine","page":"PowerSystems","title":"PowerSystems.OneDOneQMachine","text":"mutable struct OneDOneQMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states synchronous machine: Simplified Marconato model  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when  transmission network dynamics is neglected.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\neq_p: q-axis transient voltage,\ned_p: d-axis transient voltage\n\nn_states::Int64: OneDOneQMachine has 2 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.OuterControl","page":"PowerSystems","title":"PowerSystems.OuterControl","text":"Parameters of a Outer-Loop controller using a virtual inertia with VSM for active power controller and a reactive power droop controller.\n\nConmutable structor\n\nVirtualInertiaQDroop(A, R)\n\nArguments\n\nA::Float64 : Active power controller using virtual inertia with VSM\nR::Float64 : Reactive power controller using reactive power droop\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PSSFixed","page":"PowerSystems","title":"PowerSystems.PSSFixed","text":"mutable struct PSSFixed <: PSS\n    V_pss::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a PSS that returns a fixed voltage to add to the reference for the AVR\n\nArguments\n\nV_pss::Float64: Fixed voltage stabilization signal, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: PSSFixed has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PSSSimple","page":"PowerSystems","title":"PowerSystems.PSSSimple","text":"mutable struct PSSSimple <: PSS\n    K_ω::Float64\n    K_p::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a PSS that returns a proportional droop voltage to add to the reference for the AVR\n\nArguments\n\nK_ω::Float64: Proportional gain for frequency, validation range: (0, nothing)\nK_p::Float64: Proportional gain for active power, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: PSSSimple has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PhaseShiftingTransformer","page":"PowerSystems","title":"PowerSystems.PhaseShiftingTransformer","text":"mutable struct PhaseShiftingTransformer <: ACBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    reactive_power_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primary_shunt::Float64\n    tap::Float64\n    α::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\nreactive_power_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (0, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimary_shunt::Float64, validation range: (0, 2), action if invalid: error\ntap::Float64, validation range: (0, 2), action if invalid: error\nα::Float64, validation range: (-1.571, 1.571), action if invalid: warn\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerLoad","page":"PowerSystems","title":"PowerSystems.PowerLoad","text":"mutable struct PowerLoad <: StaticLoad\n    name::String\n    available::Bool\n    bus::Bus\n    model::Union{Nothing, LoadModels.LoadModel}\n    active_power::Float64\n    reactive_power::Float64\n    base_power::Float64\n    max_active_power::Float64\n    max_reactive_power::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData structure for a static power load.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nmodel::Union{Nothing, LoadModels.LoadModel}\nactive_power::Float64\nreactive_power::Float64\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nmax_active_power::Float64\nmax_reactive_power::Float64\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerModelsData","page":"PowerSystems","title":"PowerSystems.PowerModelsData","text":"Container for data parsed by PowerModels\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerModelsData-Tuple{Union{IO, String}}","page":"PowerSystems","title":"PowerSystems.PowerModelsData","text":"PowerModelsData(file::Union{IO, String}; kwargs...) -> PowerModelsData\n\n\nConstructs PowerModelsData from a raw file. Currently Supports MATPOWER and PSSE data files parsed by PowerModels.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.PowerSystemType","page":"PowerSystems","title":"PowerSystems.PowerSystemType","text":"Supertype for all PowerSystems types. All subtypes must include a InfrastructureSystemsInternal member. Subtypes should call InfrastructureSystemsInternal() by default, but also must provide a constructor that allows existing values to be deserialized.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ReactivePowerDroop","page":"PowerSystems","title":"PowerSystems.ReactivePowerDroop","text":"mutable struct ReactivePowerDroop <: ReactivePowerControl\n    kq::Float64\n    ωf::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of a Reactive Power droop controller\n\nArguments\n\nkq::Float64: frequency droop gain, validation range: (0, nothing)\nωf::Float64: filter frequency cutoff, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the ReactivePowerDroop model are:\n\nq_oc: Filtered reactive output power\n\nn_states::Int64: ReactivePowerDroop has 1 state\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RenewableDispatch","page":"PowerSystems","title":"PowerSystems.RenewableDispatch","text":"mutable struct RenewableDispatch <: RenewableGen\n    name::String\n    available::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    reactive_power_limits::Union{Nothing, Min_Max}\n    power_factor::Float64\n    operation_cost::TwoPartCost\n    base_power::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactive_power::Float64\nreactive_power::Float64\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\nreactive_power_limits::Union{Nothing, Min_Max}\npower_factor::Float64, validation range: (0, 1), action if invalid: error\noperation_cost::TwoPartCost: Operation Cost of Generation TwoPartCost\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RenewableFix","page":"PowerSystems","title":"PowerSystems.RenewableFix","text":"mutable struct RenewableFix <: RenewableGen\n    name::String\n    available::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    power_factor::Float64\n    base_power::Float64\n    services::Vector{Service}\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for fixed renewable generation technologies.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactive_power::Float64\nreactive_power::Float64\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\npower_factor::Float64, validation range: (0, 1), action if invalid: error\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ReserveDemandCurve","page":"PowerSystems","title":"PowerSystems.ReserveDemandCurve","text":"mutable struct ReserveDemandCurve{T <: ReserveDirection} <: Reserve{T}\n    name::String\n    available::Bool\n    time_frame::Float64\n    operation_cost::TwoPartCost\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for a operating reserve with demand curve product for system simulations.\n\nArguments\n\nname::String\navailable::Bool\ntime_frame::Float64: the relative saturation time_frame, validation range: (0, nothing), action if invalid: error\noperation_cost::TwoPartCost: Cost for providing reserves  TwoPartCost\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RoundRotorExponential","page":"PowerSystems","title":"PowerSystems.RoundRotorExponential","text":"4-states round-rotor synchronous machine with quadratic saturation: IEEE Std 1110 §5.3.2 (Model 2.2). GENROU model in PSSE and PSLF.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RoundRotorMachine","page":"PowerSystems","title":"PowerSystems.RoundRotorMachine","text":"mutable struct RoundRotorMachine <: Machine\n    R::Float64\n    Td0_p::Float64\n    Td0_pp::Float64\n    Tq0_p::Float64\n    Tq0_pp::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xl::Float64\n    Se::Tuple{Float64, Float64}\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states round-rotor synchronous machine with quadratic/exponential saturation: IEEE Std 1110 §5.3.2 (Model 2.2). GENROU or GENROE model in PSSE and PSLF.\n\nArguments\n\nR::Float64: Armature resistance, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit. Note: Xdpp = Xqpp, validation range: (0, nothing)\nXl::Float64: Stator leakage reactance, validation range: (0, nothing)\nSe::Tuple{Float64, Float64}: Saturation factor at 1 and 1.2 pu flux: S(1.0) = B(|ψ_pp|-A)^2\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\neq_p: q-axis generator voltage behind the transient reactance,\ned_p: d-axis generator voltage behind the transient reactance,\nψ_kd: flux linkage in the first equivalent damping circuit in the d-axis,\nψ_kq: flux linkage in the first equivalent damping circuit in the d-axis\n\nn_states::Int64: RoundRotorMachine has 4 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.RoundRotorQuadratic","page":"PowerSystems","title":"PowerSystems.RoundRotorQuadratic","text":"4-states round-rotor synchronous machine with quadratic saturation: IEEE Std 1110 §5.3.2 (Model 2.2). GENROU model in PSSE and PSLF.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ST1A","page":"PowerSystems","title":"PowerSystems.ST1A","text":"mutable struct ST1A <: AVR\n    UEL_flags::Int64\n    PSS_flags::Int64\n    Tr::Float64\n    Vi_lim::Tuple{Float64, Float64}\n    Tc::Float64\n    Tb::Float64\n    Tc1::Float64\n    Tb1::Float64\n    Ka::Float64\n    Ta::Float64\n    Va_lim::Tuple{Float64, Float64}\n    Vr_lim::Tuple{Float64, Float64}\n    Kc::Float64\n    Kf::Float64\n    Tf::Float64\n    K_lr::Float64\n    I_lr::Float64\n    V_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    states_types::Vector{StateTypes.StateType}\n    internal::InfrastructureSystemsInternal\nend\n\nThis excitation system supplies power through a transformer from the generator terminals and its regulated by a controlled rectifier (via thyristors). Parameters of IEEE Std 421.5 Type ST1A Excitacion System. ESST1A in PSSE and PSLF\n\nArguments\n\nUEL_flags::Int64: Code input for Underexcitization limiter (UEL) entry. Not supported., validation range: (1, 3)\nPSS_flags::Int64: Code input for Power System Stabilizer (PSS) or (VOS) entry., validation range: (1, 2)\nTr::Float64: Regulator input filter time constant in s, validation range: (0, nothing)\nVi_lim::Tuple{Float64, Float64}: Voltage error limits (regulator input) (Vimin, Vimax)\nTc::Float64: First regulator denominator (lead) time constant in s, validation range: (0, nothing)\nTb::Float64: First regulator denominator (lag) time constant in s, validation range: (0, nothing)\nTc1::Float64: Second regulator denominator (lead) time constant in s, validation range: (0, nothing)\nTb1::Float64: Second regulator denominator (lead) time constant in s, validation range: (0, nothing)\nKa::Float64: Voltage regulator gain, validation range: (0, nothing)\nTa::Float64: Voltage regulator time constant in s, validation range: (0, nothing)\nVa_lim::Tuple{Float64, Float64}: Limits for regulator output (Vamin, Vamax)\nVr_lim::Tuple{Float64, Float64}: Limits for exciter output (Vrmin, Vrmax)\nKc::Float64: Rectifier loading factor proportional to commutating reactance, validation range: (0, nothing)\nKf::Float64: Rate feedback gain, validation range: (0, nothing)\nTf::Float64: Rate feedback time constant in s, validation range: (&quot;eps()&quot;, nothing)\nK_lr::Float64: Exciter output current limiter gain, validation range: (0, nothing)\nI_lr::Float64: Exciter output current limit reference, validation range: (0, nothing)\nV_ref::Float64: Reference Voltage Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nVm: Sensed terminal voltage,\nVr1: First Lead-lag state,\nVr2: Second lead-lag state,\nVa: Regulator output state,\nVr3: Feedback output state\n\nn_states::Int64: ST1A has 5 states\nstates_types::Vector{StateTypes.StateType}: ST1A has 5 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SalientPoleExponential","page":"PowerSystems","title":"PowerSystems.SalientPoleExponential","text":"\"3-states salient-pole synchronous machine with exponential saturation: IEEE Std 1110 §5.3.2 (Model 2.1). GENSAE in PSSE and PSLF.\"\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SalientPoleMachine","page":"PowerSystems","title":"PowerSystems.SalientPoleMachine","text":"mutable struct SalientPoleMachine <: Machine\n    R::Float64\n    Td0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xd_pp::Float64\n    Xl::Float64\n    Se::Tuple{Float64, Float64}\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 3-states salient-pole synchronous machine with quadratic/exponential saturation: IEEE Std 1110 §5.3.1 (Model 2.1). GENSAL or GENSAE model in PSSE and PSLF.\n\nArguments\n\nR::Float64: Armature resistance, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit. Note: Xdpp = Xqpp, validation range: (0, nothing)\nXl::Float64: Stator leakage reactance, validation range: (0, nothing)\nSe::Tuple{Float64, Float64}: Saturation factor at 1 and 1.2 pu flux: Se(eqp) = B(eqp-A)^2\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\neq_p: q-axis generator voltage behind the transient reactance,\nψ_kd: flux linkage in the first equivalent damping circuit in the d-axis,\nψq_pp: phasonf of the subtransient flux linkage in the q-axis\n\nn_states::Int64: SalientPoleMachine has 3 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SalientPoleQuadratic","page":"PowerSystems","title":"PowerSystems.SalientPoleQuadratic","text":"\"3-states salient-pole synchronous machine with quadratic saturation: IEEE Std 1110 §5.3.2 (Model 2.1). GENSAL in PSSE and PSLF.\"\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SimpleAFMachine","page":"PowerSystems","title":"PowerSystems.SimpleAFMachine","text":"mutable struct SimpleAFMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states simplified Anderson-Fouad (SimpleAFMachine) model.  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network  dynamics is neglected.  If transmission dynamics is considered use the full order Anderson Fouad model.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\neq_p: q-axis transient voltage,\ned_p: d-axis transient voltage,\neq_pp: q-axis subtransient voltage,\ned_pp: d-axis subtransient voltage\n\nn_states::Int64: SimpleAFMachine has 4 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SimpleFullMachine","page":"PowerSystems","title":"PowerSystems.SimpleFullMachine","text":"mutable struct SimpleFullMachine <: Machine\n    R::Float64\n    R_f::Float64\n    R_1d::Float64\n    R_1q::Float64\n    L_d::Float64\n    L_q::Float64\n    L_ad::Float64\n    L_aq::Float64\n    L_f1d::Float64\n    L_ff::Float64\n    L_1d::Float64\n    L_1q::Float64\n    ext::Dict{String, Any}\n    inv_d_fluxlink::Array{Float64,2}\n    inv_q_fluxlink::Array{Float64,2}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameter of a full order flux stator-rotor model without zero sequence flux in the stator.  The derivative of stator fluxes (ψd and ψq) is neglected. This is standard when  transmission network dynamics is neglected. Only one q-axis damping circuit  is considered. All per unit are in machine per unit.  Refer to Chapter 3 of Power System Stability and Control by P. Kundur or Chapter 11 of Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby, for more details.  Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nR_f::Float64: Field rotor winding resistance in per unit, validation range: (0, nothing)\nR_1d::Float64:  Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski., validation range: (0, nothing)\nR_1q::Float64: Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski., validation range: (0, nothing)\nL_d::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as Lad + Ll in Kundur (and Ld in Machowski)., validation range: (0, nothing)\nL_q::Float64: Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as Laq + Ll in Kundur., validation range: (0, nothing)\nL_ad::Float64: Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_aq::Float64: Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit, validation range: (0, nothing)\nL_f1d::Float64: Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit, validation range: (0, nothing)\nL_ff::Float64: Field rotor winding inductance, in per unit, validation range: (0, nothing)\nL_1d::Float64: Inductance of the d-axis rotor damping circuit, in per unit, validation range: (0, nothing)\nL_1q::Float64: Inductance of the q-axis rotor damping circuit, in per unit, validation range: (0, nothing)\next::Dict{String, Any}\ninv_d_fluxlink::Array{Float64,2}: Equations 3.127, 3.130, 3.131 From Kundur\ninv_q_fluxlink::Array{Float64,2}: Equations 3.128, 3.132 From Kundur\nstates::Vector{Symbol}: The states are:\n\nψf: field rotor flux,\nψ1d: d-axis rotor damping flux,\nψ1q: q-axis rotor damping flux\n\nn_states::Int64: SimpleFullMachine has 3 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SimpleMarconatoMachine","page":"PowerSystems","title":"PowerSystems.SimpleMarconatoMachine","text":"mutable struct SimpleMarconatoMachine <: Machine\n    R::Float64\n    Xd::Float64\n    Xq::Float64\n    Xd_p::Float64\n    Xq_p::Float64\n    Xd_pp::Float64\n    Xq_pp::Float64\n    Td0_p::Float64\n    Tq0_p::Float64\n    Td0_pp::Float64\n    Tq0_pp::Float64\n    T_AA::Float64\n    ext::Dict{String, Any}\n    γd::Float64\n    γq::Float64\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of 4-states synchronous machine: Simplified Marconato model  The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and  ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network  dynamics is neglected.\n\nArguments\n\nR::Float64: Resistance after EMF in machine per unit, validation range: (0, nothing)\nXd::Float64: Reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq::Float64: Reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_p::Float64: Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_p::Float64: Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nXd_pp::Float64: Sub-Transient reactance after EMF in d-axis per unit, validation range: (0, nothing)\nXq_pp::Float64: Sub-Transient reactance after EMF in q-axis per unit, validation range: (0, nothing)\nTd0_p::Float64: Time constant of transient d-axis voltage, validation range: (0, nothing)\nTq0_p::Float64: Time constant of transient q-axis voltage, validation range: (0, nothing)\nTd0_pp::Float64: Time constant of sub-transient d-axis voltage, validation range: (0, nothing)\nTq0_pp::Float64: Time constant of sub-transient q-axis voltage, validation range: (0, nothing)\nT_AA::Float64: Time constant of d-axis additional leakage, validation range: (0, nothing)\next::Dict{String, Any}\nγd::Float64\nγq::Float64\nstates::Vector{Symbol}: The states are:\n\neq_p: q-axis transient voltage,\ned_p: d-axis transient voltage,\neq_pp: q-axis subtransient voltage,\ned_pp: d-axis subtransient voltage\n\nn_states::Int64: SimpleMarconatoMachine has 4 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.SingleMass","page":"PowerSystems","title":"PowerSystems.SingleMass","text":"mutable struct SingleMass <: Shaft\n    H::Float64\n    D::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of single mass shaft model. Typically represents the rotor mass.\n\nArguments\n\nH::Float64: Rotor inertia constant in MWs/MVA, validation range: (0, nothing)\nD::Float64: Rotor natural damping in pu, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states are:\n\nδ: rotor angle,\nω: rotor speed\n\nn_states::Int64: SingleMass has 1 state\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Source","page":"PowerSystems","title":"PowerSystems.Source","text":"mutable struct Source <: StaticInjection\n    name::String\n    available::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    R_th::Float64\n    X_th::Float64\n    internal_voltage::Float64\n    internal_angle::Float64\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nThis struct acts as an infinity bus.\n\nArguments\n\nname::String\navailable::Bool\nbus::Bus\nactive_power::Float64\nreactive_power::Float64\nR_th::Float64: Source Thevenin resistance, validation range: (0, nothing)\nX_th::Float64: Source Thevenin reactance, validation range: (0, nothing)\ninternal_voltage::Float64: Internal Voltage, validation range: (0, nothing)\ninternal_angle::Float64: Internal Angle\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.StaticReserve","page":"PowerSystems","title":"PowerSystems.StaticReserve","text":"mutable struct StaticReserve{T <: ReserveDirection} <: Reserve{T}\n    name::String\n    available::Bool\n    time_frame::Float64\n    requirement::Float64\n    ext::Dict{String, Any}\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for a proportional reserve product for system simulations.\n\nArguments\n\nname::String\navailable::Bool\ntime_frame::Float64: the relative saturation time_frame, validation range: (0, nothing), action if invalid: error\nrequirement::Float64: the static value of required reserves in system p.u., validation range: (0, nothing), action if invalid: error\next::Dict{String, Any}\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.StaticReserve-Tuple{Any,InfrastructureSystems.FlattenIteratorWrapper,Any,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.StaticReserve","text":"StaticReserve(name::Any, contributingdevices::InfrastructureSystems.FlattenIteratorWrapper, timeframe::Any, requirement::Any, forecasts::Any, internal::Any)\n\n\nAllows construction of a reserve from an iterator.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System","page":"PowerSystems","title":"PowerSystems.System","text":"System\n\nA power system defined by fields for base_power, components, and forecasts.\n\nSystem(base_power)\nSystem(components, base_power)\nSystem(buses, generators, loads, branches, storage, base_power, services, annex; kwargs...)\nSystem(buses, generators, loads, base_power; kwargs...)\nSystem(file; kwargs...)\nSystem(; buses, generators, loads, branches, storage, base_power, services, annex, kwargs...)\nSystem(; kwargs...)\n\nArguments\n\nbuses::Vector{Bus}: an array of buses\ngenerators::Vector{Generator}: an array of generators of (possibly) different types\nloads::Vector{ElectricLoad}: an array of load specifications that includes timing of the loads\nbranches::Union{Nothing, Vector{Branch}}: an array of branches; may be nothing\nstorage::Union{Nothing, Vector{Storage}}: an array of storage devices; may be nothing\nbase_power::Float64: the base power value for the system\nservices::Union{Nothing, Vector{<:Service}}: an array of services; may be nothing\n\nKeyword arguments\n\nrunchecks::Bool: Run available checks on input fields and when add_component! is called. Throws InvalidRange if an error is found.\ntime_series_in_memory::Bool=false: Store time series data in memory instead of HDF5.\nconfigpath::String: specify path to validation config file\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems.System","text":"System(file_path::AbstractString; kwargs...) -> Any\n\n\nConstructs a System from a file path ending with .m, .RAW, or .json\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.System","text":"System(data::Any, base_power::Any; kwargs...) -> System\n\n\nConstruct a System from InfrastructureSystems.SystemData\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Any}","page":"PowerSystems","title":"PowerSystems.System","text":"System(base_power::Any; kwargs...) -> System\n\n\nConstruct an empty System. Useful for building a System while parsing raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Array{Bus,1},Array{#s108,1} where #s108<:Generator,Array{#s107,1} where #s107<:ElectricLoad,Union{Nothing, Array{#s106,1} where #s106<:Branch},Union{Nothing, Array{#s78,1} where #s78<:Storage},Float64,Union{Nothing, Array{#s23,1} where #s23<:Service},Union{Nothing, Dict}}","page":"PowerSystems","title":"PowerSystems.System","text":"System(buses::Array{Bus,1}, generators::Array{#s108,1} where #s108<:Generator, loads::Array{#s107,1} where #s107<:ElectricLoad, branches::Union{Nothing, Array{#s106,1} where #s106<:Branch}, storage::Union{Nothing, Array{#s78,1} where #s78<:Storage}, base_power::Float64, services::Union{Nothing, Array{#s23,1} where #s23<:Service}, annex::Union{Nothing, Dict}; kwargs...) -> System\n\n\nSystem constructor when components are constructed externally.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Array{Bus,1},Array{#s131,1} where #s131<:Generator,Array{#s130,1} where #s130<:ElectricLoad,Float64}","page":"PowerSystems","title":"PowerSystems.System","text":"System(buses::Array{Bus,1}, generators::Array{#s131,1} where #s131<:Generator, loads::Array{#s130,1} where #s130<:ElectricLoad, base_power::Float64; kwargs...)\n\n\nSystem constructor without nothing-able arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{Nothing}","page":"PowerSystems","title":"PowerSystems.System","text":"System(::Nothing; buses, generators, loads, branches, storage, base_power, services, annex, kwargs...) -> System\n\n\nConstructs a non-functional System for demo purposes.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{PowerModelsData}","page":"PowerSystems","title":"PowerSystems.System","text":"System(pm_data::PowerModelsData; kwargs...) -> Any\n\n\nConstructs a System from PowerModelsData. Supports kwargs to supply formatters for different device types, such as bus_name_formatter or gen_name_formatter.\n\nExamples\n\nsys = System(\n    pm_data, configpath = \"ACTIVSg25k_validation.json\",\n    bus_name_formatter = x->string(x[\"name\"]*\"-\"*string(x[\"index\"])),\n    load_name_formatter = x->strip(join(x[\"source_id\"], \"_\"))\n)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.System","text":"System(data::PowerSystems.PowerSystemTableData; forecast_resolution, time_series_in_memory, time_series_directory, runchecks, kwargs...) -> System\n\n\nConstruct a System from PowerSystemTableData data.\n\nArguments\n\nforecast_resolution::Union{DateTime, Nothing}=nothing: only store forecasts that match this resolution.\ntime_series_in_memory::Bool=false: Store time series data in memory instead of HDF5 file\ntime_series_directory=nothing: Store time series data in directory instead of tmpfs\nrunchecks::Bool=true: Validate struct fields.\n\nThrows DataFormatError if forecasts with multiple resolutions are detected.\n\nA forecast has a different resolution than others.\nA forecast has a different horizon than others.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.System-Tuple{}","page":"PowerSystems","title":"PowerSystems.System","text":"System(; base_power, buses, generators, loads, branches, storage, services, annex, kwargs...)\n\n\nSystem constructor with keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.TGFixed","page":"PowerSystems","title":"PowerSystems.TGFixed","text":"mutable struct TGFixed <: TurbineGov\n    efficiency::Float64\n    P_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a fixed Turbine Governor that returns a fixed mechanical torque  given by the product of P_ref*efficiency\n\nArguments\n\nefficiency::Float64:  Efficiency factor that multiplies P_ref, validation range: (0, nothing)\nP_ref::Float64: Reference Power Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}\nn_states::Int64: TGFixed has no states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TGTypeI","page":"PowerSystems","title":"PowerSystems.TGTypeI","text":"mutable struct TGTypeI <: TurbineGov\n    R::Float64\n    Ts::Float64\n    Tc::Float64\n    T3::Float64\n    T4::Float64\n    T5::Float64\n    P_min::Float64\n    P_max::Float64\n    P_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Turbine Governor Type I.\n\nArguments\n\nR::Float64: Droop parameter, validation range: (0, nothing)\nTs::Float64: Governor time constant, validation range: (0, nothing)\nTc::Float64: Servo time constant, validation range: (0, nothing)\nT3::Float64: Transient gain time constant, validation range: (0, nothing)\nT4::Float64: Power fraction time constant, validation range: (0, nothing)\nT5::Float64: Reheat time constant, validation range: (0, nothing)\nP_min::Float64: Min Power into the Governor, validation range: (0, nothing)\nP_max::Float64: Max Power into the Governor, validation range: (0, nothing)\nP_ref::Float64: Reference Power Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the TGTypeI model are:\n\nx_g1: Governor state,\nx_g2: Servo state,\nx_g3: Reheat state\n\nn_states::Int64: TGTypeI has 3 states\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TGTypeII","page":"PowerSystems","title":"PowerSystems.TGTypeII","text":"mutable struct TGTypeII <: TurbineGov\n    R::Float64\n    T1::Float64\n    T2::Float64\n    τ_min::Float64\n    τ_max::Float64\n    P_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\n    internal::InfrastructureSystemsInternal\nend\n\nParameters of a Turbine Governor Type II.\n\nArguments\n\nR::Float64: Droop parameter, validation range: (0, nothing)\nT1::Float64: Transient gain time constant, validation range: (0, nothing)\nT2::Float64: Power fraction time constant, validation range: (0, nothing)\nτ_min::Float64: Min Power into the Governor, validation range: (0, nothing)\nτ_max::Float64: Max Power into the Governor, validation range: (0, nothing)\nP_ref::Float64: Reference Power Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the TGTypeI model are:\n\nx_g1: lead-lag state\n\nn_states::Int64: TGTypeII has 1 state\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TapTransformer","page":"PowerSystems","title":"PowerSystems.TapTransformer","text":"mutable struct TapTransformer <: ACBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    reactive_power_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primary_shunt::Float64\n    tap::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\nreactive_power_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (-2, 2), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimary_shunt::Float64: System per-unit value, validation range: (0, 2), action if invalid: error\ntap::Float64, validation range: (0, 2), action if invalid: error\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThermalMultiStart","page":"PowerSystems","title":"PowerSystems.ThermalMultiStart","text":"mutable struct ThermalMultiStart <: ThermalGen\n    name::String\n    available::Bool\n    status::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    fuel::ThermalFuels.ThermalFuel\n    active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits::Union{Nothing, Min_Max}\n    ramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    power_trajectory::Union{Nothing, NamedTuple{(:startup, :shutdown), Tuple{Float64, Float64}}}\n    time_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    start_time_limits::Union{Nothing, NamedTuple{(:hot, :warm, :cold), Tuple{Float64, Float64, Float64}}}\n    start_types::Int\n    operation_cost::MultiStartCost\n    base_power::Float64\n    services::Vector{Service}\n    time_at_status::Float64\n    must_run::Bool\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for thermal generation technologies.\n\nArguments\n\nname::String\navailable::Bool\nstatus::Bool\nbus::Bus\nactive_power::Float64, validation range: activepowerlimits, action if invalid: warn\nreactive_power::Float64, validation range: reactivepowerlimits, action if invalid: warn\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\nfuel::ThermalFuels.ThermalFuel: prime_mover Fuel according to EIA 923\nactive_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits::Union{Nothing, Min_Max}\nramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, validation range: (0, nothing), action if invalid: error\npower_trajectory::Union{Nothing, NamedTuple{(:startup, :shutdown), Tuple{Float64, Float64}}}: Power trajectory the unit will take during the startup and shutdown ramp process, validation range: (0, nothing), action if invalid: error\ntime_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: Minimum up and Minimum down time limits in hours, validation range: (0, nothing), action if invalid: error\nstart_time_limits::Union{Nothing, NamedTuple{(:hot, :warm, :cold), Tuple{Float64, Float64, Float64}}}:  Time limits for startup based on turbine temperature in hours\nstart_types::Int:  Number of startup based on turbine temperature, validation range: (1, 3), action if invalid: error\noperation_cost::MultiStartCost\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ntime_at_status::Float64\nmust_run::Bool\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThermalStandard","page":"PowerSystems","title":"PowerSystems.ThermalStandard","text":"mutable struct ThermalStandard <: ThermalGen\n    name::String\n    available::Bool\n    status::Bool\n    bus::Bus\n    active_power::Float64\n    reactive_power::Float64\n    rating::Float64\n    prime_mover::PrimeMovers.PrimeMover\n    fuel::ThermalFuels.ThermalFuel\n    active_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    reactive_power_limits::Union{Nothing, Min_Max}\n    ramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    time_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}\n    operation_cost::ThreePartCost\n    base_power::Float64\n    services::Vector{Service}\n    time_at_status::Float64\n    dynamic_injector::Union{Nothing, DynamicInjection}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for thermal generation technologies.\n\nArguments\n\nname::String\navailable::Bool\nstatus::Bool\nbus::Bus\nactive_power::Float64, validation range: activepowerlimits, action if invalid: warn\nreactive_power::Float64, validation range: reactivepowerlimits, action if invalid: warn\nrating::Float64: Thermal limited MVA Power Output of the unit. <= Capacity, validation range: (0, nothing), action if invalid: error\nprime_mover::PrimeMovers.PrimeMover: prime_mover Technology according to EIA 923\nfuel::ThermalFuels.ThermalFuel: prime_mover Fuel according to EIA 923\nactive_power_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nreactive_power_limits::Union{Nothing, Min_Max}\nramp_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: ramp up and ramp down limits in MW (in component base per unit) per minute, validation range: (0, nothing), action if invalid: error\ntime_limits::Union{Nothing, NamedTuple{(:up, :down), Tuple{Float64, Float64}}}: Minimum up and Minimum down time limits in hours, validation range: (0, nothing), action if invalid: error\noperation_cost::ThreePartCost\nbase_power::Float64: Base power of the unit in MVA, validation range: (0, nothing), action if invalid: warn\nservices::Vector{Service}: Services that this device contributes to\ntime_at_status::Float64\ndynamic_injector::Union{Nothing, DynamicInjection}: corresponding dynamic injection device\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThreePartCost","page":"PowerSystems","title":"PowerSystems.ThreePartCost","text":"mutable struct ThreePartCost <: OperationalCost\n    variable::VariableCost\n    fixed::Float64\n    startup::Float64\n    shutdn::Float64\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure Operational Cost Data in Three parts fixed, variable cost and start - stop costs.\n\nArguments\n\nvariable::VariableCost: variable cost\nfixed::Float64: fixed cost\nstartup::Float64: startup cost, validation range: (0, nothing), action if invalid: warn\nshutdn::Float64: shutdown cost, validation range: (0, nothing), action if invalid: warn\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.ThreePartCost-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}","page":"PowerSystems","title":"PowerSystems.ThreePartCost","text":"Accepts rating as a Float64 and then creates a ThreePartCost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.Transfer","page":"PowerSystems","title":"PowerSystems.Transfer","text":"mutable struct Transfer <: Service\n    name::String\n    available::Bool\n    requirement::Float64\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nArguments\n\nname::String\navailable::Bool\nrequirement::Float64\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.Transformer2W","page":"PowerSystems","title":"PowerSystems.Transformer2W","text":"mutable struct Transformer2W <: ACBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    reactive_power_flow::Float64\n    arc::Arc\n    r::Float64\n    x::Float64\n    primary_shunt::Float64\n    rate::Union{Nothing, Float64}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nThe 2-W transformer model uses an equivalent circuit assuming the impedance is on the High Voltage Side of the transformer. The model allocates the iron losses and magnetizing susceptance to the primary side.\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\nreactive_power_flow::Float64\narc::Arc\nr::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nx::Float64: System per-unit value, validation range: (-2, 4), action if invalid: error\nprimary_shunt::Float64: System per-unit value, validation range: (0, 2), action if invalid: error\nrate::Union{Nothing, Float64}, validation range: (0, nothing), action if invalid: error\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TwoPartCost","page":"PowerSystems","title":"PowerSystems.TwoPartCost","text":"mutable struct TwoPartCost <: OperationalCost\n    variable::VariableCost\n    fixed::Float64\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure Operational Cost Data in two parts: fixed and variable cost.\n\nArguments\n\nvariable::VariableCost: variable cost\nfixed::Float64: fixed cost, validation range: (0, nothing), action if invalid: warn\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.TwoPartCost-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}","page":"PowerSystems","title":"PowerSystems.TwoPartCost","text":"TwoPartCost(variable_cost::T<:Union{Float64, Tuple{Float64,Float64}, Array{Tuple{Float64,Float64},1}}, args::Vararg{Any,N} where N) -> TwoPartCost\n\n\nAccepts rating as a Float64 and then creates a TwoPartCost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.VSCDCLine","page":"PowerSystems","title":"PowerSystems.VSCDCLine","text":"mutable struct VSCDCLine <: DCBranch\n    name::String\n    available::Bool\n    active_power_flow::Float64\n    arc::Arc\n    rectifier_tap_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    rectifier_xrc::Float64\n    rectifier_firing_angle::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    inverter_tap_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    inverter_xrc::Float64\n    inverter_firing_angle::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\n    services::Vector{Service}\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nAs implemented in Milano's Book, Page 397.\n\nArguments\n\nname::String\navailable::Bool\nactive_power_flow::Float64\narc::Arc\nrectifier_tap_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nrectifier_xrc::Float64\nrectifier_firing_angle::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\ninverter_tap_limits::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\ninverter_xrc::Float64\ninverter_firing_angle::NamedTuple{(:min, :max), Tuple{Float64, Float64}}\nservices::Vector{Service}: Services that this device contributes to\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.VariableReserve","page":"PowerSystems","title":"PowerSystems.VariableReserve","text":"mutable struct VariableReserve{T <: ReserveDirection} <: Reserve{T}\n    name::String\n    available::Bool\n    time_frame::Float64\n    requirement::Float64\n    ext::Dict{String, Any}\n    forecasts::InfrastructureSystems.Forecasts\n    internal::InfrastructureSystemsInternal\nend\n\nData Structure for the procurement products for system simulations.\n\nArguments\n\nname::String\navailable::Bool\ntime_frame::Float64: the relative saturation time_frame, validation range: (0, nothing), action if invalid: error\nrequirement::Float64: the required quantity of the product should be scaled by a Forecast\next::Dict{String, Any}\nforecasts::InfrastructureSystems.Forecasts: internal forecast storage\ninternal::InfrastructureSystemsInternal: power system internal reference, do not modify\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.VirtualInertia","page":"PowerSystems","title":"PowerSystems.VirtualInertia","text":"mutable struct VirtualInertia <: ActivePowerControl\n    Ta::Float64\n    kd::Float64\n    kω::Float64\n    P_ref::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of a Virtual Inertia with SRF using VSM for active power controller\n\nArguments\n\nTa::Float64: VSM inertia constant, validation range: (0, nothing)\nkd::Float64: VSM damping constant, validation range: (0, nothing)\nkω::Float64: frequency droop gain, validation range: (0, nothing)\nP_ref::Float64: Reference Power Set-point, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the VirtualInertia model are:\n\nω_oc: Speed of the rotating reference frame of the virtual synchronous generator model,\nθ_oc: Phase angle displacement of the virtual synchronous generator model\n\nn_states::Int64: VirtualInertia has two states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.add_component!-Union{Tuple{T}, Tuple{System,T}} where T<:Component","page":"PowerSystems","title":"PowerSystems.add_component!","text":"Add a component to the system.\n\nThrows ArgumentError if the component's name is already stored for its concrete type. Throws ArgumentError if any Component-specific rule is violated. Throws InvalidRange if any of the component's field values are outside of defined valid range.\n\nExamples\n\nsys = System(100.0)\n\n# Add a single component.\nadd_component!(sys, bus)\n\n# Add many at once.\nbuses = [bus1, bus2, bus3]\ngenerators = [gen1, gen2, gen3]\nforeach(x -> add_component!(sys, x), Iterators.flatten((buses, generators)))\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, df::DataFrames.DataFrame, component::Any, label::Any) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\nadd_forecast!(sys::System, df::DataFrames.DataFrame, component::Any, label::Any, scaling_factor::Union{Float64, String}) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\n\n\nAdd a forecast to a system from a DataFrames.DataFrame.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!-2","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, filename::AbstractString, component::Component, label::AbstractString) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\nadd_forecast!(sys::System, filename::AbstractString, component::Component, label::AbstractString, scaling_factor::Union{Float64, String}) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\n\n\nAdd a forecast to a system from a CSV file.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!-3","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, ta::TimeSeries.TimeArray, component::Any, label::Any) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\nadd_forecast!(sys::System, ta::TimeSeries.TimeArray, component::Any, label::Any, scaling_factor::Union{Float64, String}) -> Union{Nothing, Set{Tuple{Base.UUID,String}}, InfrastructureSystems._TimeSeriesRecord}\n\n\nAdd a forecast to a system from a TimeSeries.TimeArray.\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of scaling_factor.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.add_forecast!-Tuple{System,Component,Forecast}","page":"PowerSystems","title":"PowerSystems.add_forecast!","text":"add_forecast!(sys::System, component::Component, forecast::Forecast) -> Any\n\n\nAdd forecast to the system.\n\nThrows ArgumentError if the component is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecasts!-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.add_forecasts!","text":"add_forecasts!(sys::System, metadata_file::AbstractString; resolution)\n\n\nAdds forecasts from a metadata file or metadata descriptors.\n\nArguments\n\nsys::System: system\nmetadata_file::AbstractString: metadata file for timeseries that includes an array of IS.TimeseriesFileMetadata instances or a vector.\nresolution::DateTime.Period=nothing: skip forecast that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_forecasts!-Tuple{System,Array{InfrastructureSystems.TimeseriesFileMetadata,1}}","page":"PowerSystems","title":"PowerSystems.add_forecasts!","text":"add_forecasts!(sys::System, timeseries_metadata::Array{InfrastructureSystems.TimeseriesFileMetadata,1}; resolution)\n\n\nAdds forecasts from a metadata file or metadata descriptors.\n\nArguments\n\nsys::System: system\ntimeseries_metadata::Vector{IS.TimeseriesFileMetadata}: metadata for timeseries\nresolution::DateTime.Period=nothing: skip forecast that don't match this resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.add_service!","text":"add_service!(device::Device, service::Service)\n\n\nAdd a service to a device.\n\nThrows ArgumentError if the service is already attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.add_service!-Tuple{System,Service,Any}","page":"PowerSystems","title":"PowerSystems.add_service!","text":"add_service!(sys::System, service::Service, contributing_devices::Any; kwargs...)\n\n\nSimilar to add_component! but for services.\n\nArguments\n\nsys::System: system\nservice::Service: service to add\ncontributing_devices: Must be an iterable of type Device\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.are_forecasts_contiguous-Tuple{Component}","page":"PowerSystems","title":"PowerSystems.are_forecasts_contiguous","text":"are_forecasts_contiguous(component::Component) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.are_forecasts_contiguous-Tuple{System}","page":"PowerSystems","title":"PowerSystems.are_forecasts_contiguous","text":"are_forecasts_contiguous(sys::System) -> Bool\n\n\nReturn true if forecasts are stored contiguously.\n\nThrows ArgumentError if there are no forecasts stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_forecast_consistency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.check_forecast_consistency","text":"check_forecast_consistency(sys::System)\n\n\nThrows DataFormatError if forecasts have inconsistent parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_components!-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_components!","text":"clear_components!(sys::System)\n\n\nRemove all components from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_ext-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_ext","text":"clear_ext(sys::System)\n\n\nClear any value stored in ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_forecasts!-Tuple{System}","page":"PowerSystems","title":"PowerSystems.clear_forecasts!","text":"clear_forecasts!(sys::System)\n\n\nRemove all forecasts from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.clear_services!-Tuple{Device}","page":"PowerSystems","title":"PowerSystems.clear_services!","text":"clear_services!(device::Device) -> Any\n\n\nRemove all services attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.convert_component!-Tuple{Type{Line},MonitoredLine,System}","page":"PowerSystems","title":"PowerSystems.convert_component!","text":"convert_component!(linetype::Type{Line}, line::MonitoredLine, sys::System; kwargs...)\n\n\nConverts a MonitoredLine component to a Line component and replaces the original in the system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.convert_component!-Tuple{Type{MonitoredLine},Line,System}","page":"PowerSystems","title":"PowerSystems.convert_component!","text":"convert_component!(linetype::Type{MonitoredLine}, line::Line, sys::System; kwargs...)\n\n\nConverts a Line component to a MonitoredLine component and replaces the original in the system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.generate_initial_times-Tuple{InfrastructureSystems.InfrastructureSystemsType,Dates.Period,Int64}","page":"PowerSystems","title":"PowerSystems.generate_initial_times","text":"generate_initial_times(component::InfrastructureSystems.InfrastructureSystemsType, interval::Dates.Period, horizon::Int64; initial_time) -> Array{Dates.DateTime,1}\n\n\nGenerate initial times for a component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.generate_initial_times-Tuple{System,Dates.Period,Int64}","page":"PowerSystems","title":"PowerSystems.generate_initial_times","text":"generate_initial_times(sys::System, interval::Dates.Period, horizon::Int64; initial_time) -> Array{Dates.DateTime,1}\n\n\nresult regardless of whether the forecasts have been stored as one contiguous array or chunks of contiguous arrays, such as one 365-day forecast vs 365 one-day forecasts.\n\nThrows ArgumentError if there are no forecasts stored, interval is not a multiple of the system's forecast resolution, or if the stored forecasts have overlapping timestamps.\n\nArguments\n\nsys::System: System.\ninterval::Dates.Period: Amount of time in between each initial time.\nhorizon::Int: Length of each forecast array.\ninitial_time::Union{Nothing, Dates.DateTime}=nothing: Start with this time. If nothing, use the first initial time.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_AT-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_AT","text":"get_AT(value::GasTG) -> Float64\n\n\nGet GasTG AT.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ae-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Ae","text":"get_Ae(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ae-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ae","text":"get_Ae(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Be-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Be","text":"get_Be(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Be-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Be","text":"get_Be(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D","text":"get_D(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_D","text":"get_D(value::SingleMass) -> Float64\n\n\nGet SingleMass D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_12-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_12","text":"get_D_12(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_12.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_23-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_23","text":"get_D_23(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_23.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_34-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_34","text":"get_D_34(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_34.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_45-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_45","text":"get_D_45(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_45.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_ex","text":"get_D_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_hp","text":"get_D_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_ip","text":"get_D_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_D_lp","text":"get_D_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft D_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_D_turb-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_D_turb","text":"get_D_turb(value::GasTG) -> Float64\n\n\nGet GasTG D_turb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_E_sat-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_E_sat","text":"get_E_sat(value::AC1A) -> Tuple{Float64,Float64}\n\n\nGet AC1A E_sat.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_E_sat-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_E_sat","text":"get_E_sat(value::ModifiedAC1A) -> Tuple{Float64,Float64}\n\n\nGet ModifiedAC1A E_sat.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H","text":"get_H(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_H","text":"get_H(value::SingleMass) -> Float64\n\n\nGet SingleMass H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_ex","text":"get_H_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_hp","text":"get_H_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_ip","text":"get_H_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_H_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_H_lp","text":"get_H_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft H_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_I_lr-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_I_lr","text":"get_I_lr(value::ST1A) -> Float64\n\n\nGet ST1A I_lr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K0-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_K0","text":"get_K0(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII K0.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_d-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_K_d","text":"get_K_d(value::AGC) -> Float64\n\n\nGet AGC K_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ex-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_ex","text":"get_K_ex(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_hp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_hp","text":"get_K_hp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_i-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_K_i","text":"get_K_i(value::AGC) -> Float64\n\n\nGet AGC K_i.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ip-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_ip","text":"get_K_ip(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_lp-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_K_lp","text":"get_K_lp(value::FiveMassShaft) -> Float64\n\n\nGet FiveMassShaft K_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_lr-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_K_lr","text":"get_K_lr(value::ST1A) -> Float64\n\n\nGet ST1A K_lr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_p-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_K_p","text":"get_K_p(value::AGC) -> Float64\n\n\nGet AGC K_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_p-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_K_p","text":"get_K_p(value::PSSSimple) -> Float64\n\n\nGet PSSSimple K_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_K_ω-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_K_ω","text":"get_K_ω(value::PSSSimple) -> Float64\n\n\nGet PSSSimple K_ω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ka-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Ka","text":"get_Ka(value::AC1A) -> Float64\n\n\nGet AC1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ka-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ka","text":"get_Ka(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ka-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Ka","text":"get_Ka(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ka-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Ka","text":"get_Ka(value::ST1A) -> Float64\n\n\nGet ST1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kc-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Kc","text":"get_Kc(value::AC1A) -> Float64\n\n\nGet AC1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kc-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Kc","text":"get_Kc(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kc-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Kc","text":"get_Kc(value::ST1A) -> Float64\n\n\nGet ST1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kd-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Kd","text":"get_Kd(value::AC1A) -> Float64\n\n\nGet AC1A Kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kd-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Kd","text":"get_Kd(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ke-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Ke","text":"get_Ke(value::AC1A) -> Float64\n\n\nGet AC1A Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ke-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ke","text":"get_Ke(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ke-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Ke","text":"get_Ke(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kf-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Kf","text":"get_Kf(value::AC1A) -> Float64\n\n\nGet AC1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kf-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Kf","text":"get_Kf(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kf-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Kf","text":"get_Kf(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kf-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Kf","text":"get_Kf(value::ST1A) -> Float64\n\n\nGet ST1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kt-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_Kt","text":"get_Kt(value::GasTG) -> Float64\n\n\nGet GasTG Kt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Kv-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_Kv","text":"get_Kv(value::AVRSimple) -> Float64\n\n\nGet AVRSimple Kv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1d","text":"get_L_1d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1d","text":"get_L_1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1q","text":"get_L_1q(value::FullMachine) -> Float64\n\n\nGet FullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_1q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_1q","text":"get_L_1q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ad-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ad","text":"get_L_ad(value::FullMachine) -> Float64\n\n\nGet FullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ad-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ad","text":"get_L_ad(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_aq-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_aq","text":"get_L_aq(value::FullMachine) -> Float64\n\n\nGet FullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_aq-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_aq","text":"get_L_aq(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_d","text":"get_L_d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_d","text":"get_L_d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_f1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_f1d","text":"get_L_f1d(value::FullMachine) -> Float64\n\n\nGet FullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_f1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_f1d","text":"get_L_f1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ff-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ff","text":"get_L_ff(value::FullMachine) -> Float64\n\n\nGet FullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_ff-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_ff","text":"get_L_ff(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_q","text":"get_L_q(value::FullMachine) -> Float64\n\n\nGet FullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_L_q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_L_q","text":"get_L_q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Load_ref-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_Load_ref","text":"get_Load_ref(value::GasTG) -> Float64\n\n\nGet GasTG Load_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_PSS_flags-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_PSS_flags","text":"get_PSS_flags(value::ST1A) -> Int64\n\n\nGet ST1A PSS_flags.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_max-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_P_max","text":"get_P_max(value::TGTypeI) -> Float64\n\n\nGet TGTypeI P_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_min-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_P_min","text":"get_P_min(value::TGTypeI) -> Float64\n\n\nGet TGTypeI P_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_ref-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_P_ref","text":"get_P_ref(value::TGFixed) -> Float64\n\n\nGet TGFixed P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_ref-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_P_ref","text":"get_P_ref(value::TGTypeII) -> Float64\n\n\nGet TGTypeII P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_ref-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_P_ref","text":"get_P_ref(value::TGTypeI) -> Float64\n\n\nGet TGTypeI P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_P_ref-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_P_ref","text":"get_P_ref(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::BaseMachine) -> Float64\n\n\nGet BaseMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::FullMachine) -> Float64\n\n\nGet FullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::GasTG) -> Float64\n\n\nGet GasTG R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::TGTypeII) -> Float64\n\n\nGet TGTypeII R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_R","text":"get_R(value::TGTypeI) -> Float64\n\n\nGet TGTypeI R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1d-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1d","text":"get_R_1d(value::FullMachine) -> Float64\n\n\nGet FullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1d-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1d","text":"get_R_1d(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1q-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1q","text":"get_R_1q(value::FullMachine) -> Float64\n\n\nGet FullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_1q-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_1q","text":"get_R_1q(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_f-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_f","text":"get_R_f(value::FullMachine) -> Float64\n\n\nGet FullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_f-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_R_f","text":"get_R_f(value::SimpleFullMachine) -> Float64\n\n\nGet SimpleFullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_R_th-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_R_th","text":"get_R_th(value::Source) -> Float64\n\n\nGet Source R_th.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Se-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Se","text":"get_Se(value::AC1A) -> Tuple{Float64,Float64}\n\n\nGet AC1A Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Se-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Se","text":"get_Se(value::ModifiedAC1A) -> Tuple{Float64,Float64}\n\n\nGet ModifiedAC1A Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Se-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Se","text":"get_Se(value::RoundRotorMachine) -> Tuple{Float64,Float64}\n\n\nGet RoundRotorMachine Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Se-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Se","text":"get_Se(value::SalientPoleMachine) -> Tuple{Float64,Float64}\n\n\nGet SalientPoleMachine Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T1-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T1","text":"get_T1(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T1-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_T1","text":"get_T1(value::GasTG) -> Float64\n\n\nGet GasTG T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T1-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_T1","text":"get_T1(value::TGTypeII) -> Float64\n\n\nGet TGTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T2-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T2","text":"get_T2(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T2-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_T2","text":"get_T2(value::GasTG) -> Float64\n\n\nGet GasTG T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T2-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_T2","text":"get_T2(value::TGTypeII) -> Float64\n\n\nGet TGTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T3-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T3","text":"get_T3(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T3-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_T3","text":"get_T3(value::GasTG) -> Float64\n\n\nGet GasTG T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T3-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T3","text":"get_T3(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T4-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_T4","text":"get_T4(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T4-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T4","text":"get_T4(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T5-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_T5","text":"get_T5(value::TGTypeI) -> Float64\n\n\nGet TGTypeI T5.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T_AA-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_T_AA","text":"get_T_AA(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_T_AA-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_T_AA","text":"get_T_AA(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::AC1A) -> Float64\n\n\nGet AC1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::ST1A) -> Float64\n\n\nGet ST1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ta-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_Ta","text":"get_Ta(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tb-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Tb","text":"get_Tb(value::AC1A) -> Float64\n\n\nGet AC1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tb-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Tb","text":"get_Tb(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tb-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tb","text":"get_Tb(value::ST1A) -> Float64\n\n\nGet ST1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tb1-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tb1","text":"get_Tb1(value::ST1A) -> Float64\n\n\nGet ST1A Tb1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Tc","text":"get_Tc(value::AC1A) -> Float64\n\n\nGet AC1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Tc","text":"get_Tc(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tc","text":"get_Tc(value::ST1A) -> Float64\n\n\nGet ST1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tc","text":"get_Tc(value::TGTypeI) -> Float64\n\n\nGet TGTypeI Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tc1-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tc1","text":"get_Tc1(value::ST1A) -> Float64\n\n\nGet ST1A Tc1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_p","text":"get_Td0_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Td0_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Td0_pp","text":"get_Td0_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::AC1A) -> Float64\n\n\nGet AC1A Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Te-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Te","text":"get_Te(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tf-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Tf","text":"get_Tf(value::AC1A) -> Float64\n\n\nGet AC1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tf-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tf","text":"get_Tf(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tf-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Tf","text":"get_Tf(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tf-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tf","text":"get_Tf(value::ST1A) -> Float64\n\n\nGet ST1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_p","text":"get_Tq0_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tq0_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Tq0_pp","text":"get_Tq0_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::AC1A) -> Float64\n\n\nGet AC1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Tr-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Tr","text":"get_Tr(value::ST1A) -> Float64\n\n\nGet ST1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Ts-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_Ts","text":"get_Ts(value::TGTypeI) -> Float64\n\n\nGet TGTypeI Ts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_UEL_flags-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_UEL_flags","text":"get_UEL_flags(value::ST1A) -> Int64\n\n\nGet ST1A UEL_flags.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_lim-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_V_lim","text":"get_V_lim(value::GasTG) -> Tuple{Float64,Float64}\n\n\nGet GasTG V_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_pss-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_V_pss","text":"get_V_pss(value::PSSFixed) -> Float64\n\n\nGet PSSFixed V_pss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::AC1A) -> Float64\n\n\nGet AC1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::AVRFixed) -> Float64\n\n\nGet AVRFixed V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::AVRSimple) -> Float64\n\n\nGet AVRSimple V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::ModifiedAC1A) -> Float64\n\n\nGet ModifiedAC1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::ReactivePowerDroop) -> Float64\n\n\nGet ReactivePowerDroop V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_V_ref-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_V_ref","text":"get_V_ref(value::ST1A) -> Float64\n\n\nGet ST1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Va_lim-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Va_lim","text":"get_Va_lim(value::AC1A) -> Tuple{Float64,Float64}\n\n\nGet AC1A Va_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Va_lim-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Va_lim","text":"get_Va_lim(value::ST1A) -> Tuple{Float64,Float64}\n\n\nGet ST1A Va_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vf-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_Vf","text":"get_Vf(value::AVRFixed) -> Float64\n\n\nGet AVRFixed Vf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vi_lim-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Vi_lim","text":"get_Vi_lim(value::ST1A) -> Tuple{Float64,Float64}\n\n\nGet ST1A Vi_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_lim-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_Vr_lim","text":"get_Vr_lim(value::AC1A) -> Tuple{Float64,Float64}\n\n\nGet AC1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_lim-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_Vr_lim","text":"get_Vr_lim(value::ModifiedAC1A) -> Tuple{Float64,Float64}\n\n\nGet ModifiedAC1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_lim-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_Vr_lim","text":"get_Vr_lim(value::ST1A) -> Tuple{Float64,Float64}\n\n\nGet ST1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_max-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Vr_max","text":"get_Vr_max(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_max-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Vr_max","text":"get_Vr_max(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_min-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_Vr_min","text":"get_Vr_min(value::AVRTypeII) -> Float64\n\n\nGet AVRTypeII Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Vr_min-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_Vr_min","text":"get_Vr_min(value::AVRTypeI) -> Float64\n\n\nGet AVRTypeI Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_X_th-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_X_th","text":"get_X_th(value::Source) -> Float64\n\n\nGet Source X_th.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd","text":"get_Xd(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::BaseMachine) -> Float64\n\n\nGet BaseMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_p","text":"get_Xd_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xd_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xd_pp","text":"get_Xd_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xl-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xl","text":"get_Xl(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xl.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xl-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Xl","text":"get_Xl(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Xl.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::SalientPoleMachine) -> Float64\n\n\nGet SalientPoleMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq","text":"get_Xq(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::OneDOneQMachine) -> Float64\n\n\nGet OneDOneQMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::RoundRotorMachine) -> Float64\n\n\nGet RoundRotorMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_p-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_p","text":"get_Xq_p(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::AndersonFouadMachine) -> Float64\n\n\nGet AndersonFouadMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::SimpleAFMachine) -> Float64\n\n\nGet SimpleAFMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Xq_pp-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_Xq_pp","text":"get_Xq_pp(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_Y-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_Y","text":"get_Y(value::FixedAdmittance) -> Complex{Float64}\n\n\nGet FixedAdmittance Y.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::GenericBattery) -> Any\n\n\nGet GenericBattery active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::HydroDispatch) -> Any\n\n\nGet HydroDispatch active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::HydroEnergyReservoir) -> Any\n\n\nGet HydroEnergyReservoir active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::InterruptibleLoad) -> Any\n\n\nGet InterruptibleLoad active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::PowerLoad) -> Any\n\n\nGet PowerLoad active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::RenewableDispatch) -> Any\n\n\nGet RenewableDispatch active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::RenewableFix) -> Any\n\n\nGet RenewableFix active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::Source) -> Float64\n\n\nGet Source active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::ThermalMultiStart) -> Any\n\n\nGet ThermalMultiStart active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_active_power","text":"get_active_power(value::ThermalStandard) -> Any\n\n\nGet ThermalStandard active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::HVDCLine) -> Any\n\n\nGet HVDCLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::Line) -> Any\n\n\nGet Line activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::MonitoredLine) -> Any\n\n\nGet MonitoredLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::PhaseShiftingTransformer) -> Any\n\n\nGet PhaseShiftingTransformer activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::TapTransformer) -> Any\n\n\nGet TapTransformer activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::Transformer2W) -> Any\n\n\nGet Transformer2W activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_flow-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_active_power_flow","text":"get_active_power_flow(value::VSCDCLine) -> Any\n\n\nGet VSCDCLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits","text":"get_active_power_limits(value::HydroDispatch) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HydroDispatch activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits","text":"get_active_power_limits(value::HydroEnergyReservoir) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HydroEnergyReservoir activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits","text":"get_active_power_limits(value::ThermalMultiStart) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet ThermalMultiStart activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits","text":"get_active_power_limits(value::ThermalStandard) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet ThermalStandard activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits_from-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits_from","text":"get_active_power_limits_from(value::HVDCLine) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HVDCLine activepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_active_power_limits_to-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_active_power_limits_to","text":"get_active_power_limits_to(value::HVDCLine) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HVDCLine activepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_aggregation_topology_accessor-Union{Tuple{Type{T}}, Tuple{T}} where T<:AggregationTopology","page":"PowerSystems","title":"PowerSystems.get_aggregation_topology_accessor","text":"get_aggregation_topology_accessor(_::Type{T<:AggregationTopology}) -> typeof(get_area)\n\n\nReturn the method to be called on a Bus to get its AggregationTopology value for this type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_aggregation_topology_mapping-Union{Tuple{T}, Tuple{Type{T},System}} where T<:AggregationTopology","page":"PowerSystems","title":"PowerSystems.get_aggregation_topology_mapping","text":"get_aggregation_topology_mapping(_::Type{T<:AggregationTopology}, sys::System) -> Dict{String,Array{Bus,1}}\n\n\nReturn a mapping of AggregationTopology name to vector of buses within it.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_angle-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_angle","text":"get_angle(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus angle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_angle_limits-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_angle_limits","text":"get_angle_limits(value::Line) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet Line angle_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_angle_limits-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_angle_limits","text":"get_angle_limits(value::MonitoredLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine angle_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::HVDCLine) -> Arc\n\n\nGet HVDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::Line) -> Arc\n\n\nGet Line arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::MonitoredLine) -> Arc\n\n\nGet MonitoredLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::PhaseShiftingTransformer) -> Arc\n\n\nGet PhaseShiftingTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::TapTransformer) -> Arc\n\n\nGet TapTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::Transformer2W) -> Arc\n\n\nGet Transformer2W arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_arc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_arc","text":"get_arc(value::VSCDCLine) -> Arc\n\n\nGet VSCDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_area-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_area","text":"get_area(value::AGC) -> Union{Nothing, Area}\n\n\nGet AGC area.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_area-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_area","text":"get_area(value::Bus) -> Union{Nothing, Area}\n\n\nGet Bus area.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::AGC) -> Bool\n\n\nGet AGC available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::FixedAdmittance) -> Bool\n\n\nGet FixedAdmittance available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::GenericBattery) -> Bool\n\n\nGet GenericBattery available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HVDCLine) -> Bool\n\n\nGet HVDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HydroDispatch) -> Bool\n\n\nGet HydroDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::HydroEnergyReservoir) -> Bool\n\n\nGet HydroEnergyReservoir available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::InterruptibleLoad) -> Bool\n\n\nGet InterruptibleLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Line) -> Bool\n\n\nGet Line available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::MonitoredLine) -> Bool\n\n\nGet MonitoredLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::PhaseShiftingTransformer) -> Bool\n\n\nGet PhaseShiftingTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::PowerLoad) -> Bool\n\n\nGet PowerLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::RenewableDispatch) -> Bool\n\n\nGet RenewableDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::RenewableFix) -> Bool\n\n\nGet RenewableFix available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{ReserveDemandCurve}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::ReserveDemandCurve) -> Bool\n\n\nGet ReserveDemandCurve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Source) -> Bool\n\n\nGet Source available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::StaticReserve) -> Bool\n\n\nGet StaticReserve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::TapTransformer) -> Bool\n\n\nGet TapTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::ThermalMultiStart) -> Bool\n\n\nGet ThermalMultiStart available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::ThermalStandard) -> Bool\n\n\nGet ThermalStandard available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Transfer) -> Bool\n\n\nGet Transfer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::Transformer2W) -> Bool\n\n\nGet Transformer2W available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::VSCDCLine) -> Bool\n\n\nGet VSCDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_available-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_available","text":"get_available(value::VariableReserve) -> Bool\n\n\nGet VariableReserve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_b-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_b","text":"get_b(value::Line) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nGet Line b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_b-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_b","text":"get_b(value::MonitoredLine) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{Component}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(c::Component) -> Float64\n\n\nDefault behavior of a component. If there is no base_power field, assume is in the system's base power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::GenericBattery) -> Float64\n\n\nGet GenericBattery base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::HydroDispatch) -> Float64\n\n\nGet HydroDispatch base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::HydroEnergyReservoir) -> Float64\n\n\nGet HydroEnergyReservoir base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::InterruptibleLoad) -> Float64\n\n\nGet InterruptibleLoad base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::PowerLoad) -> Float64\n\n\nGet PowerLoad base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::RenewableDispatch) -> Float64\n\n\nGet RenewableDispatch base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::RenewableFix) -> Float64\n\n\nGet RenewableFix base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(sys::System) -> Float64\n\n\nReturn the system's base power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::ThermalMultiStart) -> Float64\n\n\nGet ThermalMultiStart base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_power-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_base_power","text":"get_base_power(value::ThermalStandard) -> Float64\n\n\nGet ThermalStandard base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_base_voltage-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_base_voltage","text":"get_base_voltage(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus base_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bias-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_bias","text":"get_bias(value::AGC) -> Float64\n\n\nGet AGC bias.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_breakpoint_upperbounds-Tuple{VariableCost{Array{Tuple{Float64,Float64},1}}}","page":"PowerSystems","title":"PowerSystems.get_breakpoint_upperbounds","text":"get_breakpoint_upperbounds(vc::VariableCost{Array{Tuple{Float64,Float64},1}}) -> Array{Float64,1}\n\n\nCalculates the upper bounds of a variable cost function represented as a collection of piece-wise linear segments.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::FixedAdmittance) -> Bus\n\n\nGet FixedAdmittance bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::GenericBattery) -> Bus\n\n\nGet GenericBattery bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::HydroDispatch) -> Bus\n\n\nGet HydroDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::HydroEnergyReservoir) -> Bus\n\n\nGet HydroEnergyReservoir bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::InterruptibleLoad) -> Bus\n\n\nGet InterruptibleLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::PowerLoad) -> Bus\n\n\nGet PowerLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::RenewableDispatch) -> Bus\n\n\nGet RenewableDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::RenewableFix) -> Bus\n\n\nGet RenewableFix bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::Source) -> Bus\n\n\nGet Source bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{System,Int64}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(sys::System, bus_number::Int64) -> Any\n\n\nReturn bus with bus_number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{System,String}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(sys::System, name::String) -> Union{Nothing, Bus}\n\n\nReturn bus with name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::ThermalMultiStart) -> Bus\n\n\nGet ThermalMultiStart bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_bus","text":"get_bus(value::ThermalStandard) -> Bus\n\n\nGet ThermalStandard bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bus_numbers-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_bus_numbers","text":"get_bus_numbers(sys::System) -> Array{Int64,1}\n\n\nReturn a sorted vector of bus numbers in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_buses-Tuple{System,AggregationTopology}","page":"PowerSystems","title":"PowerSystems.get_buses","text":"get_buses(sys::System, aggregator::AggregationTopology) -> Array{Bus,1}\n\n\nReturn a vector of buses contained within the AggregationTopology.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_buses-Tuple{System,Set{Int64}}","page":"PowerSystems","title":"PowerSystems.get_buses","text":"get_buses(sys::System, bus_numbers::Set{Int64}) -> Array{Bus,1}\n\n\nReturn all buses values with bus_numbers.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_bustype-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_bustype","text":"get_bustype(value::Bus) -> Union{Nothing, PowerSystems.BusTypes.BusType}\n\n\nGet Bus bustype.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_cf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_cf","text":"get_cf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_cf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_cf","text":"get_cf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_component-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_component","text":"Get the component of type T with name. Returns nothing if no component matches. If T is an abstract type then the names of components across all subtypes of T must be unique.\n\nSee get_components_by_name for abstract types with non-unique names across subtypes.\n\nThrows ArgumentError if T is not a concrete type and there is more than one component with     requested name\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_components-Union{Tuple{T}, Tuple{Type{T},System}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_components","text":"Returns an iterator of components. T can be concrete or abstract. Call collect on the result if an array is desired.\n\nExamples\n\niter = PowerSystems.get_components(ThermalStandard, sys)\niter = PowerSystems.get_components(Generator, sys)\niter = PowerSystems.get_components(Generator, sys, x->(PowerSystems.get_available(x)))\ngenerators = collect(PowerSystems.get_components(Generator, sys))\n\nSee also: iterate_components\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_components_by_name-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.get_components_by_name","text":"get_components_by_name(_::Type{T<:Component}, sys::System, name::AbstractString) -> Array{T<:Component,1}\n\n\nGet the components of abstract type T with name. Note that PowerSystems enforces unique names on each concrete type but not across concrete types.\n\nSee get_component if the concrete type is known.\n\nThrows ArgumentError if T is not an abstract type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_components_in_aggregation_topology-Union{Tuple{T}, Tuple{Type{T},System,AggregationTopology}} where T<:StaticInjection","page":"PowerSystems","title":"PowerSystems.get_components_in_aggregation_topology","text":"get_components_in_aggregation_topology(_::Type{T<:StaticInjection}, sys::System, aggregator::AggregationTopology) -> Array{_A,1} where _A\n\n\nReturn a vector of components with buses in the AggregationTopology.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_contributing_device_mapping-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_contributing_device_mapping","text":"get_contributing_device_mapping(sys::System) -> Dict{NamedTuple{(:type, :name),Tuple{DataType,String}},ServiceContributingDevices}\n\n\nReturn an instance of ServiceContributingDevicesMapping.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_contributing_devices-Union{Tuple{T}, Tuple{System,T}} where T<:Service","page":"PowerSystems","title":"PowerSystems.get_contributing_devices","text":"get_contributing_devices(sys::System, service::T<:Service) -> Any\n\n\nReturn a vector of devices contributing to the service.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_delta_t-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_delta_t","text":"get_delta_t(value::AGC) -> Float64\n\n\nGet AGC delta_t.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::GenericBattery) -> Union{Nothing, DynamicInjection}\n\n\nGet GenericBattery dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::HydroDispatch) -> Union{Nothing, DynamicInjection}\n\n\nGet HydroDispatch dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::HydroEnergyReservoir) -> Union{Nothing, DynamicInjection}\n\n\nGet HydroEnergyReservoir dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::InterruptibleLoad) -> Union{Nothing, DynamicInjection}\n\n\nGet InterruptibleLoad dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::PowerLoad) -> Union{Nothing, DynamicInjection}\n\n\nGet PowerLoad dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::RenewableDispatch) -> Union{Nothing, DynamicInjection}\n\n\nGet RenewableDispatch dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::RenewableFix) -> Union{Nothing, DynamicInjection}\n\n\nGet RenewableFix dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::ThermalMultiStart) -> Union{Nothing, DynamicInjection}\n\n\nGet ThermalMultiStart dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dynamic_injector-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_dynamic_injector","text":"get_dynamic_injector(value::ThermalStandard) -> Union{Nothing, DynamicInjection}\n\n\nGet ThermalStandard dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_efficiency-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_efficiency","text":"get_efficiency(value::GenericBattery) -> NamedTuple{(:in, :out),Tuple{Float64,Float64}}\n\n\nGet GenericBattery efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_efficiency-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_efficiency","text":"get_efficiency(value::TGFixed) -> Float64\n\n\nGet TGFixed efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_eq_p-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_eq_p","text":"get_eq_p(value::BaseMachine) -> Float64\n\n\nGet BaseMachine eq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AC1A) -> Dict{String,Any}\n\n\nGet AC1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AGC) -> Dict{String,Any}\n\n\nGet AGC ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRFixed) -> Dict{String,Any}\n\n\nGet AVRFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRSimple) -> Dict{String,Any}\n\n\nGet AVRSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRTypeII) -> Dict{String,Any}\n\n\nGet AVRTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AVRTypeI) -> Dict{String,Any}\n\n\nGet AVRTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AndersonFouadMachine) -> Dict{String,Any}\n\n\nGet AndersonFouadMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{AverageConverter}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::AverageConverter) -> Dict{String,Any}\n\n\nGet AverageConverter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::BaseMachine) -> Dict{String,Any}\n\n\nGet BaseMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Bus) -> Dict{String,Any}\n\n\nGet Bus ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::CurrentControl) -> Dict{String,Any}\n\n\nGet CurrentControl ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FiveMassShaft) -> Dict{String,Any}\n\n\nGet FiveMassShaft ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FixedAdmittance) -> Dict{String,Any}\n\n\nGet FixedAdmittance ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FixedDCSource) -> Dict{String,Any}\n\n\nGet FixedDCSource ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::FullMachine) -> Dict{String,Any}\n\n\nGet FullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::GasTG) -> Dict{String,Any}\n\n\nGet GasTG ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::GenericBattery) -> Dict{String,Any}\n\n\nGet GenericBattery ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HVDCLine) -> Dict{String,Any}\n\n\nGet HVDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HydroDispatch) -> Dict{String,Any}\n\n\nGet HydroDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::HydroEnergyReservoir) -> Dict{String,Any}\n\n\nGet HydroEnergyReservoir ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::InterruptibleLoad) -> Dict{String,Any}\n\n\nGet InterruptibleLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::KauraPLL) -> Dict{String,Any}\n\n\nGet KauraPLL ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::LCLFilter) -> Dict{String,Any}\n\n\nGet LCLFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Line) -> Dict{String,Any}\n\n\nGet Line ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::MarconatoMachine) -> Dict{String,Any}\n\n\nGet MarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ModifiedAC1A) -> Dict{String,Any}\n\n\nGet ModifiedAC1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::MonitoredLine) -> Dict{String,Any}\n\n\nGet MonitoredLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::OneDOneQMachine) -> Dict{String,Any}\n\n\nGet OneDOneQMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PSSFixed) -> Dict{String,Any}\n\n\nGet PSSFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PSSSimple) -> Dict{String,Any}\n\n\nGet PSSSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PhaseShiftingTransformer) -> Dict{String,Any}\n\n\nGet PhaseShiftingTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PowerLoad) -> Dict{String,Any}\n\n\nGet PowerLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::PowerSystems.LCFilter) -> Dict{String,Any}\n\n\nGet LCFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ReactivePowerDroop) -> Dict{String,Any}\n\n\nGet ReactivePowerDroop ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::RenewableDispatch) -> Dict{String,Any}\n\n\nGet RenewableDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::RenewableFix) -> Dict{String,Any}\n\n\nGet RenewableFix ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ReserveDemandCurve}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ReserveDemandCurve) -> Dict{String,Any}\n\n\nGet ReserveDemandCurve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::RoundRotorMachine) -> Dict{String,Any}\n\n\nGet RoundRotorMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ST1A) -> Dict{String,Any}\n\n\nGet ST1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SalientPoleMachine) -> Dict{String,Any}\n\n\nGet SalientPoleMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleAFMachine) -> Dict{String,Any}\n\n\nGet SimpleAFMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleFullMachine) -> Dict{String,Any}\n\n\nGet SimpleFullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SimpleMarconatoMachine) -> Dict{String,Any}\n\n\nGet SimpleMarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::SingleMass) -> Dict{String,Any}\n\n\nGet SingleMass ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Source) -> Dict{String,Any}\n\n\nGet Source ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::StaticReserve) -> Dict{String,Any}\n\n\nGet StaticReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(sys::System) -> Union{Nothing, Dict{String,Any}}\n\n\nReturn a user-modifiable dictionary to store extra information.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGFixed) -> Dict{String,Any}\n\n\nGet TGFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGTypeII) -> Dict{String,Any}\n\n\nGet TGTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TGTypeI) -> Dict{String,Any}\n\n\nGet TGTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::TapTransformer) -> Dict{String,Any}\n\n\nGet TapTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ThermalMultiStart) -> Dict{String,Any}\n\n\nGet ThermalMultiStart ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::ThermalStandard) -> Dict{String,Any}\n\n\nGet ThermalStandard ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Transfer) -> Dict{String,Any}\n\n\nGet Transfer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::Transformer2W) -> Dict{String,Any}\n\n\nGet Transformer2W ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VSCDCLine) -> Dict{String,Any}\n\n\nGet VSCDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VariableReserve) -> Dict{String,Any}\n\n\nGet VariableReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ext-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_ext","text":"get_ext(value::VirtualInertia) -> Dict{String,Any}\n\n\nGet VirtualInertia ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fixed-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_fixed","text":"get_fixed(value::MultiStartCost) -> Float64\n\n\nGet MultiStartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fixed-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_fixed","text":"get_fixed(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fixed-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_fixed","text":"get_fixed(value::TwoPartCost) -> Float64\n\n\nGet TwoPartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_flow_limits-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_flow_limits","text":"get_flow_limits(value::MonitoredLine) -> NamedTuple{(:from_to, :to_from),Tuple{Float64,Float64}}\n\n\nGet MonitoredLine flow_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast-Union{Tuple{T}, Tuple{Type{T},Component,Dates.DateTime,AbstractString}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.get_forecast","text":"Return a forecast for the entire time series range stored for these parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast-Union{Tuple{T}, Tuple{Type{T},InfrastructureSystems.InfrastructureSystemsType,Dates.DateTime,AbstractString,Int64}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.get_forecast","text":"get_forecast(_::Type{T<:Forecast}, component::InfrastructureSystems.InfrastructureSystemsType, initial_time::Dates.DateTime, label::AbstractString, horizon::Int64) -> Any\n\n\nReturn a forecast for a subset of the time series range stored for these parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_initial_times-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecast_initial_times","text":"get_forecast_initial_times(sys::System) -> Array{Dates.DateTime,1}\n\n\nReturn sorted forecast initial times.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_values-Union{Tuple{T}, Tuple{Type{T},Component,Dates.DateTime,AbstractString}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.get_forecast_values","text":"get_forecast_values(_::Type{T<:Forecast}, component::Component, initial_time::Dates.DateTime, label::AbstractString) -> Any\n\n\nReturn a TimeSeries.TimeArray where the forecast data has been multiplied by the forecasted component field.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_horizon-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_horizon","text":"get_forecasts_horizon(sys::System) -> Int64\n\n\nReturn the horizon for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_initial_time-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_initial_time","text":"get_forecasts_initial_time(sys::System) -> Dates.DateTime\n\n\nReturn the earliest initial_time for a forecast.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_interval-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_interval","text":"get_forecasts_interval(sys::System) -> Union{Dates.Millisecond, Dates.Second}\n\n\nReturn the interval for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecasts_resolution-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_forecasts_resolution","text":"get_forecasts_resolution(sys::System) -> Dates.Period\n\n\nReturn the resolution for all forecasts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_frequency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.get_frequency","text":"get_frequency(sys::System) -> Float64\n\n\nReturn the system's frequency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_from-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_from","text":"get_from(value::Arc) -> Bus\n\n\nGet Arc from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fuel-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_fuel","text":"get_fuel(value::ThermalMultiStart) -> PowerSystems.ThermalFuels.ThermalFuel\n\n\nGet ThermalMultiStart fuel.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_fuel-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_fuel","text":"get_fuel(value::ThermalStandard) -> PowerSystems.ThermalFuels.ThermalFuel\n\n\nGet ThermalStandard fuel.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inflow-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_inflow","text":"get_inflow(value::HydroEnergyReservoir) -> Float64\n\n\nGet HydroEnergyReservoir inflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_initial_ace-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_initial_ace","text":"get_initial_ace(value::AGC) -> Float64\n\n\nGet AGC initial_ace.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_initial_energy-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_initial_energy","text":"get_initial_energy(value::GenericBattery) -> Any\n\n\nGet GenericBattery initial_energy.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_initial_storage-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_initial_storage","text":"get_initial_storage(value::HydroEnergyReservoir) -> Any\n\n\nGet HydroEnergyReservoir initial_storage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_input_active_power_limits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_input_active_power_limits","text":"get_input_active_power_limits(value::GenericBattery) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet GenericBattery inputactivepower_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AC1A) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AC1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AGC}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AGC) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AGC internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRSimple) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRTypeII) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AVRTypeI) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AVRTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::AndersonFouadMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet AndersonFouadMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Arc) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Arc internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Area}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Area) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Area internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::BaseMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet BaseMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Bus) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Bus internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FiveMassShaft) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FiveMassShaft internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FixedAdmittance) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FixedAdmittance internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FixedDCSource) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FixedDCSource internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::FullMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet FullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::GasTG) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet GasTG internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::GenericBattery) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet GenericBattery internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HVDCLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HVDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HydroDispatch) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HydroDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::HydroEnergyReservoir) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet HydroEnergyReservoir internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::InterruptibleLoad) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet InterruptibleLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Line) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Line internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{LoadZone}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::LoadZone) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet LoadZone internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::MarconatoMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet MarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ModifiedAC1A) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ModifiedAC1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::MonitoredLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet MonitoredLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::MultiStartCost) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet MultiStartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::OneDOneQMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet OneDOneQMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PSSFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PSSFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PSSSimple) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PSSSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PhaseShiftingTransformer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PhaseShiftingTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::PowerLoad) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet PowerLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::RenewableDispatch) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet RenewableDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::RenewableFix) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet RenewableFix internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ReserveDemandCurve}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ReserveDemandCurve) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ReserveDemandCurve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::RoundRotorMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet RoundRotorMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ST1A) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ST1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SalientPoleMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SalientPoleMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleAFMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleAFMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleFullMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleFullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SimpleMarconatoMachine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SimpleMarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::SingleMass) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet SingleMass internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Source) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Source internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::StaticReserve) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet StaticReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGFixed) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGTypeII) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TGTypeI) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TGTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TapTransformer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TapTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ThermalMultiStart) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ThermalMultiStart internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ThermalStandard) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ThermalStandard internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::ThreePartCost) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet ThreePartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Transfer) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Transfer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::Transformer2W) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet Transformer2W internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::TwoPartCost) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet TwoPartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::VSCDCLine) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet VSCDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_internal","text":"get_internal(value::VariableReserve) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nGet VariableReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal_angle-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_internal_angle","text":"get_internal_angle(value::Source) -> Float64\n\n\nGet Source internal_angle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_internal_voltage-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_internal_voltage","text":"get_internal_voltage(value::Source) -> Float64\n\n\nGet Source internal_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_d_fluxlink-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_d_fluxlink","text":"get_inv_d_fluxlink(value::FullMachine) -> Array{Float64,2}\n\n\nGet FullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_d_fluxlink-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_d_fluxlink","text":"get_inv_d_fluxlink(value::SimpleFullMachine) -> Array{Float64,2}\n\n\nGet SimpleFullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_q_fluxlink-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_q_fluxlink","text":"get_inv_q_fluxlink(value::FullMachine) -> Array{Float64,2}\n\n\nGet FullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inv_q_fluxlink-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_inv_q_fluxlink","text":"get_inv_q_fluxlink(value::SimpleFullMachine) -> Array{Float64,2}\n\n\nGet SimpleFullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_firing_angle-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_firing_angle","text":"get_inverter_firing_angle(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine inverterfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_tap_limits-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_tap_limits","text":"get_inverter_tap_limits(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine invertertaplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_inverter_xrc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_inverter_xrc","text":"get_inverter_xrc(value::VSCDCLine) -> Float64\n\n\nGet VSCDCLine inverter_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kad-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kad","text":"get_kad(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kd-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_kd","text":"get_kd(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kffi-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kffi","text":"get_kffi(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kffi.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kffv-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kffv","text":"get_kffv(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kffv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ki_pll-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_ki_pll","text":"get_ki_pll(value::KauraPLL) -> Float64\n\n\nGet KauraPLL ki_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kic-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kic","text":"get_kic(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kic.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kiv-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kiv","text":"get_kiv(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kiv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kp_pll-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_kp_pll","text":"get_kp_pll(value::KauraPLL) -> Float64\n\n\nGet KauraPLL kp_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kpc-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kpc","text":"get_kpc(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kpc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kpv-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_kpv","text":"get_kpv(value::CurrentControl) -> Float64\n\n\nGet CurrentControl kpv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kq-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_kq","text":"get_kq(value::ReactivePowerDroop) -> Float64\n\n\nGet ReactivePowerDroop kq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_kω-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_kω","text":"get_kω(value::VirtualInertia) -> Float64\n\n\nGet VirtualInertia kω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_lf","text":"get_lf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_lf","text":"get_lf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lg-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_lg","text":"get_lg(value::LCLFilter) -> Float64\n\n\nGet LCLFilter lg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_load_response-Tuple{Area}","page":"PowerSystems","title":"PowerSystems.get_load_response","text":"get_load_response(value::Area) -> Float64\n\n\nGet Area load_response.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_load_zone-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_load_zone","text":"get_load_zone(value::Bus) -> Union{Nothing, LoadZone}\n\n\nGet Bus load_zone.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_loss-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_loss","text":"get_loss(value::HVDCLine) -> NamedTuple{(:l0, :l1),Tuple{Float64,Float64}}\n\n\nGet HVDCLine loss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_lv-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_lv","text":"get_lv(value::CurrentControl) -> Float64\n\n\nGet CurrentControl lv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_magnitude-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_magnitude","text":"get_magnitude(value::Bus) -> Union{Nothing, Float64}\n\n\nGet Bus magnitude.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_max_active_power-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_max_active_power","text":"get_max_active_power(value::InterruptibleLoad) -> Any\n\n\nGet InterruptibleLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_max_active_power-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_max_active_power","text":"get_max_active_power(value::PowerLoad) -> Any\n\n\nGet PowerLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_max_reactive_power-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_max_reactive_power","text":"get_max_reactive_power(value::InterruptibleLoad) -> Any\n\n\nGet InterruptibleLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_max_reactive_power-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_max_reactive_power","text":"get_max_reactive_power(value::PowerLoad) -> Any\n\n\nGet PowerLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_model-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_model","text":"get_model(value::InterruptibleLoad) -> PowerSystems.LoadModels.LoadModel\n\n\nGet InterruptibleLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_model-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_model","text":"get_model(value::PowerLoad) -> Union{Nothing, PowerSystems.LoadModels.LoadModel}\n\n\nGet PowerLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_must_run-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_must_run","text":"get_must_run(value::ThermalMultiStart) -> Bool\n\n\nGet ThermalMultiStart must_run.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AC1A) -> Int64\n\n\nGet AC1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRFixed) -> Int64\n\n\nGet AVRFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRSimple) -> Int64\n\n\nGet AVRSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRTypeII) -> Int64\n\n\nGet AVRTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AVRTypeI) -> Int64\n\n\nGet AVRTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AndersonFouadMachine) -> Int64\n\n\nGet AndersonFouadMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{AverageConverter}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::AverageConverter) -> Int64\n\n\nGet AverageConverter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::BaseMachine) -> Int64\n\n\nGet BaseMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::CurrentControl) -> Int64\n\n\nGet CurrentControl n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{DynamicBranch}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::DynamicBranch) -> Int64\n\n\nGet n_states\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FiveMassShaft) -> Int64\n\n\nGet FiveMassShaft n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FixedDCSource) -> Int64\n\n\nGet FixedDCSource n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::FullMachine) -> Int64\n\n\nGet FullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::GasTG) -> Int64\n\n\nGet GasTG n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::KauraPLL) -> Int64\n\n\nGet KauraPLL n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::LCLFilter) -> Int64\n\n\nGet LCLFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::MarconatoMachine) -> Int64\n\n\nGet MarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::ModifiedAC1A) -> Int64\n\n\nGet ModifiedAC1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::OneDOneQMachine) -> Int64\n\n\nGet OneDOneQMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PSSFixed) -> Int64\n\n\nGet PSSFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PSSSimple) -> Int64\n\n\nGet PSSSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::PowerSystems.LCFilter) -> Int64\n\n\nGet LCFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::ReactivePowerDroop) -> Int64\n\n\nGet ReactivePowerDroop n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::RoundRotorMachine) -> Int64\n\n\nGet RoundRotorMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::ST1A) -> Int64\n\n\nGet ST1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SalientPoleMachine) -> Int64\n\n\nGet SalientPoleMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleAFMachine) -> Int64\n\n\nGet SimpleAFMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleFullMachine) -> Int64\n\n\nGet SimpleFullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SimpleMarconatoMachine) -> Int64\n\n\nGet SimpleMarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::SingleMass) -> Int64\n\n\nGet SingleMass n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGFixed) -> Int64\n\n\nGet TGFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGTypeII) -> Int64\n\n\nGet TGTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::TGTypeI) -> Int64\n\n\nGet TGTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_n_states-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_n_states","text":"get_n_states(value::VirtualInertia) -> Int64\n\n\nGet VirtualInertia n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_no_load-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_no_load","text":"get_no_load(value::MultiStartCost) -> Float64\n\n\nGet MultiStartCost no_load.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_number-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_number","text":"get_number(value::Bus) -> Int64\n\n\nGet Bus number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::HydroEnergyReservoir) -> TwoPartCost\n\n\nGet HydroEnergyReservoir operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::InterruptibleLoad) -> TwoPartCost\n\n\nGet InterruptibleLoad operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::RenewableDispatch) -> TwoPartCost\n\n\nGet RenewableDispatch operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{ReserveDemandCurve}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::ReserveDemandCurve) -> TwoPartCost\n\n\nGet ReserveDemandCurve operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::ThermalMultiStart) -> MultiStartCost\n\n\nGet ThermalMultiStart operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_operation_cost-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_operation_cost","text":"get_operation_cost(value::ThermalStandard) -> ThreePartCost\n\n\nGet ThermalStandard operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_output_active_power_limits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_output_active_power_limits","text":"get_output_active_power_limits(value::GenericBattery) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet GenericBattery outputactivepower_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_peak_active_power-Tuple{Area}","page":"PowerSystems","title":"PowerSystems.get_peak_active_power","text":"get_peak_active_power(value::Area) -> Float64\n\n\nGet Area peakactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_peak_active_power-Tuple{LoadZone}","page":"PowerSystems","title":"PowerSystems.get_peak_active_power","text":"get_peak_active_power(value::LoadZone) -> Float64\n\n\nGet LoadZone peakactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_peak_reactive_power-Tuple{Area}","page":"PowerSystems","title":"PowerSystems.get_peak_reactive_power","text":"get_peak_reactive_power(value::Area) -> Float64\n\n\nGet Area peakreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_peak_reactive_power-Tuple{LoadZone}","page":"PowerSystems","title":"PowerSystems.get_peak_reactive_power","text":"get_peak_reactive_power(value::LoadZone) -> Float64\n\n\nGet LoadZone peakreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_power_factor-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_power_factor","text":"get_power_factor(value::RenewableDispatch) -> Float64\n\n\nGet RenewableDispatch power_factor.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_power_factor-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_power_factor","text":"get_power_factor(value::RenewableFix) -> Float64\n\n\nGet RenewableFix power_factor.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_power_trajectory-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_power_trajectory","text":"get_power_trajectory(value::ThermalMultiStart) -> Union{Nothing, NamedTuple{(:startup, :shutdown),Tuple{Float64,Float64}}}\n\n\nGet ThermalMultiStart power_trajectory.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primary_shunt-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_primary_shunt","text":"get_primary_shunt(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primary_shunt-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_primary_shunt","text":"get_primary_shunt(value::TapTransformer) -> Float64\n\n\nGet TapTransformer primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_primary_shunt-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_primary_shunt","text":"get_primary_shunt(value::Transformer2W) -> Float64\n\n\nGet Transformer2W primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::GenericBattery) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet GenericBattery prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::HydroDispatch) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet HydroDispatch prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::HydroEnergyReservoir) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet HydroEnergyReservoir prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::RenewableDispatch) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet RenewableDispatch prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::RenewableFix) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet RenewableFix prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::ThermalMultiStart) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet ThermalMultiStart prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_prime_mover-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_prime_mover","text":"get_prime_mover(value::ThermalStandard) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nGet ThermalStandard prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::Line) -> Float64\n\n\nGet Line r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::TapTransformer) -> Float64\n\n\nGet TapTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_r-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_r","text":"get_r(value::Transformer2W) -> Float64\n\n\nGet Transformer2W r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramp_limits-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_ramp_limits","text":"get_ramp_limits(value::HydroDispatch) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet HydroDispatch ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramp_limits-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_ramp_limits","text":"get_ramp_limits(value::HydroEnergyReservoir) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet HydroEnergyReservoir ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramp_limits-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_ramp_limits","text":"get_ramp_limits(value::ThermalMultiStart) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet ThermalMultiStart ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ramp_limits-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_ramp_limits","text":"get_ramp_limits(value::ThermalStandard) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet ThermalStandard ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::Line) -> Any\n\n\nGet Line rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::MonitoredLine) -> Any\n\n\nGet MonitoredLine rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::PhaseShiftingTransformer) -> Any\n\n\nGet PhaseShiftingTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::TapTransformer) -> Any\n\n\nGet TapTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rate-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_rate","text":"get_rate(value::Transformer2W) -> Any\n\n\nGet Transformer2W rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rated_current-Tuple{AverageConverter}","page":"PowerSystems","title":"PowerSystems.get_rated_current","text":"get_rated_current(value::AverageConverter) -> Float64\n\n\nGet AverageConverter rated_current.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rated_voltage-Tuple{AverageConverter}","page":"PowerSystems","title":"PowerSystems.get_rated_voltage","text":"get_rated_voltage(value::AverageConverter) -> Float64\n\n\nGet AverageConverter rated_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::GenericBattery) -> Any\n\n\nGet GenericBattery rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::HydroDispatch) -> Any\n\n\nGet HydroDispatch rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::HydroEnergyReservoir) -> Any\n\n\nGet HydroEnergyReservoir rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::RenewableDispatch) -> Float64\n\n\nGet RenewableDispatch rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::RenewableFix) -> Any\n\n\nGet RenewableFix rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::ThermalMultiStart) -> Any\n\n\nGet ThermalMultiStart rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rating-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_rating","text":"get_rating(value::ThermalStandard) -> Any\n\n\nGet ThermalStandard rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::GenericBattery) -> Any\n\n\nGet GenericBattery reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::HydroDispatch) -> Any\n\n\nGet HydroDispatch reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::HydroEnergyReservoir) -> Any\n\n\nGet HydroEnergyReservoir reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::InterruptibleLoad) -> Any\n\n\nGet InterruptibleLoad reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::PowerLoad) -> Any\n\n\nGet PowerLoad reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::RenewableDispatch) -> Any\n\n\nGet RenewableDispatch reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::RenewableFix) -> Any\n\n\nGet RenewableFix reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::Source) -> Float64\n\n\nGet Source reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::ThermalMultiStart) -> Any\n\n\nGet ThermalMultiStart reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_reactive_power","text":"get_reactive_power(value::ThermalStandard) -> Any\n\n\nGet ThermalStandard reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_flow-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_flow","text":"get_reactive_power_flow(value::Line) -> Any\n\n\nGet Line reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_flow-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_flow","text":"get_reactive_power_flow(value::MonitoredLine) -> Any\n\n\nGet MonitoredLine reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_flow-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_flow","text":"get_reactive_power_flow(value::PhaseShiftingTransformer) -> Any\n\n\nGet PhaseShiftingTransformer reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_flow-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_flow","text":"get_reactive_power_flow(value::TapTransformer) -> Any\n\n\nGet TapTransformer reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_flow-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_flow","text":"get_reactive_power_flow(value::Transformer2W) -> Any\n\n\nGet Transformer2W reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::GenericBattery) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet GenericBattery reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::HydroDispatch) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet HydroDispatch reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::HydroEnergyReservoir) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet HydroEnergyReservoir reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::RenewableDispatch) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet RenewableDispatch reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::ThermalMultiStart) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet ThermalMultiStart reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits","text":"get_reactive_power_limits(value::ThermalStandard) -> Union{Nothing, NamedTuple{(:min, :max),_A} where _A<:Tuple}\n\n\nGet ThermalStandard reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits_from-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits_from","text":"get_reactive_power_limits_from(value::HVDCLine) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HVDCLine reactivepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_reactive_power_limits_to-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_reactive_power_limits_to","text":"get_reactive_power_limits_to(value::HVDCLine) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet HVDCLine reactivepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_firing_angle-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_firing_angle","text":"get_rectifier_firing_angle(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine rectifierfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_tap_limits-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_tap_limits","text":"get_rectifier_tap_limits(value::VSCDCLine) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nGet VSCDCLine rectifiertaplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rectifier_xrc-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_rectifier_xrc","text":"get_rectifier_xrc(value::VSCDCLine) -> Float64\n\n\nGet VSCDCLine rectifier_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::StaticReserve) -> Float64\n\n\nGet StaticReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{Transfer}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::Transfer) -> Float64\n\n\nGet Transfer requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_requirement-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_requirement","text":"get_requirement(value::VariableReserve) -> Float64\n\n\nGet VariableReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rf-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_rf","text":"get_rf(value::LCLFilter) -> Float64\n\n\nGet LCLFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rf-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_rf","text":"get_rf(value::PowerSystems.LCFilter) -> Float64\n\n\nGet LCFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rg-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_rg","text":"get_rg(value::LCLFilter) -> Float64\n\n\nGet LCLFilter rg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_rv-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_rv","text":"get_rv(value::CurrentControl) -> Float64\n\n\nGet CurrentControl rv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_saturation_coeffs-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_saturation_coeffs","text":"get_saturation_coeffs(value::AC1A) -> Tuple{Float64,Float64}\n\n\nGet AC1A saturation_coeffs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_saturation_coeffs-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_saturation_coeffs","text":"get_saturation_coeffs(value::ModifiedAC1A) -> Tuple{Float64,Float64}\n\n\nGet ModifiedAC1A saturation_coeffs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{FixedAdmittance}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::FixedAdmittance) -> Array{Service,1}\n\n\nGet FixedAdmittance services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::GenericBattery) -> Array{Service,1}\n\n\nGet GenericBattery services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HVDCLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HVDCLine) -> Array{Service,1}\n\n\nGet HVDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HydroDispatch) -> Array{Service,1}\n\n\nGet HydroDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::HydroEnergyReservoir) -> Array{Service,1}\n\n\nGet HydroEnergyReservoir services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{InterruptibleLoad}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::InterruptibleLoad) -> Array{Service,1}\n\n\nGet InterruptibleLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Line) -> Array{Service,1}\n\n\nGet Line services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::MonitoredLine) -> Array{Service,1}\n\n\nGet MonitoredLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::PhaseShiftingTransformer) -> Array{Service,1}\n\n\nGet PhaseShiftingTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{PowerLoad}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::PowerLoad) -> Array{Service,1}\n\n\nGet PowerLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{RenewableDispatch}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::RenewableDispatch) -> Array{Service,1}\n\n\nGet RenewableDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{RenewableFix}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::RenewableFix) -> Array{Service,1}\n\n\nGet RenewableFix services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Source}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Source) -> Array{Service,1}\n\n\nGet Source services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::TapTransformer) -> Array{Service,1}\n\n\nGet TapTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::ThermalMultiStart) -> Array{Service,1}\n\n\nGet ThermalMultiStart services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::ThermalStandard) -> Array{Service,1}\n\n\nGet ThermalStandard services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::Transformer2W) -> Array{Service,1}\n\n\nGet Transformer2W services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_services-Tuple{VSCDCLine}","page":"PowerSystems","title":"PowerSystems.get_services","text":"get_services(value::VSCDCLine) -> Array{Service,1}\n\n\nGet VSCDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_shutdn-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_shutdn","text":"get_shutdn(value::MultiStartCost) -> Float64\n\n\nGet MultiStartCost shutdn.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_shutdn-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_shutdn","text":"get_shutdn(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost shutdn.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_slopes-Tuple{VariableCost{Array{Tuple{Float64,Float64},1}}}","page":"PowerSystems","title":"PowerSystems.get_slopes","text":"get_slopes(vc::VariableCost{Array{Tuple{Float64,Float64},1}}) -> Array{Float64,1}\n\n\nCalculates the slopes for the variable cost represented as a piece wise linear cost function. This function returns n - slopes for n - piecewise linear elements in the function. The first element of the return array corresponds to the average cost at the minimum operating point. If your formulation uses n -1 slopes, you can disregard the first component of the array. If the first point in the variable cost has a quantity of 0.0, the first slope returned will be 0.0, otherwise, the first slope represents the trajectory to get from the origin to the first point in the variable cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_start_time_limits-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_start_time_limits","text":"get_start_time_limits(value::ThermalMultiStart) -> Union{Nothing, NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}}\n\n\nGet ThermalMultiStart starttimelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_start_types-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_start_types","text":"get_start_types(value::ThermalMultiStart) -> Int64\n\n\nGet ThermalMultiStart start_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_startup-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_startup","text":"get_startup(value::MultiStartCost) -> NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}\n\n\nGet MultiStartCost startup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_startup-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_startup","text":"get_startup(value::ThreePartCost) -> Float64\n\n\nGet ThreePartCost startup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_state_of_charge_limits-Tuple{GenericBattery}","page":"PowerSystems","title":"PowerSystems.get_state_of_charge_limits","text":"get_state_of_charge_limits(value::GenericBattery) -> NamedTuple{(:min, :max),_A} where _A<:Tuple\n\n\nGet GenericBattery stateofcharge_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AC1A) -> Array{Symbol,1}\n\n\nGet AC1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRFixed) -> Array{Symbol,1}\n\n\nGet AVRFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRSimple) -> Array{Symbol,1}\n\n\nGet AVRSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRTypeII) -> Array{Symbol,1}\n\n\nGet AVRTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AVRTypeI) -> Array{Symbol,1}\n\n\nGet AVRTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AndersonFouadMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AndersonFouadMachine) -> Array{Symbol,1}\n\n\nGet AndersonFouadMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{AverageConverter}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::AverageConverter) -> Array{Symbol,1}\n\n\nGet AverageConverter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{BaseMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::BaseMachine) -> Array{Symbol,1}\n\n\nGet BaseMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::CurrentControl) -> Array{Symbol,1}\n\n\nGet CurrentControl states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{DynamicBranch}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::DynamicBranch) -> Array{Symbol,1}\n\n\nGet states\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FiveMassShaft}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FiveMassShaft) -> Array{Symbol,1}\n\n\nGet FiveMassShaft states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FixedDCSource) -> Array{Symbol,1}\n\n\nGet FixedDCSource states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{FullMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::FullMachine) -> Array{Symbol,1}\n\n\nGet FullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{GasTG}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::GasTG) -> Array{Symbol,1}\n\n\nGet GasTG states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::KauraPLL) -> Array{Symbol,1}\n\n\nGet KauraPLL states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{LCLFilter}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::LCLFilter) -> Array{Symbol,1}\n\n\nGet LCLFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::MarconatoMachine) -> Array{Symbol,1}\n\n\nGet MarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::ModifiedAC1A) -> Array{Symbol,1}\n\n\nGet ModifiedAC1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{OneDOneQMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::OneDOneQMachine) -> Array{Symbol,1}\n\n\nGet OneDOneQMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PSSFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PSSFixed) -> Array{Symbol,1}\n\n\nGet PSSFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PSSSimple}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PSSSimple) -> Array{Symbol,1}\n\n\nGet PSSSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{PowerSystems.LCFilter}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::PowerSystems.LCFilter) -> Array{Symbol,1}\n\n\nGet LCFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::ReactivePowerDroop) -> Array{Symbol,1}\n\n\nGet ReactivePowerDroop states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{RoundRotorMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::RoundRotorMachine) -> Array{Symbol,1}\n\n\nGet RoundRotorMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::ST1A) -> Array{Symbol,1}\n\n\nGet ST1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SalientPoleMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SalientPoleMachine) -> Array{Symbol,1}\n\n\nGet SalientPoleMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleAFMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleAFMachine) -> Array{Symbol,1}\n\n\nGet SimpleAFMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleFullMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleFullMachine) -> Array{Symbol,1}\n\n\nGet SimpleFullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SimpleMarconatoMachine) -> Array{Symbol,1}\n\n\nGet SimpleMarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{SingleMass}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::SingleMass) -> Array{Symbol,1}\n\n\nGet SingleMass states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGFixed}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGFixed) -> Array{Symbol,1}\n\n\nGet TGFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGTypeII) -> Array{Symbol,1}\n\n\nGet TGTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{TGTypeI}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::TGTypeI) -> Array{Symbol,1}\n\n\nGet TGTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states-Tuple{VirtualInertia}","page":"PowerSystems","title":"PowerSystems.get_states","text":"get_states(value::VirtualInertia) -> Array{Symbol,1}\n\n\nGet VirtualInertia states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{AC1A}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::AC1A) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet AC1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{AVRFixed}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::AVRFixed) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet AVRFixed states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{AVRSimple}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::AVRSimple) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet AVRSimple states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{AVRTypeII}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::AVRTypeII) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet AVRTypeII states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{AVRTypeI}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::AVRTypeI) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet AVRTypeI states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{ModifiedAC1A}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::ModifiedAC1A) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet ModifiedAC1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_states_types-Tuple{ST1A}","page":"PowerSystems","title":"PowerSystems.get_states_types","text":"get_states_types(value::ST1A) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nGet ST1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_status-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_status","text":"get_status(value::ThermalMultiStart) -> Bool\n\n\nGet ThermalMultiStart status.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_status-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_status","text":"get_status(value::ThermalStandard) -> Bool\n\n\nGet ThermalStandard status.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_storage_capacity-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_storage_capacity","text":"get_storage_capacity(value::HydroEnergyReservoir) -> Any\n\n\nGet HydroEnergyReservoir storage_capacity.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tap-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_tap","text":"get_tap(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_tap-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_tap","text":"get_tap(value::TapTransformer) -> Float64\n\n\nGet TapTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_at_status-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_time_at_status","text":"get_time_at_status(value::ThermalMultiStart) -> Float64\n\n\nGet ThermalMultiStart timeatstatus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_at_status-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_time_at_status","text":"get_time_at_status(value::ThermalStandard) -> Float64\n\n\nGet ThermalStandard timeatstatus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_frame-Tuple{ReserveDemandCurve}","page":"PowerSystems","title":"PowerSystems.get_time_frame","text":"get_time_frame(value::ReserveDemandCurve) -> Float64\n\n\nGet ReserveDemandCurve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_frame-Tuple{StaticReserve}","page":"PowerSystems","title":"PowerSystems.get_time_frame","text":"get_time_frame(value::StaticReserve) -> Float64\n\n\nGet StaticReserve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_frame-Tuple{VariableReserve}","page":"PowerSystems","title":"PowerSystems.get_time_frame","text":"get_time_frame(value::VariableReserve) -> Float64\n\n\nGet VariableReserve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_limits-Tuple{HydroDispatch}","page":"PowerSystems","title":"PowerSystems.get_time_limits","text":"get_time_limits(value::HydroDispatch) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet HydroDispatch time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_limits-Tuple{HydroEnergyReservoir}","page":"PowerSystems","title":"PowerSystems.get_time_limits","text":"get_time_limits(value::HydroEnergyReservoir) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet HydroEnergyReservoir time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_limits-Tuple{ThermalMultiStart}","page":"PowerSystems","title":"PowerSystems.get_time_limits","text":"get_time_limits(value::ThermalMultiStart) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet ThermalMultiStart time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_time_limits-Tuple{ThermalStandard}","page":"PowerSystems","title":"PowerSystems.get_time_limits","text":"get_time_limits(value::ThermalStandard) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nGet ThermalStandard time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_to-Tuple{Arc}","page":"PowerSystems","title":"PowerSystems.get_to","text":"get_to(value::Arc) -> Bus\n\n\nGet Arc to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_variable-Tuple{MultiStartCost}","page":"PowerSystems","title":"PowerSystems.get_variable","text":"get_variable(value::MultiStartCost) -> VariableCost\n\n\nGet MultiStartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_variable-Tuple{ThreePartCost}","page":"PowerSystems","title":"PowerSystems.get_variable","text":"get_variable(value::ThreePartCost) -> VariableCost\n\n\nGet ThreePartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_variable-Tuple{TwoPartCost}","page":"PowerSystems","title":"PowerSystems.get_variable","text":"get_variable(value::TwoPartCost) -> VariableCost\n\n\nGet TwoPartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_voltage-Tuple{FixedDCSource}","page":"PowerSystems","title":"PowerSystems.get_voltage","text":"get_voltage(value::FixedDCSource) -> Float64\n\n\nGet FixedDCSource voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_voltage_limits-Tuple{Bus}","page":"PowerSystems","title":"PowerSystems.get_voltage_limits","text":"get_voltage_limits(value::Bus) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nGet Bus voltage_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{Line}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::Line) -> Float64\n\n\nGet Line x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{MonitoredLine}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::MonitoredLine) -> Float64\n\n\nGet MonitoredLine x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::TapTransformer) -> Float64\n\n\nGet TapTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_x-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.get_x","text":"get_x(value::Transformer2W) -> Float64\n\n\nGet Transformer2W x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_α-Tuple{PhaseShiftingTransformer}","page":"PowerSystems","title":"PowerSystems.get_α","text":"get_α(value::PhaseShiftingTransformer) -> Float64\n\n\nGet PhaseShiftingTransformer α.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γd-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γd","text":"get_γd(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γd-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γd","text":"get_γd(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γq-Tuple{MarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γq","text":"get_γq(value::MarconatoMachine) -> Float64\n\n\nGet MarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_γq-Tuple{SimpleMarconatoMachine}","page":"PowerSystems","title":"PowerSystems.get_γq","text":"get_γq(value::SimpleMarconatoMachine) -> Float64\n\n\nGet SimpleMarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_τ_max-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_τ_max","text":"get_τ_max(value::TGTypeII) -> Float64\n\n\nGet TGTypeII τ_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_τ_min-Tuple{TGTypeII}","page":"PowerSystems","title":"PowerSystems.get_τ_min","text":"get_τ_min(value::TGTypeII) -> Float64\n\n\nGet TGTypeII τ_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ω_lp-Tuple{KauraPLL}","page":"PowerSystems","title":"PowerSystems.get_ω_lp","text":"get_ω_lp(value::KauraPLL) -> Float64\n\n\nGet KauraPLL ω_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ωad-Tuple{CurrentControl}","page":"PowerSystems","title":"PowerSystems.get_ωad","text":"get_ωad(value::CurrentControl) -> Float64\n\n\nGet CurrentControl ωad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_ωf-Tuple{ReactivePowerDroop}","page":"PowerSystems","title":"PowerSystems.get_ωf","text":"get_ωf(value::ReactivePowerDroop) -> Float64\n\n\nGet ReactivePowerDroop ωf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.has_service-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.has_service","text":"has_service(device::Device, service::Service) -> Bool\n\n\nReturn true if the service is attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.has_service-Union{Tuple{T}, Tuple{Device,Type{T}}} where T<:Service","page":"PowerSystems","title":"PowerSystems.has_service","text":"has_service(device::Device, _::Type{T<:Service}) -> Bool\n\n\nReturn true if a service with type T is attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_components-Tuple{System}","page":"PowerSystems","title":"PowerSystems.iterate_components","text":"iterate_components(sys::System) -> Channel{Any}\n\n\nIterates over all components.\n\nExamples\n\nfor component in iterate_components(sys)\n    @show component\nend\n\nSee also: get_components\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_forecasts-Tuple{System}","page":"PowerSystems","title":"PowerSystems.iterate_forecasts","text":"iterate_forecasts(sys::System) -> Channel{Any}\n\n\nIterate over all forecasts in order of initial time.\n\nExamples\n\nfor forecast in iterate_forecasts(sys)\n    @show forecast\nend\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_forecasts-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.make_forecasts","text":"make_forecasts(sys::System, metadata_file::AbstractString; resolution) -> Any\n\n\nReturn a vector of forecasts from a metadata file.\n\nArguments\n\ndata::SystemData: system\nmetadata_file::AbstractString: path to metadata file\nresolution::{Nothing, Dates.Period}: skip any forecasts that don't match this resolution\n\nSee InfrastructureSystems.TimeseriesFileMetadata for description of what the file should contain.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_forecasts-Tuple{System,Array{InfrastructureSystems.TimeseriesFileMetadata,1}}","page":"PowerSystems","title":"PowerSystems.make_forecasts","text":"make_forecasts(sys::System, metadata::Array{InfrastructureSystems.TimeseriesFileMetadata,1}; resolution) -> Any\n\n\nReturn a vector of forecasts from a vector of TimeseriesFileMetadata values.\n\nArguments\n\ndata::SystemData: system\ntimeseries_metadata::Vector{TimeseriesFileMetadata}: metadata values\nresolution::{Nothing, Dates.Period}: skip any forecasts that don't match this resolution\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_file-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_file","text":"parse_file(io::IO; import_all, validate, filetype) -> Any\n\n\nParses the iostream from a file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_component!-Union{Tuple{T}, Tuple{System,T}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_component!","text":"remove_component!(sys::System, component::T<:Component)\n\n\nRemove a component from the system by its value.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_component!-Union{Tuple{T}, Tuple{Type{T},System,AbstractString}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_component!","text":"Remove a component from the system by its name.\n\nThrows ArgumentError if the component is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_components!-Union{Tuple{T}, Tuple{Type{T},System}} where T<:Component","page":"PowerSystems","title":"PowerSystems.remove_components!","text":"remove_components!(_::Type{T<:Component}, sys::System)\n\n\nRemove all components of type T from the system.\n\nThrows ArgumentError if the type is not stored.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_forecast!-Union{Tuple{T}, Tuple{Type{T},System,Component,Dates.DateTime,String}} where T<:Forecast","page":"PowerSystems","title":"PowerSystems.remove_forecast!","text":"remove_forecast!(_::Type{T<:Forecast}, sys::System, component::Component, initial_time::Dates.DateTime, label::String) -> Union{Nothing, Int32, InfrastructureSystems._TimeSeriesRecord}\n\n\nRemove the time series data for a component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.remove_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems.remove_service!","text":"remove_service!(device::Device, service::Service)\n\n\nRemove a service from a device.\n\nThrows ArgumentError if the service is not attached to the device.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_AT!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_AT!","text":"set_AT!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG AT.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ae!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ae!","text":"set_Ae!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ae!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ae!","text":"set_Ae!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Ae.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Be!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Be!","text":"set_Be!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Be!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Be!","text":"set_Be!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Be.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D!","text":"set_D!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D!-Tuple{SingleMass,Float64}","page":"PowerSystems","title":"PowerSystems.set_D!","text":"set_D!(value::SingleMass, val::Float64) -> Float64\n\n\nSet SingleMass D.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_12!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_12!","text":"set_D_12!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_12.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_23!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_23!","text":"set_D_23!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_23.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_34!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_34!","text":"set_D_34!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_34.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_45!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_45!","text":"set_D_45!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_45.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_ex!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_ex!","text":"set_D_ex!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_hp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_hp!","text":"set_D_hp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_ip!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_ip!","text":"set_D_ip!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_lp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_lp!","text":"set_D_lp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft D_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_D_turb!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_D_turb!","text":"set_D_turb!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG D_turb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_E_sat!-Tuple{AC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_E_sat!","text":"set_E_sat!(value::AC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet AC1A E_sat.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_E_sat!-Tuple{ModifiedAC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_E_sat!","text":"set_E_sat!(value::ModifiedAC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ModifiedAC1A E_sat.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_H!","text":"set_H!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H!-Tuple{SingleMass,Float64}","page":"PowerSystems","title":"PowerSystems.set_H!","text":"set_H!(value::SingleMass, val::Float64) -> Float64\n\n\nSet SingleMass H.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H_ex!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_H_ex!","text":"set_H_ex!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft H_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H_hp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_H_hp!","text":"set_H_hp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft H_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H_ip!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_H_ip!","text":"set_H_ip!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft H_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_H_lp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_H_lp!","text":"set_H_lp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft H_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_I_lr!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_I_lr!","text":"set_I_lr!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A I_lr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K0!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_K0!","text":"set_K0!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII K0.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_d!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_d!","text":"set_K_d!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC K_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_ex!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_ex!","text":"set_K_ex!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft K_ex.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_hp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_hp!","text":"set_K_hp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft K_hp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_i!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_i!","text":"set_K_i!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC K_i.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_ip!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_ip!","text":"set_K_ip!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft K_ip.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_lp!-Tuple{FiveMassShaft,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_lp!","text":"set_K_lp!(value::FiveMassShaft, val::Float64) -> Float64\n\n\nSet FiveMassShaft K_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_lr!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_lr!","text":"set_K_lr!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A K_lr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_p!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_p!","text":"set_K_p!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC K_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_p!-Tuple{PSSSimple,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_p!","text":"set_K_p!(value::PSSSimple, val::Float64) -> Float64\n\n\nSet PSSSimple K_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_K_ω!-Tuple{PSSSimple,Float64}","page":"PowerSystems","title":"PowerSystems.set_K_ω!","text":"set_K_ω!(value::PSSSimple, val::Float64) -> Float64\n\n\nSet PSSSimple K_ω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ka!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ka!","text":"set_Ka!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ka!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ka!","text":"set_Ka!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ka!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ka!","text":"set_Ka!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ka!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ka!","text":"set_Ka!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Ka.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kc!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kc!","text":"set_Kc!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kc!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kc!","text":"set_Kc!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kc!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kc!","text":"set_Kc!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Kc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kd!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kd!","text":"set_Kd!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kd!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kd!","text":"set_Kd!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ke!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ke!","text":"set_Ke!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ke!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ke!","text":"set_Ke!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ke!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ke!","text":"set_Ke!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Ke.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kf!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kf!","text":"set_Kf!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kf!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kf!","text":"set_Kf!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kf!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kf!","text":"set_Kf!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kf!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kf!","text":"set_Kf!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Kf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kt!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kt!","text":"set_Kt!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG Kt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Kv!-Tuple{AVRSimple,Float64}","page":"PowerSystems","title":"PowerSystems.set_Kv!","text":"set_Kv!(value::AVRSimple, val::Float64) -> Float64\n\n\nSet AVRSimple Kv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_1d!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_1d!","text":"set_L_1d!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_1d!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_1d!","text":"set_L_1d!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_1q!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_1q!","text":"set_L_1q!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_1q!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_1q!","text":"set_L_1q!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_ad!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_ad!","text":"set_L_ad!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_ad!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_ad!","text":"set_L_ad!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_ad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_aq!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_aq!","text":"set_L_aq!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_aq!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_aq!","text":"set_L_aq!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_aq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_d!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_d!","text":"set_L_d!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_d!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_d!","text":"set_L_d!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_f1d!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_f1d!","text":"set_L_f1d!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_f1d!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_f1d!","text":"set_L_f1d!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_f1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_ff!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_ff!","text":"set_L_ff!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_ff!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_ff!","text":"set_L_ff!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_ff.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_q!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_q!","text":"set_L_q!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_L_q!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_L_q!","text":"set_L_q!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine L_q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Load_ref!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_Load_ref!","text":"set_Load_ref!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG Load_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_PSS_flags!-Tuple{ST1A,Int64}","page":"PowerSystems","title":"PowerSystems.set_PSS_flags!","text":"set_PSS_flags!(value::ST1A, val::Int64) -> Int64\n\n\nSet ST1A PSS_flags.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_max!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_max!","text":"set_P_max!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI P_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_min!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_min!","text":"set_P_min!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI P_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_ref!-Tuple{TGFixed,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_ref!","text":"set_P_ref!(value::TGFixed, val::Float64) -> Float64\n\n\nSet TGFixed P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_ref!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_ref!","text":"set_P_ref!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_ref!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_ref!","text":"set_P_ref!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_P_ref!-Tuple{VirtualInertia,Float64}","page":"PowerSystems","title":"PowerSystems.set_P_ref!","text":"set_P_ref!(value::VirtualInertia, val::Float64) -> Float64\n\n\nSet VirtualInertia P_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{BaseMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::BaseMachine, val::Float64) -> Float64\n\n\nSet BaseMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_R!","text":"set_R!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII R.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_1d!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_1d!","text":"set_R_1d!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_1d!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_1d!","text":"set_R_1d!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine R_1d.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_1q!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_1q!","text":"set_R_1q!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_1q!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_1q!","text":"set_R_1q!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine R_1q.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_f!-Tuple{FullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_f!","text":"set_R_f!(value::FullMachine, val::Float64) -> Float64\n\n\nSet FullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_f!-Tuple{SimpleFullMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_f!","text":"set_R_f!(value::SimpleFullMachine, val::Float64) -> Float64\n\n\nSet SimpleFullMachine R_f.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_R_th!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_R_th!","text":"set_R_th!(value::Source, val::Float64) -> Float64\n\n\nSet Source R_th.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Se!-Tuple{AC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Se!","text":"set_Se!(value::AC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet AC1A Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Se!-Tuple{ModifiedAC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Se!","text":"set_Se!(value::ModifiedAC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ModifiedAC1A Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Se!-Tuple{RoundRotorMachine,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Se!","text":"set_Se!(value::RoundRotorMachine, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet RoundRotorMachine Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Se!-Tuple{SalientPoleMachine,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Se!","text":"set_Se!(value::SalientPoleMachine, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet SalientPoleMachine Se.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T1!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T1!","text":"set_T1!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T1!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_T1!","text":"set_T1!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T1!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T1!","text":"set_T1!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII T1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T2!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T2!","text":"set_T2!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T2!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_T2!","text":"set_T2!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T2!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T2!","text":"set_T2!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII T2.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T3!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T3!","text":"set_T3!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T3!-Tuple{GasTG,Float64}","page":"PowerSystems","title":"PowerSystems.set_T3!","text":"set_T3!(value::GasTG, val::Float64) -> Float64\n\n\nSet GasTG T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T3!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_T3!","text":"set_T3!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI T3.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T4!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_T4!","text":"set_T4!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T4!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_T4!","text":"set_T4!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI T4.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T5!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_T5!","text":"set_T5!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI T5.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T_AA!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_T_AA!","text":"set_T_AA!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_T_AA!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_T_AA!","text":"set_T_AA!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine T_AA.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ta!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ta!","text":"set_Ta!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ta!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ta!","text":"set_Ta!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ta!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ta!","text":"set_Ta!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ta!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ta!","text":"set_Ta!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ta!-Tuple{VirtualInertia,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ta!","text":"set_Ta!(value::VirtualInertia, val::Float64) -> Float64\n\n\nSet VirtualInertia Ta.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tb!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tb!","text":"set_Tb!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tb!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tb!","text":"set_Tb!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tb!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tb!","text":"set_Tb!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tb.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tb1!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tb1!","text":"set_Tb1!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tb1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tc!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tc!","text":"set_Tc!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tc!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tc!","text":"set_Tc!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tc!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tc!","text":"set_Tc!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tc!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tc!","text":"set_Tc!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI Tc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tc1!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tc1!","text":"set_Tc1!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tc1.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_p!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_p!","text":"set_Td0_p!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Td0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Td0_pp!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Td0_pp!","text":"set_Td0_pp!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Td0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Te!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Te!","text":"set_Te!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Te!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Te!","text":"set_Te!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Te!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Te!","text":"set_Te!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Te!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Te!","text":"set_Te!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Te.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tf!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tf!","text":"set_Tf!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tf!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tf!","text":"set_Tf!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tf!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tf!","text":"set_Tf!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tf!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tf!","text":"set_Tf!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_p!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_p!","text":"set_Tq0_p!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Tq0_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tq0_pp!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tq0_pp!","text":"set_Tq0_pp!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Tq0_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tr!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tr!","text":"set_Tr!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tr!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tr!","text":"set_Tr!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tr!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tr!","text":"set_Tr!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tr!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tr!","text":"set_Tr!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Tr!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_Tr!","text":"set_Tr!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A Tr.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Ts!-Tuple{TGTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Ts!","text":"set_Ts!(value::TGTypeI, val::Float64) -> Float64\n\n\nSet TGTypeI Ts.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_UEL_flags!-Tuple{ST1A,Int64}","page":"PowerSystems","title":"PowerSystems.set_UEL_flags!","text":"set_UEL_flags!(value::ST1A, val::Int64) -> Int64\n\n\nSet ST1A UEL_flags.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_lim!-Tuple{GasTG,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_V_lim!","text":"set_V_lim!(value::GasTG, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet GasTG V_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_pss!-Tuple{PSSFixed,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_pss!","text":"set_V_pss!(value::PSSFixed, val::Float64) -> Float64\n\n\nSet PSSFixed V_pss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{AC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::AC1A, val::Float64) -> Float64\n\n\nSet AC1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{AVRFixed,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::AVRFixed, val::Float64) -> Float64\n\n\nSet AVRFixed V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{AVRSimple,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::AVRSimple, val::Float64) -> Float64\n\n\nSet AVRSimple V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{ModifiedAC1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::ModifiedAC1A, val::Float64) -> Float64\n\n\nSet ModifiedAC1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{ReactivePowerDroop,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::ReactivePowerDroop, val::Float64) -> Float64\n\n\nSet ReactivePowerDroop V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_V_ref!-Tuple{ST1A,Float64}","page":"PowerSystems","title":"PowerSystems.set_V_ref!","text":"set_V_ref!(value::ST1A, val::Float64) -> Float64\n\n\nSet ST1A V_ref.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Va_lim!-Tuple{AC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Va_lim!","text":"set_Va_lim!(value::AC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet AC1A Va_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Va_lim!-Tuple{ST1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Va_lim!","text":"set_Va_lim!(value::ST1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ST1A Va_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vf!-Tuple{AVRFixed,Float64}","page":"PowerSystems","title":"PowerSystems.set_Vf!","text":"set_Vf!(value::AVRFixed, val::Float64) -> Float64\n\n\nSet AVRFixed Vf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vi_lim!-Tuple{ST1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Vi_lim!","text":"set_Vi_lim!(value::ST1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ST1A Vi_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_lim!-Tuple{AC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Vr_lim!","text":"set_Vr_lim!(value::AC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet AC1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_lim!-Tuple{ModifiedAC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Vr_lim!","text":"set_Vr_lim!(value::ModifiedAC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ModifiedAC1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_lim!-Tuple{ST1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_Vr_lim!","text":"set_Vr_lim!(value::ST1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ST1A Vr_lim.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_max!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Vr_max!","text":"set_Vr_max!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_max!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Vr_max!","text":"set_Vr_max!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Vr_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_min!-Tuple{AVRTypeI,Float64}","page":"PowerSystems","title":"PowerSystems.set_Vr_min!","text":"set_Vr_min!(value::AVRTypeI, val::Float64) -> Float64\n\n\nSet AVRTypeI Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Vr_min!-Tuple{AVRTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_Vr_min!","text":"set_Vr_min!(value::AVRTypeII, val::Float64) -> Float64\n\n\nSet AVRTypeII Vr_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_X_th!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_X_th!","text":"set_X_th!(value::Source, val::Float64) -> Float64\n\n\nSet Source X_th.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd!","text":"set_Xd!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{BaseMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::BaseMachine, val::Float64) -> Float64\n\n\nSet BaseMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_p!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_p!","text":"set_Xd_p!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xd_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xd_pp!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xd_pp!","text":"set_Xd_pp!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xd_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xl!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xl!","text":"set_Xl!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xl.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xl!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xl!","text":"set_Xl!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Xl.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{SalientPoleMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::SalientPoleMachine, val::Float64) -> Float64\n\n\nSet SalientPoleMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq!","text":"set_Xq!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{OneDOneQMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::OneDOneQMachine, val::Float64) -> Float64\n\n\nSet OneDOneQMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{RoundRotorMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::RoundRotorMachine, val::Float64) -> Float64\n\n\nSet RoundRotorMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_p!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_p!","text":"set_Xq_p!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_pp!-Tuple{AndersonFouadMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_pp!","text":"set_Xq_pp!(value::AndersonFouadMachine, val::Float64) -> Float64\n\n\nSet AndersonFouadMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_pp!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_pp!","text":"set_Xq_pp!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_pp!-Tuple{SimpleAFMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_pp!","text":"set_Xq_pp!(value::SimpleAFMachine, val::Float64) -> Float64\n\n\nSet SimpleAFMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Xq_pp!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_Xq_pp!","text":"set_Xq_pp!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine Xq_pp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_Y!-Tuple{FixedAdmittance,Complex{Float64}}","page":"PowerSystems","title":"PowerSystems.set_Y!","text":"set_Y!(value::FixedAdmittance, val::Complex{Float64}) -> Complex{Float64}\n\n\nSet FixedAdmittance Y.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{GenericBattery,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::GenericBattery, val::Float64) -> Float64\n\n\nSet GenericBattery active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{HydroDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::HydroDispatch, val::Float64) -> Float64\n\n\nSet HydroDispatch active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{InterruptibleLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::InterruptibleLoad, val::Float64) -> Float64\n\n\nSet InterruptibleLoad active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{PowerLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::PowerLoad, val::Float64) -> Float64\n\n\nSet PowerLoad active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{RenewableDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::RenewableDispatch, val::Float64) -> Float64\n\n\nSet RenewableDispatch active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{RenewableFix,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::RenewableFix, val::Float64) -> Float64\n\n\nSet RenewableFix active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::Source, val::Float64) -> Float64\n\n\nSet Source active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{ThermalMultiStart,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::ThermalMultiStart, val::Float64) -> Float64\n\n\nSet ThermalMultiStart active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power!-Tuple{ThermalStandard,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power!","text":"set_active_power!(value::ThermalStandard, val::Float64) -> Float64\n\n\nSet ThermalStandard active_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{HVDCLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::HVDCLine, val::Float64) -> Float64\n\n\nSet HVDCLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{Line,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::Line, val::Float64) -> Float64\n\n\nSet Line activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{MonitoredLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::MonitoredLine, val::Float64) -> Float64\n\n\nSet MonitoredLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{Transformer2W,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::Transformer2W, val::Float64) -> Float64\n\n\nSet Transformer2W activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_flow!-Tuple{VSCDCLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_active_power_flow!","text":"set_active_power_flow!(value::VSCDCLine, val::Float64) -> Float64\n\n\nSet VSCDCLine activepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits!-Tuple{HydroDispatch,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits!","text":"set_active_power_limits!(value::HydroDispatch, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HydroDispatch activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits!-Tuple{HydroEnergyReservoir,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits!","text":"set_active_power_limits!(value::HydroEnergyReservoir, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HydroEnergyReservoir activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits!-Tuple{ThermalMultiStart,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits!","text":"set_active_power_limits!(value::ThermalMultiStart, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet ThermalMultiStart activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits!-Tuple{ThermalStandard,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits!","text":"set_active_power_limits!(value::ThermalStandard, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet ThermalStandard activepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits_from!-Tuple{HVDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits_from!","text":"set_active_power_limits_from!(value::HVDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HVDCLine activepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_active_power_limits_to!-Tuple{HVDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_active_power_limits_to!","text":"set_active_power_limits_to!(value::HVDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HVDCLine activepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_angle!-Tuple{Bus,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_angle!","text":"set_angle!(value::Bus, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet Bus angle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_angle_limits!-Tuple{Line,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_angle_limits!","text":"set_angle_limits!(value::Line, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet Line angle_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_angle_limits!-Tuple{MonitoredLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_angle_limits!","text":"set_angle_limits!(value::MonitoredLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet MonitoredLine angle_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{HVDCLine,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::HVDCLine, val::Arc) -> Arc\n\n\nSet HVDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{Line,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::Line, val::Arc) -> Arc\n\n\nSet Line arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{MonitoredLine,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::MonitoredLine, val::Arc) -> Arc\n\n\nSet MonitoredLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{PhaseShiftingTransformer,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::PhaseShiftingTransformer, val::Arc) -> Arc\n\n\nSet PhaseShiftingTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{TapTransformer,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::TapTransformer, val::Arc) -> Arc\n\n\nSet TapTransformer arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{Transformer2W,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::Transformer2W, val::Arc) -> Arc\n\n\nSet Transformer2W arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_arc!-Tuple{VSCDCLine,Arc}","page":"PowerSystems","title":"PowerSystems.set_arc!","text":"set_arc!(value::VSCDCLine, val::Arc) -> Arc\n\n\nSet VSCDCLine arc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_area!-Tuple{AGC,Union{Nothing, Area}}","page":"PowerSystems","title":"PowerSystems.set_area!","text":"set_area!(value::AGC, val::Union{Nothing, Area}) -> Union{Nothing, Area}\n\n\nSet AGC area.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_area!-Tuple{Bus,Union{Nothing, Area}}","page":"PowerSystems","title":"PowerSystems.set_area!","text":"set_area!(value::Bus, val::Union{Nothing, Area}) -> Area\n\n\nSet Bus area.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{AGC,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::AGC, val::Bool) -> Bool\n\n\nSet AGC available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{FixedAdmittance,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::FixedAdmittance, val::Bool) -> Bool\n\n\nSet FixedAdmittance available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{GenericBattery,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::GenericBattery, val::Bool) -> Bool\n\n\nSet GenericBattery available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{HVDCLine,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::HVDCLine, val::Bool) -> Bool\n\n\nSet HVDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{HydroDispatch,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::HydroDispatch, val::Bool) -> Bool\n\n\nSet HydroDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{HydroEnergyReservoir,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::HydroEnergyReservoir, val::Bool) -> Bool\n\n\nSet HydroEnergyReservoir available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{InterruptibleLoad,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::InterruptibleLoad, val::Bool) -> Bool\n\n\nSet InterruptibleLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{Line,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::Line, val::Bool) -> Bool\n\n\nSet Line available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{MonitoredLine,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::MonitoredLine, val::Bool) -> Bool\n\n\nSet MonitoredLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{PhaseShiftingTransformer,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::PhaseShiftingTransformer, val::Bool) -> Bool\n\n\nSet PhaseShiftingTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{PowerLoad,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::PowerLoad, val::Bool) -> Bool\n\n\nSet PowerLoad available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{RenewableDispatch,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::RenewableDispatch, val::Bool) -> Bool\n\n\nSet RenewableDispatch available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{RenewableFix,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::RenewableFix, val::Bool) -> Bool\n\n\nSet RenewableFix available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{ReserveDemandCurve,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::ReserveDemandCurve, val::Bool) -> Bool\n\n\nSet ReserveDemandCurve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{Source,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::Source, val::Bool) -> Bool\n\n\nSet Source available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{StaticReserve,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::StaticReserve, val::Bool) -> Bool\n\n\nSet StaticReserve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{TapTransformer,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::TapTransformer, val::Bool) -> Bool\n\n\nSet TapTransformer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{ThermalMultiStart,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::ThermalMultiStart, val::Bool) -> Bool\n\n\nSet ThermalMultiStart available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{ThermalStandard,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::ThermalStandard, val::Bool) -> Bool\n\n\nSet ThermalStandard available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{Transfer,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::Transfer, val::Bool) -> Bool\n\n\nSet Transfer available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{Transformer2W,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::Transformer2W, val::Bool) -> Bool\n\n\nSet Transformer2W available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{VSCDCLine,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::VSCDCLine, val::Bool) -> Bool\n\n\nSet VSCDCLine available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_available!-Tuple{VariableReserve,Bool}","page":"PowerSystems","title":"PowerSystems.set_available!","text":"set_available!(value::VariableReserve, val::Bool) -> Bool\n\n\nSet VariableReserve available.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_b!-Tuple{Line,NamedTuple{(:from, :to),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_b!","text":"set_b!(value::Line, val::NamedTuple{(:from, :to),Tuple{Float64,Float64}}) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nSet Line b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_b!-Tuple{MonitoredLine,NamedTuple{(:from, :to),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_b!","text":"set_b!(value::MonitoredLine, val::NamedTuple{(:from, :to),Tuple{Float64,Float64}}) -> NamedTuple{(:from, :to),Tuple{Float64,Float64}}\n\n\nSet MonitoredLine b.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{GenericBattery,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::GenericBattery, val::Float64) -> Float64\n\n\nSet GenericBattery base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{HydroDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::HydroDispatch, val::Float64) -> Float64\n\n\nSet HydroDispatch base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{InterruptibleLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::InterruptibleLoad, val::Float64) -> Float64\n\n\nSet InterruptibleLoad base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{PowerLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::PowerLoad, val::Float64) -> Float64\n\n\nSet PowerLoad base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{RenewableDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::RenewableDispatch, val::Float64) -> Float64\n\n\nSet RenewableDispatch base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{RenewableFix,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::RenewableFix, val::Float64) -> Float64\n\n\nSet RenewableFix base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{ThermalMultiStart,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::ThermalMultiStart, val::Float64) -> Float64\n\n\nSet ThermalMultiStart base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_power!-Tuple{ThermalStandard,Float64}","page":"PowerSystems","title":"PowerSystems.set_base_power!","text":"set_base_power!(value::ThermalStandard, val::Float64) -> Float64\n\n\nSet ThermalStandard base_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_base_voltage!-Tuple{Bus,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_base_voltage!","text":"set_base_voltage!(value::Bus, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet Bus base_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bias!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_bias!","text":"set_bias!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC bias.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{FixedAdmittance,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::FixedAdmittance, val::Bus) -> Bus\n\n\nSet FixedAdmittance bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{GenericBattery,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::GenericBattery, val::Bus) -> Bus\n\n\nSet GenericBattery bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{HydroDispatch,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::HydroDispatch, val::Bus) -> Bus\n\n\nSet HydroDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{HydroEnergyReservoir,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::HydroEnergyReservoir, val::Bus) -> Bus\n\n\nSet HydroEnergyReservoir bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{InterruptibleLoad,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::InterruptibleLoad, val::Bus) -> Bus\n\n\nSet InterruptibleLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{PowerLoad,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::PowerLoad, val::Bus) -> Bus\n\n\nSet PowerLoad bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{RenewableDispatch,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::RenewableDispatch, val::Bus) -> Bus\n\n\nSet RenewableDispatch bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{RenewableFix,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::RenewableFix, val::Bus) -> Bus\n\n\nSet RenewableFix bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{Source,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::Source, val::Bus) -> Bus\n\n\nSet Source bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{ThermalMultiStart,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::ThermalMultiStart, val::Bus) -> Bus\n\n\nSet ThermalMultiStart bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bus!-Tuple{ThermalStandard,Bus}","page":"PowerSystems","title":"PowerSystems.set_bus!","text":"set_bus!(value::ThermalStandard, val::Bus) -> Bus\n\n\nSet ThermalStandard bus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_bustype!-Tuple{Bus,Union{Nothing, PowerSystems.BusTypes.BusType}}","page":"PowerSystems","title":"PowerSystems.set_bustype!","text":"set_bustype!(value::Bus, val::Union{Nothing, PowerSystems.BusTypes.BusType}) -> Union{Nothing, PowerSystems.BusTypes.BusType}\n\n\nSet Bus bustype.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_cf!-Tuple{LCLFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_cf!","text":"set_cf!(value::LCLFilter, val::Float64) -> Float64\n\n\nSet LCLFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_cf!-Tuple{PowerSystems.LCFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_cf!","text":"set_cf!(value::PowerSystems.LCFilter, val::Float64) -> Float64\n\n\nSet LCFilter cf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_delta_t!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_delta_t!","text":"set_delta_t!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC delta_t.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_dynamic_injector!-Tuple{ThermalMultiStart,Union{Nothing, DynamicInjection}}","page":"PowerSystems","title":"PowerSystems.set_dynamic_injector!","text":"set_dynamic_injector!(value::ThermalMultiStart, val::Union{Nothing, DynamicInjection}) -> Union{Nothing, DynamicInjection}\n\n\nSet ThermalMultiStart dynamic_injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_dynamic_injector!-Union{Tuple{U}, Tuple{T}, Tuple{T,U}} where U<:Union{Nothing, DynamicInjection} where T<:StaticInjection","page":"PowerSystems","title":"PowerSystems.set_dynamic_injector!","text":"set_dynamic_injector!(static_injector::T<:StaticInjection, dynamic_injector::U<:Union{Nothing, DynamicInjection}) -> Union{Nothing, DynamicInjection}\n\n\nAny StaticInjection struct that wants to support dynamic injectors must implement this method to set the value.\n\nThe method is only for internal uses.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_efficiency!-Tuple{GenericBattery,NamedTuple{(:in, :out),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_efficiency!","text":"set_efficiency!(value::GenericBattery, val::NamedTuple{(:in, :out),Tuple{Float64,Float64}}) -> NamedTuple{(:in, :out),Tuple{Float64,Float64}}\n\n\nSet GenericBattery efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_efficiency!-Tuple{TGFixed,Float64}","page":"PowerSystems","title":"PowerSystems.set_efficiency!","text":"set_efficiency!(value::TGFixed, val::Float64) -> Float64\n\n\nSet TGFixed efficiency.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_eq_p!-Tuple{BaseMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_eq_p!","text":"set_eq_p!(value::BaseMachine, val::Float64) -> Float64\n\n\nSet BaseMachine eq_p.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AC1A,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AC1A, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AC1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AGC,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AGC, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AGC ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AVRFixed,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AVRFixed, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AVRFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AVRSimple,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AVRSimple, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AVRSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AVRTypeI,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AVRTypeI, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AVRTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AVRTypeII,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AVRTypeII, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AVRTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AndersonFouadMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AndersonFouadMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AndersonFouadMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{AverageConverter,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::AverageConverter, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet AverageConverter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{BaseMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::BaseMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet BaseMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{Bus,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::Bus, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet Bus ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{CurrentControl,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::CurrentControl, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet CurrentControl ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{FiveMassShaft,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::FiveMassShaft, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet FiveMassShaft ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{FixedAdmittance,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::FixedAdmittance, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet FixedAdmittance ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{FixedDCSource,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::FixedDCSource, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet FixedDCSource ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{FullMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::FullMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet FullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{GasTG,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::GasTG, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet GasTG ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{GenericBattery,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::GenericBattery, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet GenericBattery ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{HVDCLine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::HVDCLine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet HVDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{HydroDispatch,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::HydroDispatch, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet HydroDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{HydroEnergyReservoir,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::HydroEnergyReservoir, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet HydroEnergyReservoir ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{InterruptibleLoad,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::InterruptibleLoad, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet InterruptibleLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{KauraPLL,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::KauraPLL, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet KauraPLL ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{LCLFilter,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::LCLFilter, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet LCLFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{Line,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::Line, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet Line ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{MarconatoMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::MarconatoMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet MarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ModifiedAC1A,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ModifiedAC1A, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ModifiedAC1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{MonitoredLine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::MonitoredLine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet MonitoredLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{OneDOneQMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::OneDOneQMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet OneDOneQMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{PSSFixed,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::PSSFixed, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet PSSFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{PSSSimple,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::PSSSimple, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet PSSSimple ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{PhaseShiftingTransformer,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::PhaseShiftingTransformer, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet PhaseShiftingTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{PowerLoad,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::PowerLoad, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet PowerLoad ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{PowerSystems.LCFilter,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::PowerSystems.LCFilter, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet LCFilter ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ReactivePowerDroop,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ReactivePowerDroop, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ReactivePowerDroop ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{RenewableDispatch,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::RenewableDispatch, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet RenewableDispatch ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{RenewableFix,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::RenewableFix, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet RenewableFix ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ReserveDemandCurve,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ReserveDemandCurve, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ReserveDemandCurve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{RoundRotorMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::RoundRotorMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet RoundRotorMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ST1A,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ST1A, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ST1A ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{SalientPoleMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::SalientPoleMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet SalientPoleMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{SimpleAFMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::SimpleAFMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet SimpleAFMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{SimpleFullMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::SimpleFullMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet SimpleFullMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{SimpleMarconatoMachine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::SimpleMarconatoMachine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet SimpleMarconatoMachine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{SingleMass,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::SingleMass, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet SingleMass ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{Source,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::Source, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet Source ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{StaticReserve,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::StaticReserve, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet StaticReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{TGFixed,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::TGFixed, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet TGFixed ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{TGTypeI,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::TGTypeI, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet TGTypeI ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{TGTypeII,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::TGTypeII, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet TGTypeII ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{TapTransformer,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::TapTransformer, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet TapTransformer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ThermalMultiStart,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ThermalMultiStart, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ThermalMultiStart ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{ThermalStandard,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::ThermalStandard, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet ThermalStandard ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{Transfer,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::Transfer, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet Transfer ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{Transformer2W,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::Transformer2W, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet Transformer2W ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{VSCDCLine,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::VSCDCLine, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet VSCDCLine ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{VariableReserve,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::VariableReserve, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet VariableReserve ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ext!-Tuple{VirtualInertia,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.set_ext!","text":"set_ext!(value::VirtualInertia, val::Dict{String,Any}) -> Dict{String,Any}\n\n\nSet VirtualInertia ext.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_fixed!-Tuple{MultiStartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_fixed!","text":"set_fixed!(value::MultiStartCost, val::Float64) -> Float64\n\n\nSet MultiStartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_fixed!-Tuple{ThreePartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_fixed!","text":"set_fixed!(value::ThreePartCost, val::Float64) -> Float64\n\n\nSet ThreePartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_fixed!-Tuple{TwoPartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_fixed!","text":"set_fixed!(value::TwoPartCost, val::Float64) -> Float64\n\n\nSet TwoPartCost fixed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_flow_limits!-Tuple{MonitoredLine,NamedTuple{(:from_to, :to_from),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_flow_limits!","text":"set_flow_limits!(value::MonitoredLine, val::NamedTuple{(:from_to, :to_from),Tuple{Float64,Float64}}) -> NamedTuple{(:from_to, :to_from),Tuple{Float64,Float64}}\n\n\nSet MonitoredLine flow_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_from!-Tuple{Arc,Bus}","page":"PowerSystems","title":"PowerSystems.set_from!","text":"set_from!(value::Arc, val::Bus) -> Bus\n\n\nSet Arc from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_fuel!-Tuple{ThermalMultiStart,PowerSystems.ThermalFuels.ThermalFuel}","page":"PowerSystems","title":"PowerSystems.set_fuel!","text":"set_fuel!(value::ThermalMultiStart, val::PowerSystems.ThermalFuels.ThermalFuel) -> PowerSystems.ThermalFuels.ThermalFuel\n\n\nSet ThermalMultiStart fuel.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_fuel!-Tuple{ThermalStandard,PowerSystems.ThermalFuels.ThermalFuel}","page":"PowerSystems","title":"PowerSystems.set_fuel!","text":"set_fuel!(value::ThermalStandard, val::PowerSystems.ThermalFuels.ThermalFuel) -> PowerSystems.ThermalFuels.ThermalFuel\n\n\nSet ThermalStandard fuel.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inflow!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_inflow!","text":"set_inflow!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir inflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_initial_ace!-Tuple{AGC,Float64}","page":"PowerSystems","title":"PowerSystems.set_initial_ace!","text":"set_initial_ace!(value::AGC, val::Float64) -> Float64\n\n\nSet AGC initial_ace.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_initial_energy!-Tuple{GenericBattery,Float64}","page":"PowerSystems","title":"PowerSystems.set_initial_energy!","text":"set_initial_energy!(value::GenericBattery, val::Float64) -> Float64\n\n\nSet GenericBattery initial_energy.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_initial_storage!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_initial_storage!","text":"set_initial_storage!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir initial_storage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_input_active_power_limits!-Tuple{GenericBattery,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_input_active_power_limits!","text":"set_input_active_power_limits!(value::GenericBattery, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet GenericBattery inputactivepower_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AC1A,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AC1A, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AC1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AGC,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AGC, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AGC internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AVRFixed,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AVRFixed, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AVRFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AVRSimple,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AVRSimple, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AVRSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AVRTypeI,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AVRTypeI, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AVRTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AVRTypeII,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AVRTypeII, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AVRTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{AndersonFouadMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::AndersonFouadMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet AndersonFouadMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Arc,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Arc, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Arc internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Area,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Area, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Area internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{BaseMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::BaseMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet BaseMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Bus,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Bus, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Bus internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{FiveMassShaft,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::FiveMassShaft, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet FiveMassShaft internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{FixedAdmittance,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::FixedAdmittance, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet FixedAdmittance internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{FixedDCSource,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::FixedDCSource, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet FixedDCSource internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{FullMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::FullMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet FullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{GasTG,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::GasTG, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet GasTG internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{GenericBattery,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::GenericBattery, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet GenericBattery internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{HVDCLine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::HVDCLine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet HVDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{HydroDispatch,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::HydroDispatch, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet HydroDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{HydroEnergyReservoir,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::HydroEnergyReservoir, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet HydroEnergyReservoir internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{InterruptibleLoad,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::InterruptibleLoad, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet InterruptibleLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Line,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Line, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Line internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{LoadZone,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::LoadZone, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet LoadZone internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{MarconatoMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::MarconatoMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet MarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ModifiedAC1A,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ModifiedAC1A, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ModifiedAC1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{MonitoredLine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::MonitoredLine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet MonitoredLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{MultiStartCost,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::MultiStartCost, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet MultiStartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{OneDOneQMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::OneDOneQMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet OneDOneQMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{PSSFixed,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::PSSFixed, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet PSSFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{PSSSimple,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::PSSSimple, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet PSSSimple internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{PhaseShiftingTransformer,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::PhaseShiftingTransformer, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet PhaseShiftingTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{PowerLoad,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::PowerLoad, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet PowerLoad internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{RenewableDispatch,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::RenewableDispatch, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet RenewableDispatch internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{RenewableFix,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::RenewableFix, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet RenewableFix internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ReserveDemandCurve,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ReserveDemandCurve, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ReserveDemandCurve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{RoundRotorMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::RoundRotorMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet RoundRotorMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ST1A,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ST1A, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ST1A internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{SalientPoleMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::SalientPoleMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet SalientPoleMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{SimpleAFMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::SimpleAFMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet SimpleAFMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{SimpleFullMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::SimpleFullMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet SimpleFullMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{SimpleMarconatoMachine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::SimpleMarconatoMachine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet SimpleMarconatoMachine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{SingleMass,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::SingleMass, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet SingleMass internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Source,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Source, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Source internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{StaticReserve,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::StaticReserve, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet StaticReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{TGFixed,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::TGFixed, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet TGFixed internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{TGTypeI,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::TGTypeI, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet TGTypeI internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{TGTypeII,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::TGTypeII, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet TGTypeII internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{TapTransformer,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::TapTransformer, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet TapTransformer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ThermalMultiStart,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ThermalMultiStart, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ThermalMultiStart internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ThermalStandard,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ThermalStandard, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ThermalStandard internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{ThreePartCost,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::ThreePartCost, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet ThreePartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Transfer,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Transfer, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Transfer internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{Transformer2W,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::Transformer2W, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet Transformer2W internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{TwoPartCost,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::TwoPartCost, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet TwoPartCost internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{VSCDCLine,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::VSCDCLine, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet VSCDCLine internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal!-Tuple{VariableReserve,InfrastructureSystems.InfrastructureSystemsInternal}","page":"PowerSystems","title":"PowerSystems.set_internal!","text":"set_internal!(value::VariableReserve, val::InfrastructureSystems.InfrastructureSystemsInternal) -> InfrastructureSystems.InfrastructureSystemsInternal\n\n\nSet VariableReserve internal.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal_angle!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_internal_angle!","text":"set_internal_angle!(value::Source, val::Float64) -> Float64\n\n\nSet Source internal_angle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_internal_voltage!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_internal_voltage!","text":"set_internal_voltage!(value::Source, val::Float64) -> Float64\n\n\nSet Source internal_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inv_d_fluxlink!-Tuple{FullMachine,Array{Float64,2}}","page":"PowerSystems","title":"PowerSystems.set_inv_d_fluxlink!","text":"set_inv_d_fluxlink!(value::FullMachine, val::Array{Float64,2}) -> Array{Float64,2}\n\n\nSet FullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inv_d_fluxlink!-Tuple{SimpleFullMachine,Array{Float64,2}}","page":"PowerSystems","title":"PowerSystems.set_inv_d_fluxlink!","text":"set_inv_d_fluxlink!(value::SimpleFullMachine, val::Array{Float64,2}) -> Array{Float64,2}\n\n\nSet SimpleFullMachine invdfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inv_q_fluxlink!-Tuple{FullMachine,Array{Float64,2}}","page":"PowerSystems","title":"PowerSystems.set_inv_q_fluxlink!","text":"set_inv_q_fluxlink!(value::FullMachine, val::Array{Float64,2}) -> Array{Float64,2}\n\n\nSet FullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inv_q_fluxlink!-Tuple{SimpleFullMachine,Array{Float64,2}}","page":"PowerSystems","title":"PowerSystems.set_inv_q_fluxlink!","text":"set_inv_q_fluxlink!(value::SimpleFullMachine, val::Array{Float64,2}) -> Array{Float64,2}\n\n\nSet SimpleFullMachine invqfluxlink.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inverter_firing_angle!-Tuple{VSCDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_inverter_firing_angle!","text":"set_inverter_firing_angle!(value::VSCDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet VSCDCLine inverterfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inverter_tap_limits!-Tuple{VSCDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_inverter_tap_limits!","text":"set_inverter_tap_limits!(value::VSCDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet VSCDCLine invertertaplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_inverter_xrc!-Tuple{VSCDCLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_inverter_xrc!","text":"set_inverter_xrc!(value::VSCDCLine, val::Float64) -> Float64\n\n\nSet VSCDCLine inverter_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kad!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kad!","text":"set_kad!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kd!-Tuple{VirtualInertia,Float64}","page":"PowerSystems","title":"PowerSystems.set_kd!","text":"set_kd!(value::VirtualInertia, val::Float64) -> Float64\n\n\nSet VirtualInertia kd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kffi!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kffi!","text":"set_kffi!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kffi.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kffv!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kffv!","text":"set_kffv!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kffv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ki_pll!-Tuple{KauraPLL,Float64}","page":"PowerSystems","title":"PowerSystems.set_ki_pll!","text":"set_ki_pll!(value::KauraPLL, val::Float64) -> Float64\n\n\nSet KauraPLL ki_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kic!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kic!","text":"set_kic!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kic.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kiv!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kiv!","text":"set_kiv!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kiv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kp_pll!-Tuple{KauraPLL,Float64}","page":"PowerSystems","title":"PowerSystems.set_kp_pll!","text":"set_kp_pll!(value::KauraPLL, val::Float64) -> Float64\n\n\nSet KauraPLL kp_pll.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kpc!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kpc!","text":"set_kpc!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kpc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kpv!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_kpv!","text":"set_kpv!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl kpv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kq!-Tuple{ReactivePowerDroop,Float64}","page":"PowerSystems","title":"PowerSystems.set_kq!","text":"set_kq!(value::ReactivePowerDroop, val::Float64) -> Float64\n\n\nSet ReactivePowerDroop kq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_kω!-Tuple{VirtualInertia,Float64}","page":"PowerSystems","title":"PowerSystems.set_kω!","text":"set_kω!(value::VirtualInertia, val::Float64) -> Float64\n\n\nSet VirtualInertia kω.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_lf!-Tuple{LCLFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_lf!","text":"set_lf!(value::LCLFilter, val::Float64) -> Float64\n\n\nSet LCLFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_lf!-Tuple{PowerSystems.LCFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_lf!","text":"set_lf!(value::PowerSystems.LCFilter, val::Float64) -> Float64\n\n\nSet LCFilter lf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_lg!-Tuple{LCLFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_lg!","text":"set_lg!(value::LCLFilter, val::Float64) -> Float64\n\n\nSet LCLFilter lg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_load_response!-Tuple{Area,Float64}","page":"PowerSystems","title":"PowerSystems.set_load_response!","text":"set_load_response!(value::Area, val::Float64) -> Float64\n\n\nSet Area load_response.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_load_zone!-Tuple{Bus,Union{Nothing, LoadZone}}","page":"PowerSystems","title":"PowerSystems.set_load_zone!","text":"set_load_zone!(value::Bus, val::Union{Nothing, LoadZone}) -> LoadZone\n\n\nSet Bus load_zone.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_loss!-Tuple{HVDCLine,NamedTuple{(:l0, :l1),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_loss!","text":"set_loss!(value::HVDCLine, val::NamedTuple{(:l0, :l1),Tuple{Float64,Float64}}) -> NamedTuple{(:l0, :l1),Tuple{Float64,Float64}}\n\n\nSet HVDCLine loss.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_lv!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_lv!","text":"set_lv!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl lv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_magnitude!-Tuple{Bus,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_magnitude!","text":"set_magnitude!(value::Bus, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet Bus magnitude.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_max_active_power!-Tuple{InterruptibleLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_max_active_power!","text":"set_max_active_power!(value::InterruptibleLoad, val::Float64) -> Float64\n\n\nSet InterruptibleLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_max_active_power!-Tuple{PowerLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_max_active_power!","text":"set_max_active_power!(value::PowerLoad, val::Float64) -> Float64\n\n\nSet PowerLoad maxactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_max_reactive_power!-Tuple{InterruptibleLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_max_reactive_power!","text":"set_max_reactive_power!(value::InterruptibleLoad, val::Float64) -> Float64\n\n\nSet InterruptibleLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_max_reactive_power!-Tuple{PowerLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_max_reactive_power!","text":"set_max_reactive_power!(value::PowerLoad, val::Float64) -> Float64\n\n\nSet PowerLoad maxreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_model!-Tuple{InterruptibleLoad,PowerSystems.LoadModels.LoadModel}","page":"PowerSystems","title":"PowerSystems.set_model!","text":"set_model!(value::InterruptibleLoad, val::PowerSystems.LoadModels.LoadModel) -> PowerSystems.LoadModels.LoadModel\n\n\nSet InterruptibleLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_model!-Tuple{PowerLoad,Union{Nothing, PowerSystems.LoadModels.LoadModel}}","page":"PowerSystems","title":"PowerSystems.set_model!","text":"set_model!(value::PowerLoad, val::Union{Nothing, PowerSystems.LoadModels.LoadModel}) -> Union{Nothing, PowerSystems.LoadModels.LoadModel}\n\n\nSet PowerLoad model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_must_run!-Tuple{ThermalMultiStart,Bool}","page":"PowerSystems","title":"PowerSystems.set_must_run!","text":"set_must_run!(value::ThermalMultiStart, val::Bool) -> Bool\n\n\nSet ThermalMultiStart must_run.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AC1A,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AC1A, val::Int64) -> Int64\n\n\nSet AC1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AVRFixed,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AVRFixed, val::Int64) -> Int64\n\n\nSet AVRFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AVRSimple,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AVRSimple, val::Int64) -> Int64\n\n\nSet AVRSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AVRTypeI,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AVRTypeI, val::Int64) -> Int64\n\n\nSet AVRTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AVRTypeII,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AVRTypeII, val::Int64) -> Int64\n\n\nSet AVRTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AndersonFouadMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AndersonFouadMachine, val::Int64) -> Int64\n\n\nSet AndersonFouadMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{AverageConverter,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::AverageConverter, val::Int64) -> Int64\n\n\nSet AverageConverter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{BaseMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::BaseMachine, val::Int64) -> Int64\n\n\nSet BaseMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{CurrentControl,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::CurrentControl, val::Int64) -> Int64\n\n\nSet CurrentControl n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{DynamicBranch,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::DynamicBranch, val::Int64) -> Int64\n\n\nSet n_states\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{FiveMassShaft,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::FiveMassShaft, val::Int64) -> Int64\n\n\nSet FiveMassShaft n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{FixedDCSource,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::FixedDCSource, val::Int64) -> Int64\n\n\nSet FixedDCSource n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{FullMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::FullMachine, val::Int64) -> Int64\n\n\nSet FullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{GasTG,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::GasTG, val::Int64) -> Int64\n\n\nSet GasTG n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{KauraPLL,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::KauraPLL, val::Int64) -> Int64\n\n\nSet KauraPLL n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{LCLFilter,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::LCLFilter, val::Int64) -> Int64\n\n\nSet LCLFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{MarconatoMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::MarconatoMachine, val::Int64) -> Int64\n\n\nSet MarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{ModifiedAC1A,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::ModifiedAC1A, val::Int64) -> Int64\n\n\nSet ModifiedAC1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{OneDOneQMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::OneDOneQMachine, val::Int64) -> Int64\n\n\nSet OneDOneQMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{PSSFixed,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::PSSFixed, val::Int64) -> Int64\n\n\nSet PSSFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{PSSSimple,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::PSSSimple, val::Int64) -> Int64\n\n\nSet PSSSimple n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{PowerSystems.LCFilter,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::PowerSystems.LCFilter, val::Int64) -> Int64\n\n\nSet LCFilter n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{ReactivePowerDroop,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::ReactivePowerDroop, val::Int64) -> Int64\n\n\nSet ReactivePowerDroop n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{RoundRotorMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::RoundRotorMachine, val::Int64) -> Int64\n\n\nSet RoundRotorMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{ST1A,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::ST1A, val::Int64) -> Int64\n\n\nSet ST1A n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{SalientPoleMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::SalientPoleMachine, val::Int64) -> Int64\n\n\nSet SalientPoleMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{SimpleAFMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::SimpleAFMachine, val::Int64) -> Int64\n\n\nSet SimpleAFMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{SimpleFullMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::SimpleFullMachine, val::Int64) -> Int64\n\n\nSet SimpleFullMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{SimpleMarconatoMachine,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::SimpleMarconatoMachine, val::Int64) -> Int64\n\n\nSet SimpleMarconatoMachine n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{SingleMass,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::SingleMass, val::Int64) -> Int64\n\n\nSet SingleMass n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{TGFixed,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::TGFixed, val::Int64) -> Int64\n\n\nSet TGFixed n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{TGTypeI,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::TGTypeI, val::Int64) -> Int64\n\n\nSet TGTypeI n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{TGTypeII,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::TGTypeII, val::Int64) -> Int64\n\n\nSet TGTypeII n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_n_states!-Tuple{VirtualInertia,Int64}","page":"PowerSystems","title":"PowerSystems.set_n_states!","text":"set_n_states!(value::VirtualInertia, val::Int64) -> Int64\n\n\nSet VirtualInertia n_states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_no_load!-Tuple{MultiStartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_no_load!","text":"set_no_load!(value::MultiStartCost, val::Float64) -> Float64\n\n\nSet MultiStartCost no_load.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_number!-Tuple{Bus,Int64}","page":"PowerSystems","title":"PowerSystems.set_number!","text":"set_number!(value::Bus, val::Int64) -> Int64\n\n\nSet Bus number.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{HydroEnergyReservoir,TwoPartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::HydroEnergyReservoir, val::TwoPartCost) -> TwoPartCost\n\n\nSet HydroEnergyReservoir operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{InterruptibleLoad,TwoPartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::InterruptibleLoad, val::TwoPartCost) -> TwoPartCost\n\n\nSet InterruptibleLoad operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{RenewableDispatch,TwoPartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::RenewableDispatch, val::TwoPartCost) -> TwoPartCost\n\n\nSet RenewableDispatch operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{ReserveDemandCurve,TwoPartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::ReserveDemandCurve, val::TwoPartCost) -> TwoPartCost\n\n\nSet ReserveDemandCurve operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{ThermalMultiStart,MultiStartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::ThermalMultiStart, val::MultiStartCost) -> MultiStartCost\n\n\nSet ThermalMultiStart operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_operation_cost!-Tuple{ThermalStandard,ThreePartCost}","page":"PowerSystems","title":"PowerSystems.set_operation_cost!","text":"set_operation_cost!(value::ThermalStandard, val::ThreePartCost) -> ThreePartCost\n\n\nSet ThermalStandard operation_cost.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_output_active_power_limits!-Tuple{GenericBattery,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_output_active_power_limits!","text":"set_output_active_power_limits!(value::GenericBattery, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet GenericBattery outputactivepower_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_peak_active_power!-Tuple{Area,Float64}","page":"PowerSystems","title":"PowerSystems.set_peak_active_power!","text":"set_peak_active_power!(value::Area, val::Float64) -> Float64\n\n\nSet Area peakactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_peak_active_power!-Tuple{LoadZone,Float64}","page":"PowerSystems","title":"PowerSystems.set_peak_active_power!","text":"set_peak_active_power!(value::LoadZone, val::Float64) -> Float64\n\n\nSet LoadZone peakactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_peak_reactive_power!-Tuple{Area,Float64}","page":"PowerSystems","title":"PowerSystems.set_peak_reactive_power!","text":"set_peak_reactive_power!(value::Area, val::Float64) -> Float64\n\n\nSet Area peakreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_peak_reactive_power!-Tuple{LoadZone,Float64}","page":"PowerSystems","title":"PowerSystems.set_peak_reactive_power!","text":"set_peak_reactive_power!(value::LoadZone, val::Float64) -> Float64\n\n\nSet LoadZone peakreactivepower.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_power_factor!-Tuple{RenewableDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_power_factor!","text":"set_power_factor!(value::RenewableDispatch, val::Float64) -> Float64\n\n\nSet RenewableDispatch power_factor.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_power_factor!-Tuple{RenewableFix,Float64}","page":"PowerSystems","title":"PowerSystems.set_power_factor!","text":"set_power_factor!(value::RenewableFix, val::Float64) -> Float64\n\n\nSet RenewableFix power_factor.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_power_trajectory!-Tuple{ThermalMultiStart,Union{Nothing, NamedTuple{(:startup, :shutdown),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_power_trajectory!","text":"set_power_trajectory!(value::ThermalMultiStart, val::Union{Nothing, NamedTuple{(:startup, :shutdown),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:startup, :shutdown),Tuple{Float64,Float64}}}\n\n\nSet ThermalMultiStart power_trajectory.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_primary_shunt!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_primary_shunt!","text":"set_primary_shunt!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_primary_shunt!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_primary_shunt!","text":"set_primary_shunt!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_primary_shunt!-Tuple{Transformer2W,Float64}","page":"PowerSystems","title":"PowerSystems.set_primary_shunt!","text":"set_primary_shunt!(value::Transformer2W, val::Float64) -> Float64\n\n\nSet Transformer2W primary_shunt.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{GenericBattery,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::GenericBattery, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet GenericBattery prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{HydroDispatch,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::HydroDispatch, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet HydroDispatch prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{HydroEnergyReservoir,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::HydroEnergyReservoir, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet HydroEnergyReservoir prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{RenewableDispatch,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::RenewableDispatch, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet RenewableDispatch prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{RenewableFix,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::RenewableFix, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet RenewableFix prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{ThermalMultiStart,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::ThermalMultiStart, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet ThermalMultiStart prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_prime_mover!-Tuple{ThermalStandard,PowerSystems.PrimeMovers.PrimeMover}","page":"PowerSystems","title":"PowerSystems.set_prime_mover!","text":"set_prime_mover!(value::ThermalStandard, val::PowerSystems.PrimeMovers.PrimeMover) -> PowerSystems.PrimeMovers.PrimeMover\n\n\nSet ThermalStandard prime_mover.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_r!-Tuple{Line,Float64}","page":"PowerSystems","title":"PowerSystems.set_r!","text":"set_r!(value::Line, val::Float64) -> Float64\n\n\nSet Line r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_r!-Tuple{MonitoredLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_r!","text":"set_r!(value::MonitoredLine, val::Float64) -> Float64\n\n\nSet MonitoredLine r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_r!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_r!","text":"set_r!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_r!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_r!","text":"set_r!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_r!-Tuple{Transformer2W,Float64}","page":"PowerSystems","title":"PowerSystems.set_r!","text":"set_r!(value::Transformer2W, val::Float64) -> Float64\n\n\nSet Transformer2W r.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ramp_limits!-Tuple{HydroDispatch,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_ramp_limits!","text":"set_ramp_limits!(value::HydroDispatch, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet HydroDispatch ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ramp_limits!-Tuple{HydroEnergyReservoir,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_ramp_limits!","text":"set_ramp_limits!(value::HydroEnergyReservoir, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet HydroEnergyReservoir ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ramp_limits!-Tuple{ThermalMultiStart,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_ramp_limits!","text":"set_ramp_limits!(value::ThermalMultiStart, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet ThermalMultiStart ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ramp_limits!-Tuple{ThermalStandard,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_ramp_limits!","text":"set_ramp_limits!(value::ThermalStandard, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet ThermalStandard ramp_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rate!-Tuple{Line,Float64}","page":"PowerSystems","title":"PowerSystems.set_rate!","text":"set_rate!(value::Line, val::Float64) -> Float64\n\n\nSet Line rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rate!-Tuple{MonitoredLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_rate!","text":"set_rate!(value::MonitoredLine, val::Float64) -> Float64\n\n\nSet MonitoredLine rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rate!-Tuple{PhaseShiftingTransformer,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_rate!","text":"set_rate!(value::PhaseShiftingTransformer, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet PhaseShiftingTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rate!-Tuple{TapTransformer,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_rate!","text":"set_rate!(value::TapTransformer, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet TapTransformer rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rate!-Tuple{Transformer2W,Union{Nothing, Float64}}","page":"PowerSystems","title":"PowerSystems.set_rate!","text":"set_rate!(value::Transformer2W, val::Union{Nothing, Float64}) -> Union{Nothing, Float64}\n\n\nSet Transformer2W rate.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rated_current!-Tuple{AverageConverter,Float64}","page":"PowerSystems","title":"PowerSystems.set_rated_current!","text":"set_rated_current!(value::AverageConverter, val::Float64) -> Float64\n\n\nSet AverageConverter rated_current.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rated_voltage!-Tuple{AverageConverter,Float64}","page":"PowerSystems","title":"PowerSystems.set_rated_voltage!","text":"set_rated_voltage!(value::AverageConverter, val::Float64) -> Float64\n\n\nSet AverageConverter rated_voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{GenericBattery,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::GenericBattery, val::Float64) -> Float64\n\n\nSet GenericBattery rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{HydroDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::HydroDispatch, val::Float64) -> Float64\n\n\nSet HydroDispatch rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{RenewableDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::RenewableDispatch, val::Float64) -> Float64\n\n\nSet RenewableDispatch rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{RenewableFix,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::RenewableFix, val::Float64) -> Float64\n\n\nSet RenewableFix rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{ThermalMultiStart,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::ThermalMultiStart, val::Float64) -> Float64\n\n\nSet ThermalMultiStart rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rating!-Tuple{ThermalStandard,Float64}","page":"PowerSystems","title":"PowerSystems.set_rating!","text":"set_rating!(value::ThermalStandard, val::Float64) -> Float64\n\n\nSet ThermalStandard rating.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{GenericBattery,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::GenericBattery, val::Float64) -> Float64\n\n\nSet GenericBattery reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{HydroDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::HydroDispatch, val::Float64) -> Float64\n\n\nSet HydroDispatch reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{InterruptibleLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::InterruptibleLoad, val::Float64) -> Float64\n\n\nSet InterruptibleLoad reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{PowerLoad,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::PowerLoad, val::Float64) -> Float64\n\n\nSet PowerLoad reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{RenewableDispatch,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::RenewableDispatch, val::Float64) -> Float64\n\n\nSet RenewableDispatch reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{RenewableFix,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::RenewableFix, val::Float64) -> Float64\n\n\nSet RenewableFix reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{Source,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::Source, val::Float64) -> Float64\n\n\nSet Source reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{ThermalMultiStart,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::ThermalMultiStart, val::Float64) -> Float64\n\n\nSet ThermalMultiStart reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power!-Tuple{ThermalStandard,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power!","text":"set_reactive_power!(value::ThermalStandard, val::Float64) -> Float64\n\n\nSet ThermalStandard reactive_power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_flow!-Tuple{Line,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_flow!","text":"set_reactive_power_flow!(value::Line, val::Float64) -> Float64\n\n\nSet Line reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_flow!-Tuple{MonitoredLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_flow!","text":"set_reactive_power_flow!(value::MonitoredLine, val::Float64) -> Float64\n\n\nSet MonitoredLine reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_flow!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_flow!","text":"set_reactive_power_flow!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_flow!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_flow!","text":"set_reactive_power_flow!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_flow!-Tuple{Transformer2W,Float64}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_flow!","text":"set_reactive_power_flow!(value::Transformer2W, val::Float64) -> Float64\n\n\nSet Transformer2W reactivepowerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{GenericBattery,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::GenericBattery, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet GenericBattery reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{HydroDispatch,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::HydroDispatch, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet HydroDispatch reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{HydroEnergyReservoir,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::HydroEnergyReservoir, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet HydroEnergyReservoir reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{RenewableDispatch,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::RenewableDispatch, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet RenewableDispatch reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{ThermalMultiStart,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::ThermalMultiStart, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet ThermalMultiStart reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits!-Tuple{ThermalStandard,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits!","text":"set_reactive_power_limits!(value::ThermalStandard, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet ThermalStandard reactivepowerlimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits_from!-Tuple{HVDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits_from!","text":"set_reactive_power_limits_from!(value::HVDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HVDCLine reactivepowerlimits_from.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_reactive_power_limits_to!-Tuple{HVDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_reactive_power_limits_to!","text":"set_reactive_power_limits_to!(value::HVDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet HVDCLine reactivepowerlimits_to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rectifier_firing_angle!-Tuple{VSCDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_rectifier_firing_angle!","text":"set_rectifier_firing_angle!(value::VSCDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet VSCDCLine rectifierfiringangle.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rectifier_tap_limits!-Tuple{VSCDCLine,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_rectifier_tap_limits!","text":"set_rectifier_tap_limits!(value::VSCDCLine, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet VSCDCLine rectifiertaplimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rectifier_xrc!-Tuple{VSCDCLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_rectifier_xrc!","text":"set_rectifier_xrc!(value::VSCDCLine, val::Float64) -> Float64\n\n\nSet VSCDCLine rectifier_xrc.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_requirement!-Tuple{StaticReserve,Float64}","page":"PowerSystems","title":"PowerSystems.set_requirement!","text":"set_requirement!(value::StaticReserve, val::Float64) -> Float64\n\n\nSet StaticReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_requirement!-Tuple{Transfer,Float64}","page":"PowerSystems","title":"PowerSystems.set_requirement!","text":"set_requirement!(value::Transfer, val::Float64) -> Float64\n\n\nSet Transfer requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_requirement!-Tuple{VariableReserve,Float64}","page":"PowerSystems","title":"PowerSystems.set_requirement!","text":"set_requirement!(value::VariableReserve, val::Float64) -> Float64\n\n\nSet VariableReserve requirement.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rf!-Tuple{LCLFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_rf!","text":"set_rf!(value::LCLFilter, val::Float64) -> Float64\n\n\nSet LCLFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rf!-Tuple{PowerSystems.LCFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_rf!","text":"set_rf!(value::PowerSystems.LCFilter, val::Float64) -> Float64\n\n\nSet LCFilter rf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rg!-Tuple{LCLFilter,Float64}","page":"PowerSystems","title":"PowerSystems.set_rg!","text":"set_rg!(value::LCLFilter, val::Float64) -> Float64\n\n\nSet LCLFilter rg.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_rv!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_rv!","text":"set_rv!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl rv.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_saturation_coeffs!-Tuple{AC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_saturation_coeffs!","text":"set_saturation_coeffs!(value::AC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet AC1A saturation_coeffs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_saturation_coeffs!-Tuple{ModifiedAC1A,Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.set_saturation_coeffs!","text":"set_saturation_coeffs!(value::ModifiedAC1A, val::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nSet ModifiedAC1A saturation_coeffs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{FixedAdmittance,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::FixedAdmittance, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet FixedAdmittance services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{GenericBattery,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::GenericBattery, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet GenericBattery services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{HVDCLine,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::HVDCLine, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet HVDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{HydroDispatch,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::HydroDispatch, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet HydroDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{HydroEnergyReservoir,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::HydroEnergyReservoir, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet HydroEnergyReservoir services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{InterruptibleLoad,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::InterruptibleLoad, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet InterruptibleLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{Line,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::Line, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet Line services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{MonitoredLine,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::MonitoredLine, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet MonitoredLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{PhaseShiftingTransformer,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::PhaseShiftingTransformer, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet PhaseShiftingTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{PowerLoad,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::PowerLoad, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet PowerLoad services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{RenewableDispatch,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::RenewableDispatch, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet RenewableDispatch services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{RenewableFix,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::RenewableFix, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet RenewableFix services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{Source,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::Source, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet Source services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{TapTransformer,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::TapTransformer, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet TapTransformer services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{ThermalMultiStart,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::ThermalMultiStart, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet ThermalMultiStart services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{ThermalStandard,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::ThermalStandard, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet ThermalStandard services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{Transformer2W,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::Transformer2W, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet Transformer2W services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_services!-Tuple{VSCDCLine,Array{Service,1}}","page":"PowerSystems","title":"PowerSystems.set_services!","text":"set_services!(value::VSCDCLine, val::Array{Service,1}) -> Array{Service,1}\n\n\nSet VSCDCLine services.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_shutdn!-Tuple{MultiStartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_shutdn!","text":"set_shutdn!(value::MultiStartCost, val::Float64) -> Float64\n\n\nSet MultiStartCost shutdn.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_shutdn!-Tuple{ThreePartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_shutdn!","text":"set_shutdn!(value::ThreePartCost, val::Float64) -> Float64\n\n\nSet ThreePartCost shutdn.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_start_time_limits!-Tuple{ThermalMultiStart,Union{Nothing, NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_start_time_limits!","text":"set_start_time_limits!(value::ThermalMultiStart, val::Union{Nothing, NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}}\n\n\nSet ThermalMultiStart starttimelimits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_start_types!-Tuple{ThermalMultiStart,Int64}","page":"PowerSystems","title":"PowerSystems.set_start_types!","text":"set_start_types!(value::ThermalMultiStart, val::Int64) -> Int64\n\n\nSet ThermalMultiStart start_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_startup!-Tuple{MultiStartCost,NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_startup!","text":"set_startup!(value::MultiStartCost, val::NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}) -> NamedTuple{(:hot, :warm, :cold),Tuple{Float64,Float64,Float64}}\n\n\nSet MultiStartCost startup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_startup!-Tuple{ThreePartCost,Float64}","page":"PowerSystems","title":"PowerSystems.set_startup!","text":"set_startup!(value::ThreePartCost, val::Float64) -> Float64\n\n\nSet ThreePartCost startup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_state_of_charge_limits!-Tuple{GenericBattery,NamedTuple{(:min, :max),Tuple{Float64,Float64}}}","page":"PowerSystems","title":"PowerSystems.set_state_of_charge_limits!","text":"set_state_of_charge_limits!(value::GenericBattery, val::NamedTuple{(:min, :max),Tuple{Float64,Float64}}) -> NamedTuple{(:min, :max),Tuple{Float64,Float64}}\n\n\nSet GenericBattery stateofcharge_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AC1A,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AC1A, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AC1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AVRFixed,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AVRFixed, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AVRFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AVRSimple,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AVRSimple, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AVRSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AVRTypeI,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AVRTypeI, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AVRTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AVRTypeII,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AVRTypeII, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AVRTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AndersonFouadMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AndersonFouadMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AndersonFouadMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{AverageConverter,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::AverageConverter, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet AverageConverter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{BaseMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::BaseMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet BaseMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{CurrentControl,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::CurrentControl, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet CurrentControl states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{DynamicBranch,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::DynamicBranch, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet states\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{FiveMassShaft,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::FiveMassShaft, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet FiveMassShaft states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{FixedDCSource,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::FixedDCSource, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet FixedDCSource states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{FullMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::FullMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet FullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{GasTG,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::GasTG, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet GasTG states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{KauraPLL,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::KauraPLL, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet KauraPLL states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{LCLFilter,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::LCLFilter, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet LCLFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{MarconatoMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::MarconatoMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet MarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{ModifiedAC1A,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::ModifiedAC1A, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet ModifiedAC1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{OneDOneQMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::OneDOneQMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet OneDOneQMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{PSSFixed,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::PSSFixed, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet PSSFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{PSSSimple,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::PSSSimple, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet PSSSimple states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{PowerSystems.LCFilter,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::PowerSystems.LCFilter, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet LCFilter states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{ReactivePowerDroop,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::ReactivePowerDroop, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet ReactivePowerDroop states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{RoundRotorMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::RoundRotorMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet RoundRotorMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{ST1A,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::ST1A, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet ST1A states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{SalientPoleMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::SalientPoleMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet SalientPoleMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{SimpleAFMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::SimpleAFMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet SimpleAFMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{SimpleFullMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::SimpleFullMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet SimpleFullMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{SimpleMarconatoMachine,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::SimpleMarconatoMachine, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet SimpleMarconatoMachine states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{SingleMass,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::SingleMass, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet SingleMass states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{TGFixed,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::TGFixed, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet TGFixed states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{TGTypeI,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::TGTypeI, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet TGTypeI states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{TGTypeII,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::TGTypeII, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet TGTypeII states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states!-Tuple{VirtualInertia,Array{Symbol,1}}","page":"PowerSystems","title":"PowerSystems.set_states!","text":"set_states!(value::VirtualInertia, val::Array{Symbol,1}) -> Array{Symbol,1}\n\n\nSet VirtualInertia states.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{AC1A,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::AC1A, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet AC1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{AVRFixed,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::AVRFixed, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet AVRFixed states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{AVRSimple,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::AVRSimple, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet AVRSimple states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{AVRTypeI,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::AVRTypeI, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet AVRTypeI states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{AVRTypeII,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::AVRTypeII, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet AVRTypeII states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{ModifiedAC1A,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::ModifiedAC1A, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet ModifiedAC1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_states_types!-Tuple{ST1A,Array{PowerSystems.StateTypes.StateType,1}}","page":"PowerSystems","title":"PowerSystems.set_states_types!","text":"set_states_types!(value::ST1A, val::Array{PowerSystems.StateTypes.StateType,1}) -> Array{PowerSystems.StateTypes.StateType,1}\n\n\nSet ST1A states_types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_static_injector!-Union{Tuple{U}, Tuple{T}, Tuple{T,U}} where U<:Union{Nothing, StaticInjection} where T<:DynamicInjection","page":"PowerSystems","title":"PowerSystems.set_static_injector!","text":"set_static_injector!(dynamic_injector::T<:DynamicInjection, static_injector::U<:Union{Nothing, StaticInjection}) -> Union{Nothing, StaticInjection}\n\n\nAll DynamicInjection structs must implement this method to set the value.\n\nThe method is only for internal uses.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_status!-Tuple{ThermalMultiStart,Bool}","page":"PowerSystems","title":"PowerSystems.set_status!","text":"set_status!(value::ThermalMultiStart, val::Bool) -> Bool\n\n\nSet ThermalMultiStart status.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_status!-Tuple{ThermalStandard,Bool}","page":"PowerSystems","title":"PowerSystems.set_status!","text":"set_status!(value::ThermalStandard, val::Bool) -> Bool\n\n\nSet ThermalStandard status.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_storage_capacity!-Tuple{HydroEnergyReservoir,Float64}","page":"PowerSystems","title":"PowerSystems.set_storage_capacity!","text":"set_storage_capacity!(value::HydroEnergyReservoir, val::Float64) -> Float64\n\n\nSet HydroEnergyReservoir storage_capacity.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_tap!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_tap!","text":"set_tap!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_tap!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_tap!","text":"set_tap!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer tap.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_at_status!-Tuple{ThermalMultiStart,Float64}","page":"PowerSystems","title":"PowerSystems.set_time_at_status!","text":"set_time_at_status!(value::ThermalMultiStart, val::Float64) -> Float64\n\n\nSet ThermalMultiStart timeatstatus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_at_status!-Tuple{ThermalStandard,Float64}","page":"PowerSystems","title":"PowerSystems.set_time_at_status!","text":"set_time_at_status!(value::ThermalStandard, val::Float64) -> Float64\n\n\nSet ThermalStandard timeatstatus.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_frame!-Tuple{ReserveDemandCurve,Float64}","page":"PowerSystems","title":"PowerSystems.set_time_frame!","text":"set_time_frame!(value::ReserveDemandCurve, val::Float64) -> Float64\n\n\nSet ReserveDemandCurve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_frame!-Tuple{StaticReserve,Float64}","page":"PowerSystems","title":"PowerSystems.set_time_frame!","text":"set_time_frame!(value::StaticReserve, val::Float64) -> Float64\n\n\nSet StaticReserve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_frame!-Tuple{VariableReserve,Float64}","page":"PowerSystems","title":"PowerSystems.set_time_frame!","text":"set_time_frame!(value::VariableReserve, val::Float64) -> Float64\n\n\nSet VariableReserve time_frame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_limits!-Tuple{HydroDispatch,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_time_limits!","text":"set_time_limits!(value::HydroDispatch, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet HydroDispatch time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_limits!-Tuple{HydroEnergyReservoir,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_time_limits!","text":"set_time_limits!(value::HydroEnergyReservoir, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet HydroEnergyReservoir time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_limits!-Tuple{ThermalMultiStart,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_time_limits!","text":"set_time_limits!(value::ThermalMultiStart, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet ThermalMultiStart time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_time_limits!-Tuple{ThermalStandard,Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_time_limits!","text":"set_time_limits!(value::ThermalStandard, val::Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:up, :down),Tuple{Float64,Float64}}}\n\n\nSet ThermalStandard time_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_to!-Tuple{Arc,Bus}","page":"PowerSystems","title":"PowerSystems.set_to!","text":"set_to!(value::Arc, val::Bus) -> Bus\n\n\nSet Arc to.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_variable!-Tuple{MultiStartCost,VariableCost}","page":"PowerSystems","title":"PowerSystems.set_variable!","text":"set_variable!(value::MultiStartCost, val::VariableCost) -> VariableCost\n\n\nSet MultiStartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_variable!-Tuple{ThreePartCost,VariableCost}","page":"PowerSystems","title":"PowerSystems.set_variable!","text":"set_variable!(value::ThreePartCost, val::VariableCost) -> VariableCost\n\n\nSet ThreePartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_variable!-Tuple{TwoPartCost,VariableCost}","page":"PowerSystems","title":"PowerSystems.set_variable!","text":"set_variable!(value::TwoPartCost, val::VariableCost) -> VariableCost\n\n\nSet TwoPartCost variable.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_voltage!-Tuple{FixedDCSource,Float64}","page":"PowerSystems","title":"PowerSystems.set_voltage!","text":"set_voltage!(value::FixedDCSource, val::Float64) -> Float64\n\n\nSet FixedDCSource voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_voltage_limits!-Tuple{Bus,Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}}","page":"PowerSystems","title":"PowerSystems.set_voltage_limits!","text":"set_voltage_limits!(value::Bus, val::Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}) -> Union{Nothing, NamedTuple{(:min, :max),Tuple{Float64,Float64}}}\n\n\nSet Bus voltage_limits.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_x!-Tuple{Line,Float64}","page":"PowerSystems","title":"PowerSystems.set_x!","text":"set_x!(value::Line, val::Float64) -> Float64\n\n\nSet Line x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_x!-Tuple{MonitoredLine,Float64}","page":"PowerSystems","title":"PowerSystems.set_x!","text":"set_x!(value::MonitoredLine, val::Float64) -> Float64\n\n\nSet MonitoredLine x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_x!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_x!","text":"set_x!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_x!-Tuple{TapTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_x!","text":"set_x!(value::TapTransformer, val::Float64) -> Float64\n\n\nSet TapTransformer x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_x!-Tuple{Transformer2W,Float64}","page":"PowerSystems","title":"PowerSystems.set_x!","text":"set_x!(value::Transformer2W, val::Float64) -> Float64\n\n\nSet Transformer2W x.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_α!-Tuple{PhaseShiftingTransformer,Float64}","page":"PowerSystems","title":"PowerSystems.set_α!","text":"set_α!(value::PhaseShiftingTransformer, val::Float64) -> Float64\n\n\nSet PhaseShiftingTransformer α.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_γd!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_γd!","text":"set_γd!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_γd!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_γd!","text":"set_γd!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine γd.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_γq!-Tuple{MarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_γq!","text":"set_γq!(value::MarconatoMachine, val::Float64) -> Float64\n\n\nSet MarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_γq!-Tuple{SimpleMarconatoMachine,Float64}","page":"PowerSystems","title":"PowerSystems.set_γq!","text":"set_γq!(value::SimpleMarconatoMachine, val::Float64) -> Float64\n\n\nSet SimpleMarconatoMachine γq.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_τ_max!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_τ_max!","text":"set_τ_max!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII τ_max.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_τ_min!-Tuple{TGTypeII,Float64}","page":"PowerSystems","title":"PowerSystems.set_τ_min!","text":"set_τ_min!(value::TGTypeII, val::Float64) -> Float64\n\n\nSet TGTypeII τ_min.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ω_lp!-Tuple{KauraPLL,Float64}","page":"PowerSystems","title":"PowerSystems.set_ω_lp!","text":"set_ω_lp!(value::KauraPLL, val::Float64) -> Float64\n\n\nSet KauraPLL ω_lp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ωad!-Tuple{CurrentControl,Float64}","page":"PowerSystems","title":"PowerSystems.set_ωad!","text":"set_ωad!(value::CurrentControl, val::Float64) -> Float64\n\n\nSet CurrentControl ωad.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_ωf!-Tuple{ReactivePowerDroop,Float64}","page":"PowerSystems","title":"PowerSystems.set_ωf!","text":"set_ωf!(value::ReactivePowerDroop, val::Float64) -> Float64\n\n\nSet ReactivePowerDroop ωf.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.solve_powerflow!-Tuple{System}","page":"PowerSystems","title":"PowerSystems.solve_powerflow!","text":"solve_powerflow!(system::System; finite_diff, kwargs...) -> Bool\n\n\nSolves a the power flow into the system and writes the solution into the relevant structs. Updates generators active and reactive power setpoints and branches active and reactive power flows (calculated in the From - To direction) (see flow_val)\n\nSupports solving using Finite Differences Method (instead of using analytic Jacobian) by setting finite_diff = true. Supports passing NLsolve kwargs in the args. By default shows the solver trace.\n\nArguments available for nlsolve:\n\nmethod : See NLSolve.jl documentation for available solvers\nxtol: norm difference in x between two successive iterates under which convergence is declared. Default: 0.0.\nftol: infinite norm of residuals under which convergence is declared. Default: 1e-8.\niterations: maximum number of iterations. Default: 1_000.\nstore_trace: should a trace of the optimization algorithm's state be stored? Default: false.\nshow_trace: should a trace of the optimization algorithm's state be shown on STDOUT? Default: false.\nextended_trace: should additifonal algorithm internals be added to the state trace? Default: false.\n\nExamples\n\nsolve_powerflow!(sys)\n# Passing NLsolve arguments\nsolve_powerflow!(sys, method = :newton)\n# Using Finite Differences\nsolve_powerflow!(sys, finite_diff = true)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.solve_powerflow-Tuple{System}","page":"PowerSystems","title":"PowerSystems.solve_powerflow","text":"solve_powerflow(system::System; finite_diff, kwargs...) -> Union{Bool, Dict{String,DataFrames.DataFrame}}\n\n\nSimilar to solve_powerflow!(sys) but does not update the system struct with results. Returns the results in a dictionary of dataframes.\n\nExamples\n\nres = solve_powerflow(sys)\n# Passing NLsolve arguments\nres = solve_powerflow(sys, method = :newton)\n# Using Finite Differences\nres = solve_powerflow(sys, finite_diff = true)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.to_json-Tuple{IO,System}","page":"PowerSystems","title":"PowerSystems.to_json","text":"to_json(io::IO, sys::System) -> Any\n\n\nSerializes a system an IO stream in JSON.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.to_json-Tuple{System,AbstractString}","page":"PowerSystems","title":"PowerSystems.to_json","text":"to_json(sys::System, filename::AbstractString; force) -> Any\n\n\nSerializes a system to a JSON string.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.update_data!-Tuple{Dict{String,#s800} where #s800,Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.update_data!","text":"update_data!(data::Dict{String,#s800} where #s800, new_data::Dict{String,#s799} where #s799)\n\n\nrecursively applies new_data to data, overwriting information\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.validate_forecast_consistency-Tuple{System}","page":"PowerSystems","title":"PowerSystems.validate_forecast_consistency","text":"validate_forecast_consistency(sys::System) -> Bool\n\n\nReturn true if all forecasts have consistent parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#Internal","page":"PowerSystems","title":"Internal","text":"","category":"section"},{"location":"api/PowerSystems/","page":"PowerSystems","title":"PowerSystems","text":"Modules = [PowerSystems]\nPublic = false","category":"page"},{"location":"api/PowerSystems/#PowerSystems._pti_dtypes","page":"PowerSystems","title":"PowerSystems._pti_dtypes","text":"lookup array of data types for PTI file sections given by field_name, as enumerated by PSS/E Program Operation Manual.\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems._pti_sections","page":"PowerSystems","title":"PowerSystems._pti_sections","text":"A list of data file sections in the order that they appear in a PTI v33 file\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems.pm_component_status","page":"PowerSystems","title":"PowerSystems.pm_component_status","text":"maps component types to status parameters\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems.pm_component_status_inactive","page":"PowerSystems","title":"PowerSystems.pm_component_status_inactive","text":"maps component types to inactive status values\n\n\n\n\n\n","category":"constant"},{"location":"api/PowerSystems/#PowerSystems.LCFilter","page":"PowerSystems","title":"PowerSystems.LCFilter","text":"mutable struct LCFilter <: Filter\n    lf::Float64\n    rf::Float64\n    cf::Float64\n    ext::Dict{String, Any}\n    states::Vector{Symbol}\n    n_states::Int64\nend\n\nParameters of a LCL filter outside the converter\n\nArguments\n\nlf::Float64: filter inductance, validation range: (0, nothing)\nrf::Float64: filter resistance, validation range: (0, nothing)\ncf::Float64: filter capacitance, validation range: (0, nothing)\next::Dict{String, Any}\nstates::Vector{Symbol}: The states of the LCFilter model are:\n\nir_filter: Real current out of the filter,\nii_filter: Imaginary current out of the filter\n\nn_states::Int64: LCFilter has two states\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#PowerSystems.PowerSystemTableData-Tuple{AbstractString,Float64,AbstractString}","page":"PowerSystems","title":"PowerSystems.PowerSystemTableData","text":"PowerSystemTableData(directory::AbstractString, base_power::Float64, user_descriptor_file::AbstractString; descriptor_file, generator_mapping_file, timeseries_metadata_file) -> PowerSystems.PowerSystemTableData\n\n\nReads in all the data stored in csv files The general format for data is     folder:         gen.csv         branch.csv         bus.csv         ..         load.csv\n\nArguments\n\ndirectory::AbstractString: directory containing CSV files\nbase_power::Float64: base power for System\nuser_descriptor_file::AbstractString: customized input descriptor file\ndescriptor_file=POWER_SYSTEM_DESCRIPTOR_FILE: PowerSystems descriptor file\ngenerator_mapping_file=GENERATOR_MAPPING_FILE: generator mapping configuration file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._FieldInfo","page":"PowerSystems","title":"PowerSystems._FieldInfo","text":"Stores user-customized information for required dataframe columns.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSystems/#InfrastructureSystems.convert_type-Union{Tuple{T}, Tuple{Type{T},NamedTuple,Dict}} where T<:Device","page":"PowerSystems","title":"InfrastructureSystems.convert_type","text":"convert_type(_::Type{T<:Device}, data::NamedTuple, component_cache::Dict) -> Any\n\n\nCreates a Device object by decoding the data that was in JSON. This data stores the values for buses and services as UUIDs, so this will lookup each in component_cache.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._add_dcline_costs!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._add_dcline_costs!","text":"_add_dcline_costs!(data::Dict{String,Any})\n\n\nadds dcline costs, if gen costs exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._add_line_delimiter-Tuple{AbstractString,Any,Any}","page":"PowerSystems","title":"PowerSystems._add_line_delimiter","text":"_add_line_delimiter(mp_line::AbstractString, start_char::Any, end_char::Any) -> AbstractString\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._apply_func!-Tuple{Dict{String,#s801} where #s801,String,Any}","page":"PowerSystems","title":"PowerSystems._apply_func!","text":"_apply_func!(data::Dict{String,#s801} where #s801, key::String, func::Any) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._biggest_generator-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._biggest_generator","text":"_biggest_generator(gens::Any) -> Any\n\n\nfind the largest active generator in the network\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._bold-Tuple{String}","page":"PowerSystems","title":"PowerSystems._bold","text":"_bold(s::String) -> String\n\n\nMakes a string bold in the terminal\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_branch_flow_ac-Tuple{Dict{String,#s793} where #s793}","page":"PowerSystems","title":"PowerSystems._calc_branch_flow_ac","text":"_calc_branch_flow_ac(data::Dict{String,#s793} where #s793) -> Dict{String,Any}\n\n\nhelper function for calcbranchflow_ac\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_branch_flow_dc-Tuple{Dict{String,#s794} where #s794}","page":"PowerSystems","title":"PowerSystems._calc_branch_flow_dc","text":"_calc_branch_flow_dc(data::Dict{String,#s794} where #s794) -> Dict{String,Any}\n\n\nhelper function for calcbranchflow_dc\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_comp_lines-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems._calc_comp_lines","text":"_calc_comp_lines(component::Dict{String,#s799} where #s799) -> Array{Any,1}\n\n\ncompute lines in m and b from from pwl cost models\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_max_cost_index-Tuple{Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems._calc_max_cost_index","text":"_calc_max_cost_index(data::Dict{String,#s797} where #s797) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._calc_power_balance-Tuple{Dict{String,#s781} where #s781}","page":"PowerSystems","title":"PowerSystems._calc_power_balance","text":"_calc_power_balance(data::Dict{String,#s781} where #s781) -> Dict{String,Any}\n\n\nhelper function for calcpowerbalance\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._check_conductors-Tuple{Dict{String,#s801} where #s801}","page":"PowerSystems","title":"PowerSystems._check_conductors","text":"_check_conductors(data::Dict{String,#s801} where #s801)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._check_keys-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._check_keys","text":"_check_keys(data::Any, keys::Any)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._compare_numbers-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._compare_numbers","text":"_compare_numbers(v1::Any, v2::Any) -> Bool\n\n\ntests if two numbers are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._correct_cost_function!-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems._correct_cost_function!","text":"_correct_cost_function!(id::Any, comp::Any, type_name::Any) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._correct_reference_buses!-Tuple{Dict{String,#s790} where #s790}","page":"PowerSystems","title":"PowerSystems._correct_reference_buses!","text":"_correct_reference_buses!(data::Dict{String,#s790} where #s790)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._create_starbus_from_transformer-Tuple{Dict,Dict}","page":"PowerSystems","title":"PowerSystems._create_starbus_from_transformer","text":"_create_starbus_from_transformer(pm_data::Dict, transformer::Dict) -> Dict{String,Any}\n\n\ncreate_starbus(pm_data, transformer)\n\nCreates a starbus from a given three-winding transformer. \"sourceid\" is given by `[\"busi\", \"name\", \"I\", \"J\", \"K\", \"CKT\"]` where \"bus_i\" and \"name\" are the modified names for the starbus, and \"I\", \"J\", \"K\" and \"CKT\" come from the originating transformer, in the PSS(R)E transformer specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._dfs-NTuple{4,Any}","page":"PowerSystems","title":"PowerSystems._dfs","text":"_dfs(i::Any, neighbors::Any, component_lookup::Any, touched::Any)\n\n\nperforms DFS on a graph\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._export_cost_data-Tuple{IO,Dict{Int64,Dict},String}","page":"PowerSystems","title":"PowerSystems._export_cost_data","text":"_export_cost_data(io::IO, components::Dict{Int64,Dict}, prefix::String)\n\n\nExport cost data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._export_extra_data","page":"PowerSystems","title":"PowerSystems._export_extra_data","text":"_export_extra_data(io::IO, data::Dict{String,#s787} where #s787, component::Any)\n_export_extra_data(io::IO, data::Dict{String,#s786} where #s786, component::Any, excluded_fields::Any; postfix)\n\n\nExport fields of a component type\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._extract_matlab_assignment-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._extract_matlab_assignment","text":"_extract_matlab_assignment(string::AbstractString) -> Tuple{SubString,SubString}\n\n\nbreaks up matlab strings of the form 'name = value;'\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._find_max_bus_id-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._find_max_bus_id","text":"_find_max_bus_id(pm_data::Dict) -> Int64\n\n\n_find_max_bus_id(pm_data)\n\nReturns the maximum bus id in pm_data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._float2string-Tuple{AbstractFloat,Int64}","page":"PowerSystems","title":"PowerSystems._float2string","text":"_float2string(v::AbstractFloat, float_precision::Int64) -> String\n\n\nconverts a float value into a string of fixed precision\n\nsprintf would do the job but this work around is needed because sprintf cannot take format strings during runtime\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_bus_value-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems._get_bus_value","text":"_get_bus_value(bus_i::Any, field::Any, pm_data::Any) -> Any\n\n\n_get_bus_value(bus_i, field, pm_data)\n\nReturns the value of field of bus_i from the PowerModels data. Requires \"bus\" Dict to already be populated.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_default","page":"PowerSystems","title":"PowerSystems._get_default","text":"_get_default(dict::Any, key::Any) -> Any\n_get_default(dict::Any, key::Any, default::Any) -> Any\n\n\nGet a default value for dict entry \n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._get_line_elements-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._get_line_elements","text":"_get_line_elements(line::AbstractString) -> Tuple{Array{_A,1} where _A,Union{String, SubString}}\n\n\n_get_line_elements(line)\n\nInternal function. Uses regular expressions to extract all separate data elements from a line of a PTI file and populate them into an Array{String}. Comments, typically indicated at the end of a line with a '/' character, are also extracted separately, and Array{Array{String}, String} is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_load_data-Tuple{System,Bus}","page":"PowerSystems","title":"PowerSystems._get_load_data","text":"_get_load_data(sys::System, b::Bus) -> Tuple{Any,Any}\n\n\nObtain total load on bus b\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._get_pm_dict_name-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._get_pm_dict_name","text":"_get_pm_dict_name(device_dict::Any) -> Any\n\n\nInternal component name retreval from pm2ps_dict\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._grey-Tuple{String}","page":"PowerSystems","title":"PowerSystems._grey","text":"_grey(s::String) -> String\n\n\nMakes a string grey in the terminal, does not seem to work well on Windows terminals more info can be found at https://en.wikipedia.org/wiki/ANSIescapecode\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._import_remaining!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._import_remaining!","text":"_import_remaining!(data_out::Dict, data_in::Dict, import_all::Bool; exclude)\n\n\nImports remaining keys from data_in into data_out, excluding keys in exclude\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._init_bus!-Tuple{Dict{String,Any},Int64}","page":"PowerSystems","title":"PowerSystems._init_bus!","text":"_init_bus!(bus::Dict{String,Any}, id::Int64) -> Int64\n\n\n_init_bus!(bus, id)\n\nInitializes a bus of id id with default values given in the PSS(R)E specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._make_mixed_units!-Tuple{Dict{String,#s786} where #s786,Real}","page":"PowerSystems","title":"PowerSystems._make_mixed_units!","text":"_make_mixed_units!(data::Dict{String,#s786} where #s786, mva_base::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._make_per_unit!-Tuple{Dict{String,#s786} where #s786,Real}","page":"PowerSystems","title":"PowerSystems._make_per_unit!","text":"_make_per_unit!(data::Dict{String,#s786} where #s786, mva_base::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._matpower_to_powermodels!-Tuple{Dict{String,#s136} where #s136}","page":"PowerSystems","title":"PowerSystems._matpower_to_powermodels!","text":"_matpower_to_powermodels!(mp_data::Dict{String,#s136} where #s136) -> Dict{String,#s136} where #s136\n\n\nConverts a Matpower dict into a PowerModels dict\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_bus_name_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_bus_name_data!","text":"_merge_bus_name_data!(data::Dict{String,Any}) -> Union{Nothing, Dict{String,Any}}\n\n\nmerges bus name data into buses, if names exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_generator_cost_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_generator_cost_data!","text":"_merge_generator_cost_data!(data::Dict{String,Any}) -> Union{Nothing, Dict{String,Any}}\n\n\nmerges generator cost functions into generator data, if costs exist\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._merge_generic_data!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._merge_generic_data!","text":"_merge_generic_data!(data::Dict{String,Any})\n\n\nmerges Matpower tables based on the table extension syntax\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp2pm_branch!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._mp2pm_branch!","text":"_mp2pm_branch!(data::Dict{String,Any})\n\n\nsets all branch transformer taps to 1.0, to simplify branch models\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp2pm_dcline!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._mp2pm_dcline!","text":"_mp2pm_dcline!(data::Dict{String,Any})\n\n\nadds pmin and pmax values at to and from buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._mp_cost_data-Tuple{Any}","page":"PowerSystems","title":"PowerSystems._mp_cost_data","text":"_mp_cost_data(cost_row::Any) -> Dict{String,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_elements-Tuple{Array,Array,Dict,AbstractString}","page":"PowerSystems","title":"PowerSystems._parse_elements","text":"_parse_elements(elements::Array, dtypes::Array, defaults::Dict, section::AbstractString) -> Dict{String,Any}\n\n\nThis is an experimental method for parsing elements and setting defaults at the same time. It is not currently working but would reduce memory allocations if implemented correctly.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_line_element!-Tuple{Dict,Array,AbstractString}","page":"PowerSystems","title":"PowerSystems._parse_line_element!","text":"_parse_line_element!(data::Dict, elements::Array, section::AbstractString)\n\n\n_parse_line_element!(data, elements, section)\n\nInternal function. Parses a single \"line\" of data elements from a PTI file, as given by elements which is an array of the line, typically split at ,. Elements are parsed into data types given by section and saved into data::Dict.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_cells-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_cells","text":"_parse_matlab_cells(lines::Any, index::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_data-NTuple{4,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_data","text":"_parse_matlab_data(lines::Any, index::Any, start_char::Any, end_char::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matlab_matrix-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems._parse_matlab_matrix","text":"_parse_matlab_matrix(lines::Any, index::Any) -> Dict{_A,_B} where _B where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_matpower_string-Tuple{String}","page":"PowerSystems","title":"PowerSystems._parse_matpower_string","text":"_parse_matpower_string(data_string::String) -> Dict{String,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._parse_pti_data-Tuple{IO}","page":"PowerSystems","title":"PowerSystems._parse_pti_data","text":"_parse_pti_data(data_io::IO) -> Dict{String,Array{Dict,N} where N}\n\n\n_parse_pti_data(data_string, sections)\n\nInternal function. Parse a PTI raw file into a Dict, given the data_string of the file and a list of the sections in the PTI file (typically given by default by get_pti_sections().\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._populate_defaults!-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._populate_defaults!","text":"_populate_defaults!(data::Dict)\n\n\n_populate_defaults!(pti_data)\n\nInternal function. Populates empty fields with PSS(R)E PTI v33 default values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._propagate_topology_status!-Tuple{Dict{String,#s737} where #s737}","page":"PowerSystems","title":"PowerSystems._propagate_topology_status!","text":"_propagate_topology_status!(data::Dict{String,#s737} where #s737)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_branch!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_branch!","text":"_psse2pm_branch!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_branch!(pm_data, pti_data)\n\nParses PSS(R)E-style Branch data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"J\", \"CKT\"] in PSS(R)E Branch specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_bus!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_bus!","text":"_psse2pm_bus!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_bus!(pm_data, pti_data)\n\nParses PSS(R)E-style Bus data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"NAME\"] in PSS(R)E Bus specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_dcline!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_dcline!","text":"_psse2pm_dcline!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_dcline!(pm_data, pti_data)\n\nParses PSS(R)E-style Two-Terminal and VSC DC Lines data into a PowerModels compatible Dict structure by first converting them to a simple DC Line Model. For Two-Terminal DC lines, \"sourceid\" is given by [\"IPR\", \"IPI\", \"NAME\"] in the PSS(R)E Two-Terminal DC specification. For Voltage Source Converters, \"sourceid\" is given by [\"IBUS1\", \"IBUS2\", \"NAME\"], where \"IBUS1\" is \"IBUS\" of the first converter bus, and \"IBUS2\" is the \"IBUS\" of the second converter bus, in the PSS(R)E Voltage Source Converter specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_generator!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_generator!","text":"_psse2pm_generator!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_generator!(pm_data, pti_data)\n\nParses PSS(R)E-style Generator data in a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] in PSS(R)E Generator specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_load!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_load!","text":"_psse2pm_load!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_load!(pm_data, pti_data)\n\nParses PSS(R)E-style Load data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] in the PSS(R)E Load specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_shunt!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_shunt!","text":"_psse2pm_shunt!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_shunt!(pm_data, pti_data)\n\nParses PSS(R)E-style Fixed and Switched Shunt data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"ID\"] for Fixed Shunts, and [\"I\", \"SWREM\"] for Switched Shunts, as given by the PSS(R)E Fixed and Switched Shunts specifications.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._psse2pm_transformer!-Tuple{Dict,Dict,Bool}","page":"PowerSystems","title":"PowerSystems._psse2pm_transformer!","text":"_psse2pm_transformer!(pm_data::Dict, pti_data::Dict, import_all::Bool)\n\n\n_psse2pm_transformer!(pm_data, pti_data)\n\nParses PSS(R)E-style Transformer data into a PowerModels-style Dict. \"source_id\" is given by [\"I\", \"J\", \"K\", \"CKT\", \"winding\"], where \"winding\" is 0 if transformer is two-winding, and 1, 2, or 3 for three-winding, and the remaining keys are defined in the PSS(R)E Transformer specification.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._pti_to_powermodels!-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems._pti_to_powermodels!","text":"_pti_to_powermodels!(pti_data::Dict; import_all, validate) -> Dict{String,Any}\n\n\n_pti_to_powermodels!(pti_data)\n\nConverts PSS(R)E-style data parsed from a PTI raw file, passed by pti_data into a format suitable for use internally in PowerModels. Imports all remaining data from the PTI file if import_all is true (Default: false).\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._read_data_row-Tuple{PowerSystems.PowerSystemTableData,Any,Any}","page":"PowerSystems","title":"PowerSystems._read_data_row","text":"_read_data_row(data::PowerSystems.PowerSystemTableData, row::Any, field_infos::Any; na_to_nothing) -> NamedTuple\n\n\nReads values from dataframe row and performs necessary conversions.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._remove_aggregration_topology!-Tuple{Bus,LoadZone}","page":"PowerSystems","title":"PowerSystems._remove_aggregration_topology!","text":"_remove_aggregration_topology!(bus::Bus, _::LoadZone)\n\n\nRemove the aggregation topology in a Bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._remove_pwl_cost_duplicates!","page":"PowerSystems","title":"PowerSystems._remove_pwl_cost_duplicates!","text":"_remove_pwl_cost_duplicates!(id::Any, comp::Any, type_name::Any) -> Bool\n_remove_pwl_cost_duplicates!(id::Any, comp::Any, type_name::Any, tolerance::Any) -> Bool\n\n\nchecks that each point in the a pwl function is unqiue, simplifies the function if duplicates appear\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._remove_service!-Tuple{Device,Service}","page":"PowerSystems","title":"PowerSystems._remove_service!","text":"_remove_service!(device::Device, service::Service) -> Bool\n\n\nRemove service from device if it is attached.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._rescale_cost_model!-Tuple{Dict{String,#s798} where #s798,Real}","page":"PowerSystems","title":"PowerSystems._rescale_cost_model!","text":"_rescale_cost_model!(comp::Dict{String,#s798} where #s798, scale::Real)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._select_largest_component!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems._select_largest_component!","text":"_select_largest_component!(data::Dict{String,#s799} where #s799) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._simplify_pwl_cost!","page":"PowerSystems","title":"PowerSystems._simplify_pwl_cost!","text":"_simplify_pwl_cost!(id::Any, comp::Any, type_name::Any) -> Bool\n_simplify_pwl_cost!(id::Any, comp::Any, type_name::Any, tolerance::Any) -> Bool\n\n\nchecks the slope of each segment in a pwl function, simplifies the function if the slope changes is below a tolerance\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems._split_loads_shunts!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems._split_loads_shunts!","text":"_split_loads_shunts!(data::Dict{String,Any})\n\n\n_split_loads_shunts!(data)\n\nSeperates Loads and Shunts in data under separate \"load\" and \"shunt\" keys in the PowerModels data format. Includes references to originating bus via \"loadbus\" and \"shuntbus\" keys, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._standardize_cost_terms!-Tuple{Dict{String,#s798} where #s798,Int64,String}","page":"PowerSystems","title":"PowerSystems._standardize_cost_terms!","text":"_standardize_cost_terms!(components::Dict{String,#s798} where #s798, comp_order::Int64, cost_comp_name::String) -> Set{Int64}\n\n\nensures all polynomial costs functions have at exactly comp_order terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._type_array-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:AbstractString","page":"PowerSystems","title":"PowerSystems._type_array","text":"_type_array(string_array::Array{T<:AbstractString,1}) -> Any\n\n\nAttempts to determine the type of an array of strings extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._type_value-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems._type_value","text":"_type_value(value_string::AbstractString) -> Union{Float64, Int64, SubString}\n\n\nAttempts to determine the type of a string extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._update_branch_flow!-Tuple{System}","page":"PowerSystems","title":"PowerSystems._update_branch_flow!","text":"_update_branch_flow!(sys::System)\n\n\nUpdates the flow on the branches\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._update_data!-Tuple{Dict{String,#s798} where #s798,Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems._update_data!","text":"_update_data!(data::Dict{String,#s798} where #s798, new_data::Dict{String,#s797} where #s797)\n\n\nrecursive call of updatedata\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._value2string-Tuple{Any,Int64}","page":"PowerSystems","title":"PowerSystems._value2string","text":"_value2string(v::Any, float_precision::Int64) -> Any\n\n\nconverts any value to a string, summarizes arrays and dicts\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._write_pf_sol!-Tuple{System,Any}","page":"PowerSystems","title":"PowerSystems._write_pf_sol!","text":"_write_pf_sol!(sys::System, nl_result::Any)\n\n\nUpdates system voltages and powers with power flow results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems._write_results-Tuple{System,Any}","page":"PowerSystems","title":"PowerSystems._write_results","text":"_write_results(sys::System, nl_result::Any) -> Dict{String,DataFrames.DataFrame}\n\n\nReturn power flow results in dictionary of dataframes.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.adequacy_check-Tuple{System}","page":"PowerSystems","title":"PowerSystems.adequacy_check","text":"adequacy_check(sys::System) -> Union{Nothing, Bool}\n\n\nadequacy_check(sys::System)\n\nChecks the system for sum(generator ratings) >= sum(load ratings).\n\nArguments\n\nsys::System: system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.arrays_to_dicts!-Tuple{Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems.arrays_to_dicts!","text":"arrays_to_dicts!(data::Dict{String,#s797} where #s797)\n\n\nturns top level arrays into dicts\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.branch_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.branch_csv_parser!","text":"branch_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nAdd branches to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.bus_csv_parser!","text":"bus_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nAdd buses and areas to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_gen_lookup-Tuple{Dict{String,#s796} where #s796,Dict{String,#s795} where #s795}","page":"PowerSystems","title":"PowerSystems.bus_gen_lookup","text":"bus_gen_lookup(gen_data::Dict{String,#s796} where #s796, bus_data::Dict{String,#s795} where #s795) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what generators are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_load_lookup-Tuple{Dict{String,#s796} where #s796,Dict{String,#s795} where #s795}","page":"PowerSystems","title":"PowerSystems.bus_load_lookup","text":"bus_load_lookup(load_data::Dict{String,#s796} where #s796, bus_data::Dict{String,#s795} where #s795) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what loads are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_shunt_lookup-Tuple{Dict{String,#s796} where #s796,Dict{String,#s795} where #s795}","page":"PowerSystems","title":"PowerSystems.bus_shunt_lookup","text":"bus_shunt_lookup(shunt_data::Dict{String,#s796} where #s796, bus_data::Dict{String,#s795} where #s795) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what shunts are connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.bus_storage_lookup-Tuple{Dict{String,#s796} where #s796,Dict{String,#s795} where #s795}","page":"PowerSystems","title":"PowerSystems.bus_storage_lookup","text":"bus_storage_lookup(storage_data::Dict{String,#s796} where #s796, bus_data::Dict{String,#s795} where #s795) -> Dict{_A,_B} where _B where _A\n\n\nbuilds a lookup list of what storage is connected to a given bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_flow_ac-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.calc_branch_flow_ac","text":"calc_branch_flow_ac(data::Dict{String,#s799} where #s799) -> Dict{String,Any}\n\n\nassumes a vaild ac solution is included in the data and computes the branch flow values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_flow_dc-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.calc_branch_flow_dc","text":"calc_branch_flow_dc(data::Dict{String,#s799} where #s799) -> Dict{String,Any}\n\n\nassumes a vaild dc solution is included in the data and computes the branch flow values\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_t-Tuple{Dict{String,#s801} where #s801}","page":"PowerSystems","title":"PowerSystems.calc_branch_t","text":"calc_branch_t(branch::Dict{String,#s801} where #s801) -> Tuple{Any,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_branch_y-Tuple{Dict{String,#s801} where #s801}","page":"PowerSystems","title":"PowerSystems.calc_branch_y","text":"calc_branch_y(branch::Dict{String,#s801} where #s801) -> Tuple{Any,Any}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_connected_components-Tuple{Dict{String,#s793} where #s793}","page":"PowerSystems","title":"PowerSystems.calc_connected_components","text":"calc_connected_components(data::Dict{String,#s793} where #s793; edges) -> Set{Set{Int64}}\n\n\ncomputes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_cost_pwl_lines-Tuple{Dict}","page":"PowerSystems","title":"PowerSystems.calc_cost_pwl_lines","text":"calc_cost_pwl_lines(comp_dict::Dict) -> Dict{Any,Any}\n\n\ncompute lines in m and b from from pwl cost models data is a list of components.\n\nCan be run on data or ref data structures\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_dcline_cost-Tuple{Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems.calc_dcline_cost","text":"calc_dcline_cost(data::Dict{String,#s797} where #s797) -> Any\n\n\ncomputes the dcline cost from given network data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_gen_cost-Tuple{Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems.calc_gen_cost","text":"calc_gen_cost(data::Dict{String,#s797} where #s797) -> Any\n\n\ncomputes the generator cost from given network data\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_max_cost_index-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.calc_max_cost_index","text":"calc_max_cost_index(data::Dict{String,Any}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_power_balance-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.calc_power_balance","text":"calc_power_balance(data::Dict{String,#s799} where #s799) -> Dict{String,Any}\n\n\nassumes a vaild solution is included in the data and computes the power balance at each bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.calc_theta_delta_bounds-Tuple{Dict{String,#s800} where #s800}","page":"PowerSystems","title":"PowerSystems.calc_theta_delta_bounds","text":"calc_theta_delta_bounds(data::Dict{String,#s800} where #s800) -> Tuple{Real,Real}\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_ascending_order-Tuple{Array{Int64,N} where N,AbstractString}","page":"PowerSystems","title":"PowerSystems.check_ascending_order","text":"check_ascending_order(array::Array{Int64,N} where N, name::AbstractString)\n\n\nThrows DataFormatError if the array is not in ascending order.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_branch_loops-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.check_branch_loops","text":"check_branch_loops(data::Dict{String,#s799} where #s799)\n\n\nchecks that all branches connect two distinct buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_bus-Tuple{System,Bus,Component}","page":"PowerSystems","title":"PowerSystems.check_bus","text":"check_bus(sys::System, bus::Bus, component::Component)\n\n\nThrows ArgumentError if the bus is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_component_addition-Tuple{System,Component}","page":"PowerSystems","title":"PowerSystems.check_component_addition","text":"check_component_addition(sys::System, component::Component)\n\n\nThrows ArgumentError if a PowerSystems rule blocks addition to the system.\n\nThis method is tied with handlecomponentaddition!. If the methods are re-implemented for a subtype then whatever is added in handlecomponentaddition! must be checked here.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_component_removal-Tuple{System,Component}","page":"PowerSystems","title":"PowerSystems.check_component_removal","text":"check_component_removal(sys::System, component::Component)\n\n\nThrows ArgumentError if a PowerSystems rule blocks removal from the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_conductors-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.check_conductors","text":"check_conductors(data::Dict{String,#s799} where #s799)\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_connectivity-Tuple{Dict{String,#s785} where #s785}","page":"PowerSystems","title":"PowerSystems.check_connectivity","text":"check_connectivity(data::Dict{String,#s785} where #s785)\n\n\nchecks that all buses are unique and other components link to valid buses\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_reference_bus-Tuple{Dict{String,#s798} where #s798}","page":"PowerSystems","title":"PowerSystems.check_reference_bus","text":"check_reference_bus(data::Dict{String,#s798} where #s798)\n\n\nchecks that contains at least one refrence bus\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_reference_buses-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.check_reference_buses","text":"check_reference_buses(data::Dict{String,Any})\n\n\nchecks that each connected components has a reference bus, if not, adds one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_status-Tuple{Dict{String,#s785} where #s785}","page":"PowerSystems","title":"PowerSystems.check_status","text":"check_status(data::Dict{String,#s785} where #s785)\n\n\nchecks that active components are not connected to inactive buses, otherwise prints warnings\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_storage_parameters-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.check_storage_parameters","text":"check_storage_parameters(data::Dict{String,Any})\n\n\nchecks that each storage unit has a reasonable parameters\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_switch_parameters-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.check_switch_parameters","text":"check_switch_parameters(data::Dict{String,#s799} where #s799)\n\n\nchecks that each switch has a reasonable parameters\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_type-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.check_type","text":"check_type(typ::Any, value::Any) -> Any\n\n\nChecks if the given value is of a given type, if not tries to make it that type\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.check_voltage_setpoints-Tuple{Dict{String,#s796} where #s796}","page":"PowerSystems","title":"PowerSystems.check_voltage_setpoints","text":"check_voltage_setpoints(data::Dict{String,#s796} where #s796)\n\n\nthrows warnings if generator and dc line voltage setpoints are not consistent with the bus voltage setpoint\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.compare_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.compare_dict","text":"compare_dict(d1::Any, d2::Any) -> Bool\n\n\ntests if two dicts are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.copy_forecasts!","page":"PowerSystems","title":"PowerSystems.copy_forecasts!","text":"copy_forecasts!(src::InfrastructureSystems.InfrastructureSystemsType, dst::InfrastructureSystems.InfrastructureSystemsType)\ncopy_forecasts!(src::InfrastructureSystems.InfrastructureSystemsType, dst::InfrastructureSystems.InfrastructureSystemsType, label_mapping::Union{Nothing, Dict{String,String}})\n\n\nEfficiently add all forecasts in one component to another by copying the underlying references.\n\nArguments\n\nsrc::InfrastructureSystemsType: Source component\ndst::InfrastructureSystemsType: Destination component\nlabel_mapping::Dict = nothing: Optionally map src labels to different dst labels. If provided and src has a forecast with a label not present in labelmapping, that forecast will not copied. If labelmapping is nothing then all forecasts will be copied with src's labels.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.correct_branch_directions!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.correct_branch_directions!","text":"correct_branch_directions!(data::Dict{String,#s799} where #s799) -> Set{Int64}\n\n\nchecks that all parallel branches have the same orientation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_bus_types!-Tuple{Dict{String,#s795} where #s795}","page":"PowerSystems","title":"PowerSystems.correct_bus_types!","text":"correct_bus_types!(data::Dict{String,#s795} where #s795) -> Set{Int64}\n\n\nchecks bus types are consistent with generator connections, if not, fixes them\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_component_refrence_bus!-Tuple{Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.correct_component_refrence_bus!","text":"correct_component_refrence_bus!(component_bus_ids::Any, bus_lookup::Any, component_gens::Any)\n\n\nchecks that a connected component has a reference bus, if not, adds one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_cost_functions!-Tuple{Dict{String,#s797} where #s797}","page":"PowerSystems","title":"PowerSystems.correct_cost_functions!","text":"correct_cost_functions!(data::Dict{String,#s797} where #s797) -> Tuple{Set{Int64},Set{Int64}}\n\n\nthrows warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_current_limits!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.correct_current_limits!","text":"correct_current_limits!(data::Dict{String,#s799} where #s799) -> Set{Int64}\n\n\nchecks that each branch has a reasonable current rating-a, if not computes one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_dcline_limits!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.correct_dcline_limits!","text":"correct_dcline_limits!(data::Dict{String,Any}) -> Set{Int64}\n\n\nchecks that parameters for dc lines are reasonable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_network_data!-Tuple{Dict{String,#s800} where #s800}","page":"PowerSystems","title":"PowerSystems.correct_network_data!","text":"correct_network_data!(data::Dict{String,#s800} where #s800) -> Dict{String,Dict{Symbol,Set{Int64}}}\n\n\nRuns various data quality checks on a PowerModels data dictionary. Applies modifications in some cases.  Reports modified component ids.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_thermal_limits!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.correct_thermal_limits!","text":"correct_thermal_limits!(data::Dict{String,#s799} where #s799) -> Set{Int64}\n\n\nchecks that each branch has a reasonable thermal rating-a, if not computes one\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_transformer_parameters!-Tuple{Dict{String,#s798} where #s798}","page":"PowerSystems","title":"PowerSystems.correct_transformer_parameters!","text":"correct_transformer_parameters!(data::Dict{String,#s798} where #s798) -> Set{Int64}\n\n\nchecks that each branch has a reasonable transformer parameters\n\nthis is important because setting tap == 0.0 leads to NaN computations, which are hard to debug\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.correct_voltage_angle_differences!","page":"PowerSystems","title":"PowerSystems.correct_voltage_angle_differences!","text":"correct_voltage_angle_differences!(data::Dict{String,#s797} where #s797) -> Set{Int64}\ncorrect_voltage_angle_differences!(data::Dict{String,#s796} where #s796, default_pad::Any) -> Set{Int64}\n\n\nchecks that voltage angle differences are within 90 deg., if not tightens\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.dc_branch_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.dc_branch_csv_parser!","text":"dc_branch_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nAdd DC branches to the System from raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.encode_for_json-Union{Tuple{T}, Tuple{T}} where T<:Device","page":"PowerSystems","title":"PowerSystems.encode_for_json","text":"Encode composed buses, injectors, and services as UUIDs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.export_matpower-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.export_matpower","text":"export_matpower(data::Dict{String,Any}) -> String\n\n\nExport power network data in the matpower format\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.export_matpower-Tuple{IO,Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.export_matpower","text":"export_matpower(io::IO, data::Dict{String,Any})\n\n\nExport power network data in the matpower format\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_func-Tuple{ACBranch,Complex{Float64},Complex{Float64}}","page":"PowerSystems","title":"PowerSystems.flow_func","text":"flow_func(b::ACBranch, V_from::Complex{Float64}, V_to::Complex{Float64})\n\n\nCalculates the From - To complex power flow using external data of voltages of branch of type Line\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_func-Tuple{TapTransformer,Complex{Float64},Complex{Float64}}","page":"PowerSystems","title":"PowerSystems.flow_func","text":"flow_func(b::TapTransformer, V_from::Complex{Float64}, V_to::Complex{Float64}) -> Tuple{Float64,Float64}\n\n\nCalculates the From - To complex power flow using external data of voltages of branch of type TapTransformer\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_func-Tuple{Transformer2W,Complex{Float64},Complex{Float64}}","page":"PowerSystems","title":"PowerSystems.flow_func","text":"flow_func(b::Transformer2W, V_from::Complex{Float64}, V_to::Complex{Float64}) -> Tuple{Float64,Float64}\n\n\nflow_func(b::Transformer2W, V_from::Complex, V_to::Complex)\n\nCalculates the From - To complex power flow using external data of voltages of branch of type Transformer2W\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{ACBranch}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::ACBranch)\n\n\nCalculates the From - To complex power flow (Flow injected at the bus) of branch of type Line\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{TapTransformer}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::TapTransformer) -> Complex{Float64}\n\n\nCalculates the From - To comp[lex power flow (Flow injected at the bus) of branch of type TapTransformer\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.flow_val-Tuple{Transformer2W}","page":"PowerSystems","title":"PowerSystems.flow_val","text":"flow_val(b::Transformer2W) -> Complex{Float64}\n\n\nCalculates the From - To complex power flow (Flow injected at the bus) of branch of type Transformer2W\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.gen_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.gen_csv_parser!","text":"gen_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nAdd generators to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_avr_saturation-Tuple{Tuple{Float64,Float64},Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.get_avr_saturation","text":"get_avr_saturation(E::Tuple{Float64,Float64}, Se::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nObtain coefficients (A, B) of the function Se(x) = B(x - A)^2/x for Se(E1) = B(E1 - A)^2/E1 and Se(E2) = B(E2 - A)^2/2 and uses the negative solution of the quadratic equation \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_branch-Tuple{DynamicBranch}","page":"PowerSystems","title":"PowerSystems.get_branch","text":"get_branch(value::DynamicBranch) -> ACBranch\n\n\nGet branch\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_dataframe-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory}","page":"PowerSystems","title":"PowerSystems.get_dataframe","text":"get_dataframe(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory) -> DataFrames.DataFrame\n\n\nReturn the dataframe for the category.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_enum_value-Tuple{Any,String}","page":"PowerSystems","title":"PowerSystems.get_enum_value","text":"get_enum_value(enum::Any, value::String) -> Any\n\n\nGet the enum value for the string. Case insensitive.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_exponential_saturation-Tuple{Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.get_exponential_saturation","text":"get_exponential_saturation(Se::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nObtain coefficients (A, B) of the function Se = Bx^A for Se(1.2) = B(1.2)^A and Se(1.0) = B(1.0)^A as: B = Se(1.0) and hence (1.2)^A = Se(1.2)/B -> A = log(Se(1.2)/B) / log(1.2)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_forecast_keys-Tuple{Component}","page":"PowerSystems","title":"PowerSystems.get_forecast_keys","text":"get_forecast_keys(component::Component) -> Any\n\n\nReturn an iterable of NamedTuple keys for forecasts stored for this component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_generator_mapping","page":"PowerSystems","title":"PowerSystems.get_generator_mapping","text":"get_generator_mapping() -> Dict{NamedTuple,DataType}\nget_generator_mapping(filename::Any) -> Dict{NamedTuple,DataType}\n\n\nReturn a dict where keys are a tuple of input parameters (fuel, unit_type) and values are generator types.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSystems/#PowerSystems.get_generator_type-Tuple{Any,Any,Dict{NamedTuple,DataType}}","page":"PowerSystems","title":"PowerSystems.get_generator_type","text":"get_generator_type(fuel::Any, unit_type::Any, mappings::Dict{NamedTuple,DataType}) -> Union{Nothing, DataType}\n\n\nReturn the PowerSystems generator type for this fuel and unit_type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_quadratic_saturation-Tuple{Tuple{Float64,Float64}}","page":"PowerSystems","title":"PowerSystems.get_quadratic_saturation","text":"get_quadratic_saturation(Se::Tuple{Float64,Float64}) -> Tuple{Float64,Float64}\n\n\nObtain coefficients (A, B) of the function Se = B(x - A)^2 for Se(1.2) = B(1.2 - A)^2 and Se(1.0) = B(1.0 - A)^2 as: Se(1.0) = Se(1.2)/(1.2 - A)^2 * (1.0 - A)^2 that yields (1.2 - A)^2 Se(1.0) = Se(1.2) * (1.0 - A)^2 or expanding: (Se(1.2) - Se(1.0)) A^2 + (2.4 Se(1.0) - 2 Se(1.2)) A + (Se(1.2) - 1.44 Se(1.0)) = 0 and uses the negative solution of the quadratic equation \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_series_susceptance-Tuple{ACBranch}","page":"PowerSystems","title":"PowerSystems.get_series_susceptance","text":"get_series_susceptance(b::ACBranch) -> Float64\n\n\nCalculate the admittance of AC branches\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_static_injector-Union{Tuple{T}, Tuple{T}} where T<:DynamicInjection","page":"PowerSystems","title":"PowerSystems.get_static_injector","text":"get_static_injector(device::T<:DynamicInjection) -> Union{Nothing, Generator}\n\n\nReturn the static injector stored with a dynamic injector.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_user_field-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory,AbstractString}","page":"PowerSystems","title":"PowerSystems.get_user_field","text":"get_user_field(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory, field::AbstractString) -> Any\n\n\nReturn the custom name stored in the user descriptor file.\n\nThrows DataFormatError if a required value is not found in the file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.get_user_fields-Tuple{PowerSystems.PowerSystemTableData,PowerSystems.InputCategory}","page":"PowerSystems","title":"PowerSystems.get_user_fields","text":"get_user_fields(data::PowerSystems.PowerSystemTableData, category::PowerSystems.InputCategory) -> Any\n\n\nReturn a vector of user-defined fields for the category.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.handle_component_addition!-Tuple{System,Component}","page":"PowerSystems","title":"PowerSystems.handle_component_addition!","text":"handle_component_addition!(sys::System, component::Component)\n\n\nRefer to docstring for checkcomponentaddition!\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.handle_component_removal!-Tuple{System,Bus}","page":"PowerSystems","title":"PowerSystems.handle_component_removal!","text":"handle_component_removal!(sys::System, bus::Bus) -> Int64\n\n\nThrows ArgumentError if the bus number is not stored in the system.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.im_replicate-Tuple{Dict{String,#s799} where #s799,Int64,Set{String}}","page":"PowerSystems","title":"PowerSystems.im_replicate","text":"im_replicate(sn_data::Dict{String,#s799} where #s799, count::Int64, global_keys::Set{String}) -> Dict{String,Any}\n\n\nTransforms a single network into a multinetwork with several deepcopies of the original network\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.isafield-Tuple{Component,Symbol}","page":"PowerSystems","title":"PowerSystems.isafield","text":"isafield(component::Component, field::Symbol) -> Any\n\n\nChecks if a PowerSystemDevice has a field or subfield name.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.ismultinetwork-Tuple{Dict{String,#s801} where #s801}","page":"PowerSystems","title":"PowerSystems.ismultinetwork","text":"ismultinetwork(data::Dict{String,#s801} where #s801) -> Any\n\n\nchecks if a given network data is a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.iterate_rows-Tuple{PowerSystems.PowerSystemTableData,Any}","page":"PowerSystems","title":"PowerSystems.iterate_rows","text":"iterate_rows(data::PowerSystems.PowerSystemTableData, category::Any; na_to_nothing) -> Channel{Any}\n\n\nReturn a NamedTuple of parameters from the descriptor file for each row of a dataframe, making type conversions as necessary.\n\nRefer to the PowerSystems descriptor file for field names that will be created.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.load_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.load_csv_parser!","text":"load_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nload_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd loads to the System from the raw load data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.loadzone_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.loadzone_csv_parser!","text":"loadzone_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nloadzone_csv_parser!(sys::System, data::PowerSystemTableData)\n\nAdd branches to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_bus-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.make_bus","text":"make_bus(bus_dict::Dict{String,Any}) -> Bus\n\n\nCreates a PowerSystems.Bus from a PowerSystems bus dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_generator-Tuple{PowerSystems.PowerSystemTableData,Any,Any,Any}","page":"PowerSystems","title":"PowerSystems.make_generator","text":"make_generator(data::PowerSystems.PowerSystemTableData, gen::Any, cost_colnames::Any, bus::Any) -> Any\n\n\nCreates a generator of any type.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_mixed_units!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.make_mixed_units!","text":"make_mixed_units!(data::Dict{String,#s799} where #s799)\n\n\nTransforms network data into mixed-units (inverse of per-unit)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_per_unit!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.make_per_unit!","text":"make_per_unit!(data::Dict{String,#s799} where #s799)\n\n\nTransforms network data into per-unit\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.make_thermal_gen-Tuple{AbstractString,Dict,Bus,Number}","page":"PowerSystems","title":"PowerSystems.make_thermal_gen","text":"make_thermal_gen(gen_name::AbstractString, d::Dict, bus::Bus, sys_mbase::Number) -> ThermalStandard\n\n\nThe polynomial term follows the convention that for an n-degree polynomial, at least n + 1 components are needed.     c(p) = cn*p^n+...+c1p+c0     co is stored in the  field in of the Econ Struct\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.move_genfuel_and_gentype!-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.move_genfuel_and_gentype!","text":"move_genfuel_and_gentype!(data::Dict{String,Any})\n\n\nMove gentype and genfuel fields to be subfields of gen\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_matpower-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_matpower","text":"parse_matpower(io::IO; validate) -> Dict{String,Any}\n\n\nParses the matpwer data from either a filename or an IO object\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_psse-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_psse","text":"parse_psse(io::IO; kwargs...) -> Dict{String,Any}\n\n\nParses directly from iostream\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_psse-Tuple{String}","page":"PowerSystems","title":"PowerSystems.parse_psse","text":"parse_psse(filename::String; kwargs...) -> Dict{String,Any}\n\n\nParses directly from file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_pti-Tuple{IO}","page":"PowerSystems","title":"PowerSystems.parse_pti","text":"parse_pti(io::IO) -> Dict{String,Array{Dict,N} where N}\n\n\nparse_pti(io::IO)\n\nReads PTI data in io::IO, returning a Dict of the data parsed into the proper types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.parse_pti-Tuple{String}","page":"PowerSystems","title":"PowerSystems.parse_pti","text":"parse_pti(filename::String) -> Dict{String,Array{Dict,N} where N}\n\n\nparse_pti(filename::String)\n\nOpen PTI raw file given by filename, returning a Dict of the data parsed into the proper types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.propagate_topology_status!-Tuple{Dict{String,#s799} where #s799}","page":"PowerSystems","title":"PowerSystems.propagate_topology_status!","text":"propagate_topology_status!(data::Dict{String,#s799} where #s799)\n\n\nfinds active network buses and branches that are not necessary for the computation and sets their status to off.\n\nWorks on a PowerModels data dict, so that a it can be used without a GenericPowerModel object\n\nWarning: this implementation has quadratic complexity, in the worst case\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.read_gen!-Tuple{System,Any,Dict{Int64,Bus}}","page":"PowerSystems","title":"PowerSystems.read_gen!","text":"read_gen!(sys::System, data::Any, bus_number_to_bus::Dict{Int64,Bus}; kwargs...)\n\n\nTransfer generators to ps_dict according to their classification\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.replicate-Tuple{Dict{String,#s798} where #s798,Int64}","page":"PowerSystems","title":"PowerSystems.replicate","text":"replicate(sn_data::Dict{String,#s798} where #s798, count::Int64; global_keys) -> Dict{String,Any}\n\n\nTurns in given single network data in multinetwork data with a count replicate of the given network.  Note that this function performs a deepcopy of the network data.  Significant multinetwork space savings can often be achieved by building application specific methods of building multinetwork with minimal data replication.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.row_to_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.row_to_dict","text":"row_to_dict(row_data::Any, columns::Any) -> Dict{String,Any}\n\n\ntakes a row from a matrix and assigns the values names\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.row_to_typed_dict-Tuple{Any,Any}","page":"PowerSystems","title":"PowerSystems.row_to_typed_dict","text":"row_to_typed_dict(row_data::Any, columns::Any) -> Dict{String,Any}\n\n\ntakes a row from a matrix and assigns the values names and types\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.select_largest_component-Tuple{Dict{String,Any}}","page":"PowerSystems","title":"PowerSystems.select_largest_component","text":"select_largest_component(data::Dict{String,Any}) -> Any\n\n\ndetermines the largest connected component of the network and turns everything else off\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.services_csv_parser!-Tuple{System,PowerSystems.PowerSystemTableData}","page":"PowerSystems","title":"PowerSystems.services_csv_parser!","text":"services_csv_parser!(sys::System, data::PowerSystems.PowerSystemTableData)\n\n\nAdd services to the System from the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.set_branch!-Tuple{DynamicBranch,ACBranch}","page":"PowerSystems","title":"PowerSystems.set_branch!","text":"set_branch!(value::DynamicBranch, val::ACBranch) -> ACBranch\n\n\nSet branch\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.simplify_cost_terms!-Tuple{Dict{String,#s793} where #s793}","page":"PowerSystems","title":"PowerSystems.simplify_cost_terms!","text":"simplify_cost_terms!(data::Dict{String,#s793} where #s793) -> Tuple{Set{Int64},Set{Int64}}\n\n\ntrims zeros from higher order cost terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.split_line-Tuple{AbstractString}","page":"PowerSystems","title":"PowerSystems.split_line","text":"split_line(mp_line::AbstractString) -> Array{_A,1} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.standardize_cost_terms!-Tuple{Dict{String,#s788} where #s788}","page":"PowerSystems","title":"PowerSystems.standardize_cost_terms!","text":"standardize_cost_terms!(data::Dict{String,#s788} where #s788; order)\n\n\nensures all polynomial costs functions have the same number of terms\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.total_capacity_rating-Tuple{System}","page":"PowerSystems","title":"PowerSystems.total_capacity_rating","text":"total_capacity_rating(sys::System) -> Any\n\n\ntotal_capacity_rating(sys::System)\n\nSum of system generator and storage ratings.\n\nArguments\n\nsys::System: system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.total_load_rating-Tuple{System}","page":"PowerSystems","title":"PowerSystems.total_load_rating","text":"total_load_rating(sys::System) -> Any\n\n\ntotal_load_rating(sys::System)\n\nChecks the system for sum(generator ratings) >= sum(load ratings).\n\nArguments\n\nsys::System: system\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSystems/#PowerSystems.validate_struct-Tuple{System,PowerSystemType}","page":"PowerSystems","title":"PowerSystems.validate_struct","text":"validate_struct(sys::System, value::PowerSystemType) -> Bool\n\n\nValidate an instance of a PowerSystemType against System data. Returns true if the instance is valid.\n\nUsers implementing this function for custom types should consider implementing InfrastructureSystems.validate_struct instead if the validation logic only requires data contained within the instance.\n\n\n\n\n\n","category":"method"},{"location":"#PowerSystems.jl","page":"Introduction","title":"PowerSystems.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerSystems","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"PowerSystems.jl is a Julia package Power Systems Modeling that provides a rigorous data model using Julia structures to enable power systems analysis in addition to stand-alone system analysis tools and model building. Each device is defined using a Julia Structure embedded in a hierarchy for types. This enables categorization of the devices by their operational characteristics and the data required to model them.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The storage of power system data has traditionally been done with general use tables based on the power flow problem. However, tables are not inherently designed to store data with mixed data representations or hierarchal structures. This limitation was addressed in the early 1990's with the advent of automation, spurred by increasingly complex data needs for power systems operations. The industry required standardized models to exchange larger and more complex sets of information, and so resorted to an object-oriented data model. The CIM was developed and later made a standard maintained by the IEC - Technical Committee 57 Working Group 13. The aim was to provide a standard definition for power system components that could be used in automated EMS and asset-management databases.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"From the computer engineering point-of-view, using tables would require to re-write a lot of code. In most languages with strongly type hierarchies, using a tree structure it is advantageous. This is particularly relevant for code re-use and data encapsulation. Collecting all potential devices is not possible; neither is it desirable. However, it is necessary to have the capability to extend the data model such that different user can store their data in an organized ontology.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For instance, take the data hierarchy for thermal generation devices shown in Fig. \\ref{fig:PS_thermal}. Generation is classified by the distinctive operational characteristics of the generators and then further categorized by the data required to model a specific technology.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For more detailed documentation of each object in the library, see the API/PowerSystems page.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add PowerSystems","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add PowerSystems#master","category":"page"},{"location":"developer/style/#Julia-Coding-Style-Guide-for-PowerSystems.jl","page":"Style Guide","title":"Julia Coding Style Guide for PowerSystems.jl","text":"","category":"section"},{"location":"developer/style/#Goals","page":"Style Guide","title":"Goals","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Define a straightforward set of rules that lead to consistent, readable code.\nDevelopers focus on producing high quality code, not how to format it.","category":"page"},{"location":"developer/style/#Base","page":"Style Guide","title":"Base","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Read the official","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Julia style guide as reference.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Read Julia contribution guidelines, notably its line length limit.\nRead Julia guidelines for docstrings.\nRead BlueStyle style guide.\nConsider using a plugin that configures your text editor to use EditorConfig settings.\nConsider using JuliaFormatter.jl.","category":"page"},{"location":"developer/style/#Code-Organization","page":"Style Guide","title":"Code Organization","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Import standard modules, then 3rd-party modules, then yours. Include a blank line between each group.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"<!– ### Modules:  TODO –>","category":"page"},{"location":"developer/style/#Comments","page":"Style Guide","title":"Comments","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Use comments to describe non-obvious or non-trivial aspects of code. Describe why something was done but not how. The \"how\" should be apparent from the code itself.\nUse complete sentences and proper grammar.\nInclude a space in between the \"#\" and the first word of the comment.\nDon't use block comments for Julia code. Prefer using the # prefix. If you are commenting code, consider deleting it instead.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"for i in 1:100\n    #=\n    arr[i] += a[i] * x^2\n    arr[i] += b[i] * x\n    arr[i] += c[i]\n    =#\n    nothing\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"for i in 1:100\n    # arr[i] += a[i] * x^2\n    # arr[i] += b[i] * x\n    # arr[i] += c[i]\n    nothing\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Use these tags in comments to describe known work:\nTODO:  tasks that need to be done\nFIXME:  code that needs refactoring\nBUG:  known bug that exists. Should include a bug ID and tracking system.\nPERF:  known performance limitation that needs improvement","category":"page"},{"location":"developer/style/#Constructors","page":"Style Guide","title":"Constructors","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Per guidance from Julia documentation, use inner constructors to enforce restrictions on parameters or to allow construction of self-referential objects. Use outer constructors to provide default values or to perform customization.\nDocument the reason why the outer constructor is different.\nNote that the compiler will provide a default constructor with all struct","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"members if no inner constructor is defined.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"When creating a constructor use function Foo() instead of Foo() = ....\nOne exception is the case where one file has all single-line functions.\nPrefer explicit return in multi line functions instead of the implicit return.","category":"page"},{"location":"developer/style/#Exceptions","page":"Style Guide","title":"Exceptions","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Use exceptions for unexpected errors and not for normal error handling.\nDetection of an unsupported data format from a user should likely throw\nan exception and terminate the application.\nDo not use try/catch to handle retrieving a potentially-missing key from a\ndictionary.\nUse @assert statements to guard against programming errors. Do not use them after detecting bad user input. Note that they may be compiled out in release builds.","category":"page"},{"location":"developer/style/#Globals","page":"Style Guide","title":"Globals","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Global constants should be written in upper case and be declared const.\nconst UPPER_CASE_VARIABLE = π / 2\nIf global variables are needed, prefix them with g_.\nDon't use magic numbers. Instead, define const GLOBALS or Enums (Julia @enum).","category":"page"},{"location":"developer/style/#One-line-Conditionals","page":"Style Guide","title":"One-line Conditionals","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Julia code base uses this idiom frequently: <condition> && <statement>.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"See Example:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"function fact(n::Int)\n   n >= 0 || error(\"n must be non-negative\")\n   n == 0 && return 1\n   n * fact(n-1)\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"This is acceptable for simple code as in this example. However, in general, prefer to write out an entire if statement.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Ternary operators provide a way to write clean, concise code.  Use good judgement.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"y = x > 0 ? x : -x","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"There are many examples in our codebase that use the form <cond> ? <statement> : <statement>. These may be expressed much more clearly in an if/else statement.","category":"page"},{"location":"developer/style/#Unit-Tests","page":"Style Guide","title":"Unit Tests","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"All code should be tested.","category":"page"},{"location":"developer/style/#Whitespace","page":"Style Guide","title":"Whitespace","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"If many function arguments cause the line length to be exceeded, put one","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"argument per line. In some cases it may make sense to pair some variables on the same line.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"function foo(\n    var1::String,\n    var2::String,\n    var3::String,\n    var6::T,\n) where T <: Number\n    println(\"hello world\")\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"function foo(var1::String,\n             var2::String,\n             var3::String,\n             var6::T) where T <: Number\n    println(\"hello world\")\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Surround equal signs with spaces when passing keyword args to a","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"function or defining default values in function declarations.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Prefer elements in an array on separate lines. Follow opening square bracket with a new line and use closing square bracket on a separate new line.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"nodes = [\n    Node(1),\n    Node(2),\n    Node(3),\n    Node(4),\n    Node(5),\n];","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"nodes = [Node(1), Node(2), Node(3), Node(4), Node(5)];","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Prefer a similar rule for Dictionaries, Sets and other data structures. Use your judgement when data structures can neatly fit on a single line.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Do not right-align equal signs when assigning groups of variables. It causes unnecessary changes whenever someone adds a new variable with a longer name.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"x   = 1\nfoo = 2","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"x = 1\nfoo = 2","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Define abstract types on one line. Given the lack of IDE support for Julia, this makes it easier to find type definitions.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Bad:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"abstract type\n    Foo\nend","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"Good:","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"abstract type Foo end","category":"page"},{"location":"developer/style/#Exports","page":"Style Guide","title":"Exports","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"export should be used to make it easy for the user to use a symbol from the REPL, an interactive interface or a program.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"You may need to use export when extending functionality of other packages that have also exported the same symbol.","category":"page"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"All symbols that have export must have proper docstrings.","category":"page"},{"location":"developer/style/#References","page":"Style Guide","title":"References","text":"","category":"section"},{"location":"developer/style/","page":"Style Guide","title":"Style Guide","text":"The Zen of Python.","category":"page"},{"location":"developer/logging/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"This document describes logging facilities available in the PowerSystems module. The examples assume the following imports:","category":"page"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"import Logging\nimport PowerSystems: configure_logging, open_file_logger, MultiLogger, LogEventTracker","category":"page"},{"location":"developer/logging/#Use-Cases","page":"Logging","title":"Use Cases","text":"","category":"section"},{"location":"developer/logging/#Enable-logging-in-REPL-or-Jupyter-Notebook","page":"Logging","title":"Enable logging in REPL or Jupyter Notebook","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"Use configure_logging to create a logger with your preferences (console and/or file, levels, etc.).","category":"page"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"Note: log messages are not automatically flushed to files. Call flush(logger) to make this happen.","category":"page"},{"location":"developer/logging/#Example","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\nflush(logger)\n@error \"some error\"\nclose(logger)","category":"page"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"The function provides lots of customization. Refer to the docstring for complete details.","category":"page"},{"location":"developer/logging/#Log-to-console-and-file-in-an-application-or-unit-test-environment.","page":"Logging","title":"Log to console and file in an application or unit test environment.","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"Create a MultiLogger from Logging.ConsoleLogger and Logging.SimpleLogger. Use open_file_logger to guarantee that all messages get flushed to the file.","category":"page"},{"location":"developer/logging/#Example-2","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"console_logger = ConsoleLogger(stderr, Logging.Error)\n\nopen_file_logger(\"log.txt\", Logging.Info) do file_logger\n    multi_logger = MultiLogger([console_logger, file_logger])\n    global_logger(multi_logger)\n    \n    do_stuff()\nend","category":"page"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"Note: If someone may execute the code in the REPL then wrap that code in a try/finally block and reset the global logger upon exit.","category":"page"},{"location":"developer/logging/#Example-3","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"function run_tests()\n    console_logger = ConsoleLogger(stderr, Logging.Error)\n    \n    open_file_logger(\"log.txt\", Logging.Info) do file_logger\n        multi_logger = MultiLogger([console_logger, file_logger])\n        global_logger(multi_logger)\n        \n        do_stuff()\n    end\nend\n\nlogger = global_logger()\n\ntry\n    run_tests()\nfinally\n    # Guarantee that the global logger is reset.\n    global_logger(logger)\n    nothing\nend","category":"page"},{"location":"developer/logging/#Suppress-frequent-messages","page":"Logging","title":"Suppress frequent messages","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"The standard Logging module in Julia provides a method to suppress messages. Tag the log message with maxlog=X.","category":"page"},{"location":"developer/logging/#Example-4","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"for i in range(1, length=100)\n    @error \"something happened\" i maxlog=2\nend","category":"page"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"Only 2 messages will get logged.","category":"page"},{"location":"developer/logging/#Get-a-summary-of-log-messages","page":"Logging","title":"Get a summary of log messages","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"By default a MultiLogger creates a LogEventTracker that keeps counts of all messages. Call report_log_summary after execution.","category":"page"},{"location":"developer/logging/#Example-5","page":"Logging","title":"Example","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"logger = configure_logging(; filename=\"log.txt\")\n@info \"hello world\"\n\n# Include a summary in the log file.\n@info report_log_summary(logger)\nclose(logger)","category":"page"},{"location":"developer/logging/#Example-output","page":"Logging","title":"Example output","text":"","category":"section"},{"location":"developer/logging/","page":"Logging","title":"Logging","text":"julia> for i in range(1, length=100)\n           @info \"hello\" maxlog=2\n           @warn \"beware\" maxlog=2\n       end\njulia> @info report_log_summary(logger)\n┌ Info:\n│ Log message summary:\n│\n│ 0 Error events:\n│\n│ 1 Warn events:\n│   count=100 at REPL[19]:3\n│     example message=\"beware\"\n│     suppressed=98\n│\n│ 1 Info events:\n│   count=100 at REPL[19]:2\n│     example message=\"hello\"\n└     suppressed=98","category":"page"}]
}
